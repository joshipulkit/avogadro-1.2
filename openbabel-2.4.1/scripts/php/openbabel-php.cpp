/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPHP
#define SWIGPHP
#endif

#define SWIG_PREFIX ""
#define SWIG_PREFIX_LEN 0

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"
#include "ext/standard/php_string.h"
#include <stdlib.h> /* for abort(), used in generated code. */

#ifdef ZEND_RAW_FENTRY
/* ZEND_RAW_FENTRY was added somewhere between 5.2.0 and 5.2.3 */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_RAW_FENTRY((char*)#ZN, N, A, 0)
#else
/* This causes warnings from GCC >= 4.2 (assigning a string literal to char*).
 * But this seems to be unavoidable without directly assuming knowledge of
 * the structure, which changed between PHP4 and PHP5. */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)
#endif

#ifndef ZEND_FE_END
# define ZEND_FE_END { NULL, NULL, NULL }
#endif

#ifndef Z_SET_ISREF_P
/* For PHP < 5.3 */
# define Z_SET_ISREF_P(z) (z)->is_ref = 1
#endif
#ifndef Z_SET_REFCOUNT_P
/* For PHP < 5.3 */
# define Z_SET_REFCOUNT_P(z, rc) (z)->refcount = (rc)
#endif

#define SWIG_LONG_CONSTANT(N, V) zend_register_long_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_DOUBLE_CONSTANT(N, V) zend_register_double_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_STRING_CONSTANT(N, V) zend_register_stringl_constant((char*)#N, sizeof(#N), (char*)(V), strlen(V), CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    static char swig_char = (V);\
    zend_register_stringl_constant((char*)#N, sizeof(#N), &swig_char, 1, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC);\
} while (0)

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)


#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) { (void)rsrc; }

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d TSRMLS_CC)
#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject TSRMLS_DC) {
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    swig_object_wrapper *value;
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=(newobject & 1);
    if ((newobject & 2) == 0) {
      /* Just register the pointer as a resource. */
      ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      zval *resource;
      zend_class_entry **ce = NULL;
      const char *type_name = type->name+3; /* +3 so: _p_Foo -> Foo */
      size_t type_name_len;
      int result;
      const char * p;

      /* Namespace__Foo -> Foo */
      /* FIXME: ugly and goes wrong for classes with __ in their names. */
      while ((p = strstr(type_name, "__")) != NULL) {
        type_name = p + 2;
      }
      type_name_len = strlen(type_name);

      MAKE_STD_ZVAL(resource);
      ZEND_REGISTER_RESOURCE(resource, value, *(int *)(type->clientdata));
      if (SWIG_PREFIX_LEN > 0) {
        char * classname = (char*)emalloc(SWIG_PREFIX_LEN + type_name_len + 1);
        strcpy(classname, SWIG_PREFIX);
        strcpy(classname + SWIG_PREFIX_LEN, type_name);
        result = zend_lookup_class(classname, SWIG_PREFIX_LEN + type_name_len, &ce TSRMLS_CC);
        efree(classname);
      } else {
        result = zend_lookup_class((char *)type_name, type_name_len, &ce TSRMLS_CC);
      }
      if (result != SUCCESS) {
        /* class does not exist */
        object_init(z);
      } else {
        object_init_ex(z, *ce);
      }
      Z_SET_REFCOUNT_P(z, 1);
      Z_SET_ISREF_P(z);
      zend_hash_update(HASH_OF(z), (char*)"_cPtr", sizeof("_cPtr"), (void*)&resource, sizeof(zval*), NULL);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ZTS_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {  
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static void *
SWIG_ZTS_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  const char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval, &type);
  if (type==-1) return NULL;
  if (flags & SWIG_POINTER_DISOWN) {
    value->newobject = 0;
  }
  p = value->ptr;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p, type_name, ty TSRMLS_CC);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (z->type) {
    case IS_OBJECT: {
      zval ** _cPtr;
      if (zend_hash_find(HASH_OF(z),(char*)"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
	if ((*_cPtr)->type==IS_RESOURCE) {
	  *ptr = SWIG_ZTS_ConvertResourcePtr(*_cPtr, ty, flags TSRMLS_CC);
	  return (*ptr == NULL ? -1 : 0);
	}
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ZTS_ConvertResourcePtr(z, ty, flags TSRMLS_CC);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return 0;
  }

  return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule() {
  zval *pointer;
  swig_module_info *ret = 0;
  TSRMLS_FETCH();

  MAKE_STD_ZVAL(pointer);

  if (zend_get_constant(const_name, sizeof(const_name) - 1, pointer TSRMLS_CC)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  } 
  FREE_ZVAL(pointer);
  return ret; 
}

static void SWIG_Php_SetModule(swig_module_info *pointer) {
  TSRMLS_FETCH();
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_double swig_types[0]
#define SWIGTYPE_int swig_types[1]
#define SWIGTYPE_p_ConstRefIter swig_types[2]
#define SWIGTYPE_p_Mapping swig_types[3]
#define SWIGTYPE_p_Mappings swig_types[4]
#define SWIGTYPE_p_OpMap swig_types[5]
#define SWIGTYPE_p_OpenBabel__AliasData swig_types[6]
#define SWIGTYPE_p_OpenBabel__CharPtrLess swig_types[7]
#define SWIGTYPE_p_OpenBabel__DoubleType swig_types[8]
#define SWIGTYPE_p_OpenBabel__FastSearch swig_types[9]
#define SWIGTYPE_p_OpenBabel__FastSearchIndexer swig_types[10]
#define SWIGTYPE_p_OpenBabel__FptIndex swig_types[11]
#define SWIGTYPE_p_OpenBabel__FptIndexHeader swig_types[12]
#define SWIGTYPE_p_OpenBabel__LineSearchType swig_types[13]
#define SWIGTYPE_p_OpenBabel__OBAngle swig_types[14]
#define SWIGTYPE_p_OpenBabel__OBAngleData swig_types[15]
#define SWIGTYPE_p_OpenBabel__OBAromaticTyper swig_types[16]
#define SWIGTYPE_p_OpenBabel__OBAtom swig_types[17]
#define SWIGTYPE_p_OpenBabel__OBAtomAtomIter swig_types[18]
#define SWIGTYPE_p_OpenBabel__OBAtomBondIter swig_types[19]
#define SWIGTYPE_p_OpenBabel__OBAtomClassData swig_types[20]
#define SWIGTYPE_p_OpenBabel__OBAtomHOF swig_types[21]
#define SWIGTYPE_p_OpenBabel__OBAtomTyper swig_types[22]
#define SWIGTYPE_p_OpenBabel__OBAtomicHeatOfFormationTable swig_types[23]
#define SWIGTYPE_p_OpenBabel__OBBase swig_types[24]
#define SWIGTYPE_p_OpenBabel__OBBitVec swig_types[25]
#define SWIGTYPE_p_OpenBabel__OBBond swig_types[26]
#define SWIGTYPE_p_OpenBabel__OBBuilder swig_types[27]
#define SWIGTYPE_p_OpenBabel__OBChainsParser swig_types[28]
#define SWIGTYPE_p_OpenBabel__OBChargeModel swig_types[29]
#define SWIGTYPE_p_OpenBabel__OBChiralData swig_types[30]
#define SWIGTYPE_p_OpenBabel__OBCisTransStereo swig_types[31]
#define SWIGTYPE_p_OpenBabel__OBCommentData swig_types[32]
#define SWIGTYPE_p_OpenBabel__OBConformerData swig_types[33]
#define SWIGTYPE_p_OpenBabel__OBConversion swig_types[34]
#define SWIGTYPE_p_OpenBabel__OBDOSData swig_types[35]
#define SWIGTYPE_p_OpenBabel__OBDescriptor swig_types[36]
#define SWIGTYPE_p_OpenBabel__OBElectronicTransitionData swig_types[37]
#define SWIGTYPE_p_OpenBabel__OBElement swig_types[38]
#define SWIGTYPE_p_OpenBabel__OBElementTable swig_types[39]
#define SWIGTYPE_p_OpenBabel__OBError swig_types[40]
#define SWIGTYPE_p_OpenBabel__OBExternalBond swig_types[41]
#define SWIGTYPE_p_OpenBabel__OBExternalBondData swig_types[42]
#define SWIGTYPE_p_OpenBabel__OBFFCalculation2 swig_types[43]
#define SWIGTYPE_p_OpenBabel__OBFFCalculation3 swig_types[44]
#define SWIGTYPE_p_OpenBabel__OBFFCalculation4 swig_types[45]
#define SWIGTYPE_p_OpenBabel__OBFFConstraint swig_types[46]
#define SWIGTYPE_p_OpenBabel__OBFFConstraints swig_types[47]
#define SWIGTYPE_p_OpenBabel__OBFFParameter swig_types[48]
#define SWIGTYPE_p_OpenBabel__OBFingerprint swig_types[49]
#define SWIGTYPE_p_OpenBabel__OBForceField swig_types[50]
#define SWIGTYPE_p_OpenBabel__OBFormat swig_types[51]
#define SWIGTYPE_p_OpenBabel__OBFreeGrid swig_types[52]
#define SWIGTYPE_p_OpenBabel__OBFreeGridPoint swig_types[53]
#define SWIGTYPE_p_OpenBabel__OBGenericData swig_types[54]
#define SWIGTYPE_p_OpenBabel__OBGlobalDataBase swig_types[55]
#define SWIGTYPE_p_OpenBabel__OBGraphSym swig_types[56]
#define SWIGTYPE_p_OpenBabel__OBGridData swig_types[57]
#define SWIGTYPE_p_OpenBabel__OBInternalCoord swig_types[58]
#define SWIGTYPE_p_OpenBabel__OBIsomorphismMapper swig_types[59]
#define SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor swig_types[60]
#define SWIGTYPE_p_OpenBabel__OBIsotopeTable swig_types[61]
#define SWIGTYPE_p_OpenBabel__OBMatrixData swig_types[62]
#define SWIGTYPE_p_OpenBabel__OBMessageHandler swig_types[63]
#define SWIGTYPE_p_OpenBabel__OBMol swig_types[64]
#define SWIGTYPE_p_OpenBabel__OBMolAngleIter swig_types[65]
#define SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter swig_types[66]
#define SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter swig_types[67]
#define SWIGTYPE_p_OpenBabel__OBMolAtomIter swig_types[68]
#define SWIGTYPE_p_OpenBabel__OBMolBondBFSIter swig_types[69]
#define SWIGTYPE_p_OpenBabel__OBMolBondIter swig_types[70]
#define SWIGTYPE_p_OpenBabel__OBMolPairIter swig_types[71]
#define SWIGTYPE_p_OpenBabel__OBMolRingIter swig_types[72]
#define SWIGTYPE_p_OpenBabel__OBMolTorsionIter swig_types[73]
#define SWIGTYPE_p_OpenBabel__OBNasaThermoData swig_types[74]
#define SWIGTYPE_p_OpenBabel__OBOp swig_types[75]
#define SWIGTYPE_p_OpenBabel__OBOrbital swig_types[76]
#define SWIGTYPE_p_OpenBabel__OBOrbitalData swig_types[77]
#define SWIGTYPE_p_OpenBabel__OBPairData swig_types[78]
#define SWIGTYPE_p_OpenBabel__OBPairTemplateT_bool_t swig_types[79]
#define SWIGTYPE_p_OpenBabel__OBPairTemplateT_double_t swig_types[80]
#define SWIGTYPE_p_OpenBabel__OBPairTemplateT_int_t swig_types[81]
#define SWIGTYPE_p_OpenBabel__OBPlugin swig_types[82]
#define SWIGTYPE_p_OpenBabel__OBQuery swig_types[83]
#define SWIGTYPE_p_OpenBabel__OBQueryAtom swig_types[84]
#define SWIGTYPE_p_OpenBabel__OBQueryBond swig_types[85]
#define SWIGTYPE_p_OpenBabel__OBRTree swig_types[86]
#define SWIGTYPE_p_OpenBabel__OBRandom swig_types[87]
#define SWIGTYPE_p_OpenBabel__OBRateData swig_types[88]
#define SWIGTYPE_p_OpenBabel__OBReaction swig_types[89]
#define SWIGTYPE_p_OpenBabel__OBResidue swig_types[90]
#define SWIGTYPE_p_OpenBabel__OBResidueAtomIter swig_types[91]
#define SWIGTYPE_p_OpenBabel__OBResidueData swig_types[92]
#define SWIGTYPE_p_OpenBabel__OBResidueIter swig_types[93]
#define SWIGTYPE_p_OpenBabel__OBRing swig_types[94]
#define SWIGTYPE_p_OpenBabel__OBRingData swig_types[95]
#define SWIGTYPE_p_OpenBabel__OBRingSearch swig_types[96]
#define SWIGTYPE_p_OpenBabel__OBRingTyper swig_types[97]
#define SWIGTYPE_p_OpenBabel__OBRotamerList swig_types[98]
#define SWIGTYPE_p_OpenBabel__OBRotationData swig_types[99]
#define SWIGTYPE_p_OpenBabel__OBRotor swig_types[100]
#define SWIGTYPE_p_OpenBabel__OBRotorKeys swig_types[101]
#define SWIGTYPE_p_OpenBabel__OBRotorList swig_types[102]
#define SWIGTYPE_p_OpenBabel__OBRotorRule swig_types[103]
#define SWIGTYPE_p_OpenBabel__OBRotorRules swig_types[104]
#define SWIGTYPE_p_OpenBabel__OBSSMatch swig_types[105]
#define SWIGTYPE_p_OpenBabel__OBSerialNums swig_types[106]
#define SWIGTYPE_p_OpenBabel__OBSetData swig_types[107]
#define SWIGTYPE_p_OpenBabel__OBSmartsMatcher swig_types[108]
#define SWIGTYPE_p_OpenBabel__OBSmartsPattern swig_types[109]
#define SWIGTYPE_p_OpenBabel__OBSpectrophore swig_types[110]
#define SWIGTYPE_p_OpenBabel__OBSqrtTbl swig_types[111]
#define SWIGTYPE_p_OpenBabel__OBSquarePlanarStereo swig_types[112]
#define SWIGTYPE_p_OpenBabel__OBStereo swig_types[113]
#define SWIGTYPE_p_OpenBabel__OBStereoBase swig_types[114]
#define SWIGTYPE_p_OpenBabel__OBStereoFacade swig_types[115]
#define SWIGTYPE_p_OpenBabel__OBStereoUnit swig_types[116]
#define SWIGTYPE_p_OpenBabel__OBStopwatch swig_types[117]
#define SWIGTYPE_p_OpenBabel__OBSymmetryData swig_types[118]
#define SWIGTYPE_p_OpenBabel__OBTetrahedralStereo swig_types[119]
#define SWIGTYPE_p_OpenBabel__OBTorsion swig_types[120]
#define SWIGTYPE_p_OpenBabel__OBTorsionData swig_types[121]
#define SWIGTYPE_p_OpenBabel__OBTypeTable swig_types[122]
#define SWIGTYPE_p_OpenBabel__OBUnitCell swig_types[123]
#define SWIGTYPE_p_OpenBabel__OBVectorData swig_types[124]
#define SWIGTYPE_p_OpenBabel__OBVibrationData swig_types[125]
#define SWIGTYPE_p_OpenBabel__OBVirtualBond swig_types[126]
#define SWIGTYPE_p_OpenBabel__Pattern swig_types[127]
#define SWIGTYPE_p_OpenBabel__SpaceGroup swig_types[128]
#define SWIGTYPE_p_OpenBabel__Template swig_types[129]
#define SWIGTYPE_p_OpenBabel__matrix3x3 swig_types[130]
#define SWIGTYPE_p_OpenBabel__obLogBuf swig_types[131]
#define SWIGTYPE_p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t swig_types[132]
#define SWIGTYPE_p_OpenBabel__rotor_digit swig_types[133]
#define SWIGTYPE_p_OpenBabel__transform3d swig_types[134]
#define SWIGTYPE_p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t swig_types[135]
#define SWIGTYPE_p_OpenBabel__vector3 swig_types[136]
#define SWIGTYPE_p_PluginIterator swig_types[137]
#define SWIGTYPE_p_PluginMapType swig_types[138]
#define SWIGTYPE_p_Ref swig_types[139]
#define SWIGTYPE_p_RefIter swig_types[140]
#define SWIGTYPE_p_Refs swig_types[141]
#define SWIGTYPE_p_Unit swig_types[142]
#define SWIGTYPE_p_a_3__double swig_types[143]
#define SWIGTYPE_p_a_4__char swig_types[144]
#define SWIGTYPE_p_bool swig_types[145]
#define SWIGTYPE_p_char swig_types[146]
#define SWIGTYPE_p_difference_type swig_types[147]
#define SWIGTYPE_p_double swig_types[148]
#define SWIGTYPE_p_int swig_types[149]
#define SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t swig_types[150]
#define SWIGTYPE_p_p_OpenBabel__OBChargeModel swig_types[151]
#define SWIGTYPE_p_p_OpenBabel__OBDescriptor swig_types[152]
#define SWIGTYPE_p_p_OpenBabel__OBFingerprint swig_types[153]
#define SWIGTYPE_p_p_OpenBabel__OBForceField swig_types[154]
#define SWIGTYPE_p_p_OpenBabel__OBFormat swig_types[155]
#define SWIGTYPE_p_p_OpenBabel__OBOp swig_types[156]
#define SWIGTYPE_p_p_double swig_types[157]
#define SWIGTYPE_p_p_int swig_types[158]
#define SWIGTYPE_p_size_type swig_types[159]
#define SWIGTYPE_p_std__binary_functionT_char_const_p_char_const_p_bool_t swig_types[160]
#define SWIGTYPE_p_std__dequeT_int_t swig_types[161]
#define SWIGTYPE_p_std__istream swig_types[162]
#define SWIGTYPE_p_std__listT_OpenBabel__transform3d_p_t__const_iterator swig_types[163]
#define SWIGTYPE_p_std__listT_OpenBabel__vector3_t swig_types[164]
#define SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t swig_types[165]
#define SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t swig_types[166]
#define SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t swig_types[167]
#define SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator swig_types[168]
#define SWIGTYPE_p_std__mapT_int_OpenBabel__OBAtom_p_t swig_types[169]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[170]
#define SWIGTYPE_p_std__multimapT_double_unsigned_int_t swig_types[171]
#define SWIGTYPE_p_std__ostream swig_types[172]
#define SWIGTYPE_p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t swig_types[173]
#define SWIGTYPE_p_std__pairT_int_int_t swig_types[174]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[175]
#define SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t swig_types[176]
#define SWIGTYPE_p_std__setT_OpenBabel__OBBond_p_t swig_types[177]
#define SWIGTYPE_p_std__streampos swig_types[178]
#define SWIGTYPE_p_std__string swig_types[179]
#define SWIGTYPE_p_std__stringbuf swig_types[180]
#define SWIGTYPE_p_std__type_info swig_types[181]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t swig_types[182]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator swig_types[183]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBBase_p_t swig_types[184]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t swig_types[185]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator swig_types[186]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t swig_types[187]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t swig_types[188]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBExternalBond_t swig_types[189]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator swig_types[190]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t swig_types[191]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator swig_types[192]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t swig_types[193]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator swig_types[194]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t swig_types[195]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t swig_types[196]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryAtom_p_t swig_types[197]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryBond_p_t swig_types[198]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_p_t__iterator swig_types[199]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t swig_types[200]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t swig_types[201]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator swig_types[202]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t swig_types[203]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator swig_types[204]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t swig_types[205]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t swig_types[206]
#define SWIGTYPE_p_std__vectorT_OpenBabel__OBTorsion_t swig_types[207]
#define SWIGTYPE_p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t swig_types[208]
#define SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t swig_types[209]
#define SWIGTYPE_p_std__vectorT_double_p_t swig_types[210]
#define SWIGTYPE_p_std__vectorT_double_p_t__iterator swig_types[211]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[212]
#define SWIGTYPE_p_std__vectorT_double_t__iterator swig_types[213]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[214]
#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t swig_types[215]
#define SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t swig_types[216]
#define SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t swig_types[217]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[218]
#define SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t swig_types[219]
#define SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t swig_types[220]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t swig_types[221]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t__iterator swig_types[222]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t swig_types[223]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t swig_types[224]
#define SWIGTYPE_p_std__vectorT_uint32_t_t swig_types[225]
#define SWIGTYPE_p_std__vectorT_unsigned_char_p_t__iterator swig_types[226]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[227]
#define SWIGTYPE_p_std__vectorT_unsigned_long_t swig_types[228]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[229]
#define SWIGTYPE_p_unsigned_char swig_types[230]
#define SWIGTYPE_p_unsigned_int swig_types[231]
#define SWIGTYPE_p_value_type swig_types[232]
#define SWIGTYPE_p_void swig_types[233]
#define SWIGTYPE_p_word_vector swig_types[234]
static swig_type_info *swig_types[236];
static swig_module_info swig_module = {swig_types, 235, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(openbabel)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(openbabel)
ZEND_DECLARE_MODULE_GLOBALS(openbabel)
#ifdef ZTS
#define SWIG_ErrorMsg() TSRMG(openbabel_globals_id, zend_openbabel_globals *, error_msg )
#define SWIG_ErrorCode() TSRMG(openbabel_globals_id, zend_openbabel_globals *, error_code )
#else
#define SWIG_ErrorMsg() (openbabel_globals.error_msg)
#define SWIG_ErrorCode() (openbabel_globals.error_code)
#endif

#ifdef __GNUC__
static void SWIG_FAIL(TSRMLS_D) __attribute__ ((__noreturn__));
#endif

static void SWIG_FAIL(TSRMLS_D) {
    zend_error(SWIG_ErrorCode(), "%s", SWIG_ErrorMsg());
    abort();
}

static void openbabel_init_globals(zend_openbabel_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void openbabel_destroy_globals(zend_openbabel_globals * globals) { (void)globals; }

static void SWIG_ResetError(TSRMLS_D) {
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_openbabel_alter_newobject) {
  zval **args[2];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  value->newobject = zval_is_true(*args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_openbabel_get_newobject) {
  zval **args[1];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "openbabel"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_openbabel.h"
#ifdef __cplusplus
}
#endif


// used to set import/export for Cygwin DLLs
#ifdef WIN32
#define USING_OBDLL
#endif


#include <openbabel/obutil.h>
#include <openbabel/rand.h>
#include <openbabel/math/vector3.h>
#include <openbabel/math/matrix3x3.h>
#include <openbabel/math/transform3d.h>
#include <openbabel/math/spacegroup.h>

#include <openbabel/generic.h>
#include <openbabel/griddata.h>

#include <openbabel/base.h>
#include <openbabel/mol.h>
#include <openbabel/atom.h>
#include <openbabel/bond.h>
#include <openbabel/reaction.h>
#include <openbabel/residue.h>
#include <openbabel/internalcoord.h>

#include <openbabel/ring.h>
#include <openbabel/obconversion.h>
#include <openbabel/oberror.h>
#include <openbabel/plugin.h>
#include <openbabel/fingerprint.h>
#include <openbabel/descriptor.h>
#include <openbabel/format.h>

#include <openbabel/forcefield.h>
#include <openbabel/builder.h>
#include <openbabel/op.h>

#include <openbabel/bitvec.h>
#include <openbabel/data.h>
#include <openbabel/parsmart.h>
#include <openbabel/alias.h>
#include <openbabel/atomclass.h>

#include <openbabel/kinetics.h>
#include <openbabel/rotor.h>
#include <openbabel/rotamer.h>
#include <openbabel/spectrophore.h>

#include <openbabel/chargemodel.h>
#include <openbabel/graphsym.h>
#include <openbabel/isomorphism.h>
#include <openbabel/query.h>
#include <openbabel/canon.h>


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "zend_exceptions.h"
#define SWIG_exception(code, msg) zend_throw_exception(NULL, (char*)msg, code TSRMLS_CC)


#include <stdexcept>


#include <string>


#include <utility>

SWIGINTERN bool std_vector_Sl_int_Sg__is_empty(std::vector< int > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg__is_empty(std::vector< unsigned int > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg__is_empty(std::vector< std::vector< int > > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< std::vector< int > >::const_reference std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(std::vector< std::vector< int > > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(std::vector< std::vector< int > > *self,int i,std::vector< std::vector< int > >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_double_Sg__is_empty(std::vector< double > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__is_empty(std::vector< std::string > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_OpenBabel_vector3_Sg__is_empty(std::vector< OpenBabel::vector3 > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< OpenBabel::vector3 >::const_reference std_vector_Sl_OpenBabel_vector3_Sg__get(std::vector< OpenBabel::vector3 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_OpenBabel_vector3_Sg__set(std::vector< OpenBabel::vector3 > *self,int i,std::vector< OpenBabel::vector3 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__is_empty(std::vector< std::vector< OpenBabel::vector3 > > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< std::vector< OpenBabel::vector3 > >::const_reference std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__get(std::vector< std::vector< OpenBabel::vector3 > > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__set(std::vector< std::vector< OpenBabel::vector3 > > *self,int i,std::vector< std::vector< OpenBabel::vector3 > >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_OpenBabel_OBMol_Sg__is_empty(std::vector< OpenBabel::OBMol > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< OpenBabel::OBMol >::const_reference std_vector_Sl_OpenBabel_OBMol_Sg__get(std::vector< OpenBabel::OBMol > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_OpenBabel_OBMol_Sg__set(std::vector< OpenBabel::OBMol > *self,int i,std::vector< OpenBabel::OBMol >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_OpenBabel_OBBond_Sg__is_empty(std::vector< OpenBabel::OBBond > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< OpenBabel::OBBond >::const_reference std_vector_Sl_OpenBabel_OBBond_Sg__get(std::vector< OpenBabel::OBBond > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_OpenBabel_OBBond_Sg__set(std::vector< OpenBabel::OBBond > *self,int i,std::vector< OpenBabel::OBBond >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_OpenBabel_OBResidue_Sg__is_empty(std::vector< OpenBabel::OBResidue > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< OpenBabel::OBResidue >::const_reference std_vector_Sl_OpenBabel_OBResidue_Sg__get(std::vector< OpenBabel::OBResidue > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_OpenBabel_OBResidue_Sg__set(std::vector< OpenBabel::OBResidue > *self,int i,std::vector< OpenBabel::OBResidue >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_OpenBabel_OBRing_Sg__is_empty(std::vector< OpenBabel::OBRing > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< OpenBabel::OBRing >::const_reference std_vector_Sl_OpenBabel_OBRing_Sg__get(std::vector< OpenBabel::OBRing > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_OpenBabel_OBRing_Sg__set(std::vector< OpenBabel::OBRing > *self,int i,std::vector< OpenBabel::OBRing >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_OpenBabel_OBRing_Sm__Sg__is_empty(std::vector< OpenBabel::OBRing * > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< OpenBabel::OBRing * >::const_reference std_vector_Sl_OpenBabel_OBRing_Sm__Sg__get(std::vector< OpenBabel::OBRing * > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_OpenBabel_OBRing_Sm__Sg__set(std::vector< OpenBabel::OBRing * > *self,int i,std::vector< OpenBabel::OBRing * >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__is_empty(std::vector< OpenBabel::OBGenericData * > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< OpenBabel::OBGenericData * >::const_reference std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__get(std::vector< OpenBabel::OBGenericData * > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__set(std::vector< OpenBabel::OBGenericData * > *self,int i,std::vector< OpenBabel::OBGenericData * >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__is_empty(std::vector< OpenBabel::OBInternalCoord * > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< OpenBabel::OBInternalCoord * >::const_reference std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__get(std::vector< OpenBabel::OBInternalCoord * > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__set(std::vector< OpenBabel::OBInternalCoord * > *self,int i,std::vector< OpenBabel::OBInternalCoord * >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__is_empty(std::vector< std::pair< unsigned int,unsigned int > > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< std::pair< unsigned int,unsigned int > >::const_reference std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__get(std::vector< std::pair< unsigned int,unsigned int > > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__set(std::vector< std::pair< unsigned int,unsigned int > > *self,int i,std::vector< std::pair< unsigned int,unsigned int > >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__is_empty(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const *self){
        return self->empty();
      }
SWIGINTERN std::vector< std::pair< unsigned int,unsigned int > > std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__pop(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        std::vector< std::pair< unsigned int,unsigned int > > x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::const_reference std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__get(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__set(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *self,int i,std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
 // can't use macro -- AliasData not OBAliasData
OpenBabel::AliasData *toAliasData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::AliasData*) data;
}


OpenBabel::OBAngleData *toAngleData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBAngleData *) data;
}


OpenBabel::OBAtomClassData *toAtomClassData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBAtomClassData *) data;
}


OpenBabel::OBChiralData *toChiralData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBChiralData *) data;
}


OpenBabel::OBCommentData *toCommentData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBCommentData *) data;
}


OpenBabel::OBConformerData *toConformerData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBConformerData *) data;
}


OpenBabel::OBExternalBondData *toExternalBondData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBExternalBondData *) data;
}


OpenBabel::OBGridData *toGridData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBGridData *) data;
}


OpenBabel::OBMatrixData *toMatrixData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBMatrixData *) data;
}


OpenBabel::OBNasaThermoData *toNasaThermoData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBNasaThermoData *) data;
}


OpenBabel::OBPairData *toPairData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBPairData *) data;
}


OpenBabel::OBRateData *toRateData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBRateData *) data;
}


OpenBabel::OBRotamerList *toRotamerList(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBRotamerList *) data;
}


OpenBabel::OBRotationData *toRotationData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBRotationData *) data;
}


OpenBabel::OBSerialNums *toSerialNums(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBSerialNums *) data;
}


OpenBabel::OBSetData *toSetData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBSetData *) data;
}


OpenBabel::OBSymmetryData *toSymmetryData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBSymmetryData *) data;
}


OpenBabel::OBTorsionData *toTorsionData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBTorsionData *) data;
}


OpenBabel::OBUnitCell *toUnitCell(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBUnitCell *) data;
}


OpenBabel::OBVectorData *toVectorData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBVectorData *) data;
}


OpenBabel::OBVibrationData *toVibrationData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBVibrationData *) data;
}


OpenBabel::OBVirtualBond *toVirtualBond(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBVirtualBond *) data;
}

SWIGINTERN void OpenBabel_OBMol_SetTorsion__SWIG_1(OpenBabel::OBMol *self,int i,int j,int k,int l,double ang){
    self->SetTorsion(self->GetAtom(i), self->GetAtom(j),
                     self->GetAtom(k), self->GetAtom(l), ang);
  }
SWIGINTERN void OpenBabel_OBForceField_SetLogToStdOut(OpenBabel::OBForceField *self){
    self->SetLogFile(&std::cout);
  }
SWIGINTERN void OpenBabel_OBForceField_SetLogToStdErr(OpenBabel::OBForceField *self){
    self->SetLogFile(&std::cerr);
  }

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OpenBabel__obLogBufTo_p_std__stringbuf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::stringbuf *)  ((OpenBabel::obLogBuf *) x));
}
static void *_p_OpenBabel__OBAtomicHeatOfFormationTableTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBAtomicHeatOfFormationTable *) x));
}
static void *_p_OpenBabel__OBAtomTyperTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBAtomTyper *) x));
}
static void *_p_OpenBabel__OBAromaticTyperTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBAromaticTyper *) x));
}
static void *_p_OpenBabel__OBResidueDataTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBResidueData *) x));
}
static void *_p_OpenBabel__OBRingTyperTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBRingTyper *) x));
}
static void *_p_OpenBabel__OBIsotopeTableTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBIsotopeTable *) x));
}
static void *_p_OpenBabel__OBTypeTableTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBTypeTable *) x));
}
static void *_p_OpenBabel__OBRotorRulesTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBRotorRules *) x));
}
static void *_p_OpenBabel__OBElementTableTo_p_OpenBabel__OBGlobalDataBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBElementTable *) x));
}
static void *_p_OpenBabel__transform3dTo_p_OpenBabel__vector3(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::vector3 *)  ((OpenBabel::transform3d *) x));
}
static void *_p_OpenBabel__transform3dTo_p_OpenBabel__matrix3x3(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::matrix3x3 *)  ((OpenBabel::transform3d *) x));
}
static void *_p_OpenBabel__OBMolTo_p_OpenBabel__OBBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBBase *)  ((OpenBabel::OBMol *) x));
}
static void *_p_OpenBabel__OBResidueTo_p_OpenBabel__OBBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBBase *)  ((OpenBabel::OBResidue *) x));
}
static void *_p_OpenBabel__OBBondTo_p_OpenBabel__OBBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBBase *)  ((OpenBabel::OBBond *) x));
}
static void *_p_OpenBabel__OBAtomTo_p_OpenBabel__OBBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBBase *)  ((OpenBabel::OBAtom *) x));
}
static void *_p_OpenBabel__OBReactionTo_p_OpenBabel__OBBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBBase *)  ((OpenBabel::OBReaction *) x));
}
static void *_p_OpenBabel__OBFFCalculation3To_p_OpenBabel__OBFFCalculation2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBFFCalculation2 *)  ((OpenBabel::OBFFCalculation3 *) x));
}
static void *_p_OpenBabel__OBFFCalculation4To_p_OpenBabel__OBFFCalculation2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBFFCalculation2 *) (OpenBabel::OBFFCalculation3 *) ((OpenBabel::OBFFCalculation4 *) x));
}
static void *_p_OpenBabel__OBFFCalculation4To_p_OpenBabel__OBFFCalculation3(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBFFCalculation3 *)  ((OpenBabel::OBFFCalculation4 *) x));
}
static void *_p_OpenBabel__CharPtrLessTo_p_std__binary_functionT_char_const_p_char_const_p_bool_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::binary_function< char const *,char const *,bool > *)  ((OpenBabel::CharPtrLess *) x));
}
static void *_p_OpenBabel__OBDescriptorTo_p_OpenBabel__OBPlugin(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBPlugin *)  ((OpenBabel::OBDescriptor *) x));
}
static void *_p_OpenBabel__OBOpTo_p_OpenBabel__OBPlugin(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBPlugin *)  ((OpenBabel::OBOp *) x));
}
static void *_p_OpenBabel__OBChargeModelTo_p_OpenBabel__OBPlugin(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBPlugin *)  ((OpenBabel::OBChargeModel *) x));
}
static void *_p_OpenBabel__OBForceFieldTo_p_OpenBabel__OBPlugin(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBPlugin *)  ((OpenBabel::OBForceField *) x));
}
static void *_p_OpenBabel__OBFormatTo_p_OpenBabel__OBPlugin(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBPlugin *)  ((OpenBabel::OBFormat *) x));
}
static void *_p_OpenBabel__OBFingerprintTo_p_OpenBabel__OBPlugin(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBPlugin *)  ((OpenBabel::OBFingerprint *) x));
}
static void *_p_OpenBabel__OBStereoBaseTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBStereoBase *) x));
}
static void *_p_OpenBabel__OBRotamerListTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBRotamerList *) x));
}
static void *_p_OpenBabel__OBVibrationDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBVibrationData *) x));
}
static void *_p_OpenBabel__OBTorsionDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBTorsionData *) x));
}
static void *_p_OpenBabel__OBElectronicTransitionDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBElectronicTransitionData *) x));
}
static void *_p_OpenBabel__OBRotationDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBRotationData *) x));
}
static void *_p_OpenBabel__OBPairDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBPairData *) x));
}
static void *_p_OpenBabel__AliasDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::AliasData *) x));
}
static void *_p_OpenBabel__OBAngleDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBAngleData *) x));
}
static void *_p_OpenBabel__OBFreeGridTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBFreeGrid *) x));
}
static void *_p_OpenBabel__OBAtomClassDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBAtomClassData *) x));
}
static void *_p_OpenBabel__OBChiralDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBChiralData *) x));
}
static void *_p_OpenBabel__OBOrbitalDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBOrbitalData *) x));
}
static void *_p_OpenBabel__OBRingDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBRingData *) x));
}
static void *_p_OpenBabel__OBSerialNumsTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBSerialNums *) x));
}
static void *_p_OpenBabel__OBExternalBondDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBExternalBondData *) x));
}
static void *_p_OpenBabel__OBSetDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBSetData *) x));
}
static void *_p_OpenBabel__OBSymmetryDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBSymmetryData *) x));
}
static void *_p_OpenBabel__OBMatrixDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBMatrixData *) x));
}
static void *_p_OpenBabel__OBCommentDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBCommentData *) x));
}
static void *_p_OpenBabel__OBVectorDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBVectorData *) x));
}
static void *_p_OpenBabel__OBVirtualBondTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBVirtualBond *) x));
}
static void *_p_OpenBabel__OBConformerDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBConformerData *) x));
}
static void *_p_OpenBabel__OBDOSDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBDOSData *) x));
}
static void *_p_OpenBabel__OBGridDataTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBGridData *) x));
}
static void *_p_OpenBabel__OBUnitCellTo_p_OpenBabel__OBGenericData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBUnitCell *) x));
}
static swig_type_info _swigt__double = {"_double", "double", 0, 0, (void*)0, 0};
static swig_type_info _swigt__int = {"_int", "int", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstRefIter = {"_p_ConstRefIter", "ConstRefIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mapping = {"_p_Mapping", "Mapping *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mappings = {"_p_Mappings", "Mappings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpMap = {"_p_OpMap", "OpMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__AliasData = {"_p_OpenBabel__AliasData", "OpenBabel::AliasData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__CharPtrLess = {"_p_OpenBabel__CharPtrLess", "OpenBabel::CharPtrLess *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__DoubleType = {"_p_OpenBabel__DoubleType", "OpenBabel::DoubleType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__FastSearch = {"_p_OpenBabel__FastSearch", "OpenBabel::FastSearch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__FastSearchIndexer = {"_p_OpenBabel__FastSearchIndexer", "OpenBabel::FastSearchIndexer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__FptIndex = {"_p_OpenBabel__FptIndex", "OpenBabel::FptIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__FptIndexHeader = {"_p_OpenBabel__FptIndexHeader", "OpenBabel::FptIndexHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__LineSearchType = {"_p_OpenBabel__LineSearchType", "OpenBabel::LineSearchType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAngle = {"_p_OpenBabel__OBAngle", "OpenBabel::OBAngle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAngleData = {"_p_OpenBabel__OBAngleData", "OpenBabel::OBAngleData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAromaticTyper = {"_p_OpenBabel__OBAromaticTyper", "OpenBabel::OBAromaticTyper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtom = {"_p_OpenBabel__OBAtom", "OpenBabel::OBNodeBase *|OpenBabel::OBAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtomAtomIter = {"_p_OpenBabel__OBAtomAtomIter", "OpenBabel::OBAtomAtomIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtomBondIter = {"_p_OpenBabel__OBAtomBondIter", "OpenBabel::OBAtomBondIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtomClassData = {"_p_OpenBabel__OBAtomClassData", "OpenBabel::OBAtomClassData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtomHOF = {"_p_OpenBabel__OBAtomHOF", "OpenBabel::OBAtomHOF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtomTyper = {"_p_OpenBabel__OBAtomTyper", "OpenBabel::OBAtomTyper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtomicHeatOfFormationTable = {"_p_OpenBabel__OBAtomicHeatOfFormationTable", "OpenBabel::OBAtomicHeatOfFormationTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBBase = {"_p_OpenBabel__OBBase", "OpenBabel::OBBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBBitVec = {"_p_OpenBabel__OBBitVec", "OpenBabel::OBBitVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBBond = {"_p_OpenBabel__OBBond", "std::vector< OpenBabel::OBBond >::value_type *|OpenBabel::OBBond *|OpenBabel::OBEdgeBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBBuilder = {"_p_OpenBabel__OBBuilder", "OpenBabel::OBBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBChainsParser = {"_p_OpenBabel__OBChainsParser", "OpenBabel::OBChainsParser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBChargeModel = {"_p_OpenBabel__OBChargeModel", "OpenBabel::OBChargeModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBChiralData = {"_p_OpenBabel__OBChiralData", "OpenBabel::OBChiralData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBCisTransStereo = {"_p_OpenBabel__OBCisTransStereo", "OpenBabel::OBCisTransStereo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBCommentData = {"_p_OpenBabel__OBCommentData", "OpenBabel::OBCommentData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBConformerData = {"_p_OpenBabel__OBConformerData", "OpenBabel::OBConformerData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBConversion = {"_p_OpenBabel__OBConversion", "OpenBabel::OBConversion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBDOSData = {"_p_OpenBabel__OBDOSData", "OpenBabel::OBDOSData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBDescriptor = {"_p_OpenBabel__OBDescriptor", "OpenBabel::OBDescriptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBElectronicTransitionData = {"_p_OpenBabel__OBElectronicTransitionData", "OpenBabel::OBElectronicTransitionData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBElement = {"_p_OpenBabel__OBElement", "OpenBabel::OBElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBElementTable = {"_p_OpenBabel__OBElementTable", "OpenBabel::OBElementTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBError = {"_p_OpenBabel__OBError", "OpenBabel::OBError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBExternalBond = {"_p_OpenBabel__OBExternalBond", "OpenBabel::OBExternalBond *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBExternalBondData = {"_p_OpenBabel__OBExternalBondData", "OpenBabel::OBExternalBondData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFFCalculation2 = {"_p_OpenBabel__OBFFCalculation2", "OpenBabel::OBFFCalculation2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFFCalculation3 = {"_p_OpenBabel__OBFFCalculation3", "OpenBabel::OBFFCalculation3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFFCalculation4 = {"_p_OpenBabel__OBFFCalculation4", "OpenBabel::OBFFCalculation4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFFConstraint = {"_p_OpenBabel__OBFFConstraint", "OpenBabel::OBFFConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFFConstraints = {"_p_OpenBabel__OBFFConstraints", "OpenBabel::OBFFConstraints *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFFParameter = {"_p_OpenBabel__OBFFParameter", "OpenBabel::OBFFParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFingerprint = {"_p_OpenBabel__OBFingerprint", "OpenBabel::OBFingerprint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBForceField = {"_p_OpenBabel__OBForceField", "OpenBabel::OBForceField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFormat = {"_p_OpenBabel__OBFormat", "OpenBabel::OBFormat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFreeGrid = {"_p_OpenBabel__OBFreeGrid", "OpenBabel::OBFreeGrid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFreeGridPoint = {"_p_OpenBabel__OBFreeGridPoint", "OpenBabel::OBFreeGridPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBGenericData = {"_p_OpenBabel__OBGenericData", "OpenBabel::OBGenericData *|std::vector< OpenBabel::OBGenericData * >::value_type", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBGlobalDataBase = {"_p_OpenBabel__OBGlobalDataBase", "OpenBabel::OBGlobalDataBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBGraphSym = {"_p_OpenBabel__OBGraphSym", "OpenBabel::OBGraphSym *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBGridData = {"_p_OpenBabel__OBGridData", "OpenBabel::OBGridData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBInternalCoord = {"_p_OpenBabel__OBInternalCoord", "std::vector< OpenBabel::OBInternalCoord * >::value_type|OpenBabel::OBInternalCoord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBIsomorphismMapper = {"_p_OpenBabel__OBIsomorphismMapper", "OpenBabel::OBIsomorphismMapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBIsomorphismMapper__Functor = {"_p_OpenBabel__OBIsomorphismMapper__Functor", "OpenBabel::OBIsomorphismMapper::Functor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBIsotopeTable = {"_p_OpenBabel__OBIsotopeTable", "OpenBabel::OBIsotopeTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMatrixData = {"_p_OpenBabel__OBMatrixData", "OpenBabel::OBMatrixData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMessageHandler = {"_p_OpenBabel__OBMessageHandler", "OpenBabel::OBMessageHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMol = {"_p_OpenBabel__OBMol", "std::vector< OpenBabel::OBMol >::value_type *|OpenBabel::OBMol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolAngleIter = {"_p_OpenBabel__OBMolAngleIter", "OpenBabel::OBMolAngleIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolAtomBFSIter = {"_p_OpenBabel__OBMolAtomBFSIter", "OpenBabel::OBMolAtomBFSIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolAtomDFSIter = {"_p_OpenBabel__OBMolAtomDFSIter", "OpenBabel::OBMolAtomDFSIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolAtomIter = {"_p_OpenBabel__OBMolAtomIter", "OpenBabel::OBMolAtomIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolBondBFSIter = {"_p_OpenBabel__OBMolBondBFSIter", "OpenBabel::OBMolBondBFSIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolBondIter = {"_p_OpenBabel__OBMolBondIter", "OpenBabel::OBMolBondIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolPairIter = {"_p_OpenBabel__OBMolPairIter", "OpenBabel::OBMolPairIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolRingIter = {"_p_OpenBabel__OBMolRingIter", "OpenBabel::OBMolRingIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMolTorsionIter = {"_p_OpenBabel__OBMolTorsionIter", "OpenBabel::OBMolTorsionIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBNasaThermoData = {"_p_OpenBabel__OBNasaThermoData", "OpenBabel::OBNasaThermoData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBOp = {"_p_OpenBabel__OBOp", "OpenBabel::OBOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBOrbital = {"_p_OpenBabel__OBOrbital", "OpenBabel::OBOrbital *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBOrbitalData = {"_p_OpenBabel__OBOrbitalData", "OpenBabel::OBOrbitalData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBPairData = {"_p_OpenBabel__OBPairData", "OpenBabel::OBPairData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBPairTemplateT_bool_t = {"_p_OpenBabel__OBPairTemplateT_bool_t", "OpenBabel::OBPairBool *|OpenBabel::OBPairTemplate< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBPairTemplateT_double_t = {"_p_OpenBabel__OBPairTemplateT_double_t", "OpenBabel::OBPairFloatingPoint *|OpenBabel::OBPairTemplate< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBPairTemplateT_int_t = {"_p_OpenBabel__OBPairTemplateT_int_t", "OpenBabel::OBPairInteger *|OpenBabel::OBPairTemplate< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBPlugin = {"_p_OpenBabel__OBPlugin", "OpenBabel::OBPlugin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBQuery = {"_p_OpenBabel__OBQuery", "OpenBabel::OBQuery *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBQueryAtom = {"_p_OpenBabel__OBQueryAtom", "OpenBabel::OBQueryAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBQueryBond = {"_p_OpenBabel__OBQueryBond", "OpenBabel::OBQueryBond *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRTree = {"_p_OpenBabel__OBRTree", "OpenBabel::OBRTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRandom = {"_p_OpenBabel__OBRandom", "OpenBabel::OBRandom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRateData = {"_p_OpenBabel__OBRateData", "OpenBabel::OBRateData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBReaction = {"_p_OpenBabel__OBReaction", "OpenBabel::OBReaction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBResidue = {"_p_OpenBabel__OBResidue", "std::vector< OpenBabel::OBResidue >::value_type *|OpenBabel::OBResidue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBResidueAtomIter = {"_p_OpenBabel__OBResidueAtomIter", "OpenBabel::OBResidueAtomIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBResidueData = {"_p_OpenBabel__OBResidueData", "OpenBabel::OBResidueData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBResidueIter = {"_p_OpenBabel__OBResidueIter", "OpenBabel::OBResidueIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRing = {"_p_OpenBabel__OBRing", "std::vector< OpenBabel::OBRing >::value_type *|std::vector< OpenBabel::OBRing * >::value_type|OpenBabel::OBRing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRingData = {"_p_OpenBabel__OBRingData", "OpenBabel::OBRingData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRingSearch = {"_p_OpenBabel__OBRingSearch", "OpenBabel::OBRingSearch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRingTyper = {"_p_OpenBabel__OBRingTyper", "OpenBabel::OBRingTyper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRotamerList = {"_p_OpenBabel__OBRotamerList", "OpenBabel::OBRotamerList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRotationData = {"_p_OpenBabel__OBRotationData", "OpenBabel::OBRotationData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRotor = {"_p_OpenBabel__OBRotor", "OpenBabel::OBRotor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRotorKeys = {"_p_OpenBabel__OBRotorKeys", "OpenBabel::OBRotorKeys *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRotorList = {"_p_OpenBabel__OBRotorList", "OpenBabel::OBRotorList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRotorRule = {"_p_OpenBabel__OBRotorRule", "OpenBabel::OBRotorRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRotorRules = {"_p_OpenBabel__OBRotorRules", "OpenBabel::OBRotorRules *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSSMatch = {"_p_OpenBabel__OBSSMatch", "OpenBabel::OBSSMatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSerialNums = {"_p_OpenBabel__OBSerialNums", "OpenBabel::OBSerialNums *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSetData = {"_p_OpenBabel__OBSetData", "OpenBabel::OBSetData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSmartsMatcher = {"_p_OpenBabel__OBSmartsMatcher", "OpenBabel::OBSmartsMatcher *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSmartsPattern = {"_p_OpenBabel__OBSmartsPattern", "OpenBabel::OBSmartsPattern *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSpectrophore = {"_p_OpenBabel__OBSpectrophore", "OpenBabel::OBSpectrophore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSqrtTbl = {"_p_OpenBabel__OBSqrtTbl", "OpenBabel::OBSqrtTbl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSquarePlanarStereo = {"_p_OpenBabel__OBSquarePlanarStereo", "OpenBabel::OBSquarePlanarStereo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBStereo = {"_p_OpenBabel__OBStereo", "OpenBabel::OBStereo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBStereoBase = {"_p_OpenBabel__OBStereoBase", "OpenBabel::OBStereoBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBStereoFacade = {"_p_OpenBabel__OBStereoFacade", "OpenBabel::OBStereoFacade *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBStereoUnit = {"_p_OpenBabel__OBStereoUnit", "OpenBabel::OBStereoUnit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBStopwatch = {"_p_OpenBabel__OBStopwatch", "OpenBabel::OBStopwatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSymmetryData = {"_p_OpenBabel__OBSymmetryData", "OpenBabel::OBSymmetryData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBTetrahedralStereo = {"_p_OpenBabel__OBTetrahedralStereo", "OpenBabel::OBTetrahedralStereo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBTorsion = {"_p_OpenBabel__OBTorsion", "OpenBabel::OBTorsion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBTorsionData = {"_p_OpenBabel__OBTorsionData", "OpenBabel::OBTorsionData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBTypeTable = {"_p_OpenBabel__OBTypeTable", "OpenBabel::OBTypeTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBUnitCell = {"_p_OpenBabel__OBUnitCell", "OpenBabel::OBUnitCell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBVectorData = {"_p_OpenBabel__OBVectorData", "OpenBabel::OBVectorData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBVibrationData = {"_p_OpenBabel__OBVibrationData", "OpenBabel::OBVibrationData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__OBVirtualBond = {"_p_OpenBabel__OBVirtualBond", "OpenBabel::OBVirtualBond *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__Pattern = {"_p_OpenBabel__Pattern", "OpenBabel::Pattern *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__SpaceGroup = {"_p_OpenBabel__SpaceGroup", "OpenBabel::SpaceGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__Template = {"_p_OpenBabel__Template", "OpenBabel::Template *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__matrix3x3 = {"_p_OpenBabel__matrix3x3", "OpenBabel::matrix3x3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__obLogBuf = {"_p_OpenBabel__obLogBuf", "OpenBabel::obLogBuf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t = {"_p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t", "OpenBabel::quad< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__rotor_digit = {"_p_OpenBabel__rotor_digit", "OpenBabel::rotor_digit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__transform3d = {"_p_OpenBabel__transform3d", "OpenBabel::transform3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t = {"_p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t", "OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenBabel__vector3 = {"_p_OpenBabel__vector3", "std::vector< OpenBabel::vector3 >::value_type *|OpenBabel::vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PluginIterator = {"_p_PluginIterator", "PluginIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PluginMapType = {"_p_PluginMapType", "PluginMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ref = {"_p_Ref", "Ref *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefIter = {"_p_RefIter", "RefIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Refs = {"_p_Refs", "Refs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Unit = {"_p_Unit", "Unit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_3__double = {"_p_a_3__double", "double (*)[3]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_4__char = {"_p_a_4__char", "char (*)[4]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "OpenBabel::vector3::iterator|OpenBabel::vector3::const_iterator|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_obsharedptrT_OpenBabel__OBMol_t = {"_p_obsharedptrT_OpenBabel__OBMol_t", "obsharedptr< OpenBabel::OBMol > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_OpenBabel__OBChargeModel = {"_p_p_OpenBabel__OBChargeModel", "OpenBabel::OBChargeModel **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_OpenBabel__OBDescriptor = {"_p_p_OpenBabel__OBDescriptor", "OpenBabel::OBDescriptor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_OpenBabel__OBFingerprint = {"_p_p_OpenBabel__OBFingerprint", "OpenBabel::OBFingerprint **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_OpenBabel__OBForceField = {"_p_p_OpenBabel__OBForceField", "OpenBabel::OBForceField **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_OpenBabel__OBFormat = {"_p_p_OpenBabel__OBFormat", "OpenBabel::OBFormat **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_OpenBabel__OBOp = {"_p_p_OpenBabel__OBOp", "OpenBabel::OBOp **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__binary_functionT_char_const_p_char_const_p_bool_t = {"_p_std__binary_functionT_char_const_p_char_const_p_bool_t", "std::binary_function< char const *,char const *,bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_int_t = {"_p_std__dequeT_int_t", "std::deque< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_OpenBabel__transform3d_p_t__const_iterator = {"_p_std__listT_OpenBabel__transform3d_p_t__const_iterator", "std::list< OpenBabel::transform3d * >::const_iterator *|OpenBabel::transform3dIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_OpenBabel__vector3_t = {"_p_std__listT_OpenBabel__vector3_t", "std::list< OpenBabel::vector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t = {"_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t", "std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t = {"_p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t", "std::map< OpenBabel::OBBond *,OpenBabel::OBStereo::Ref > *|std::map< OpenBabel::OBBond *,unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t = {"_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t", "OpenBabel::OBPlugin::PluginMapType *|std::map< char const *,OpenBabel::OBPlugin *,OpenBabel::CharPtrLess > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator = {"_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator", "OpenBabel::OBPlugin::PluginIterator *|OpenBabel::Formatpos *|std::map< char const *,OpenBabel::OBPlugin *,OpenBabel::CharPtrLess >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_OpenBabel__OBAtom_p_t = {"_p_std__mapT_int_OpenBabel__OBAtom_p_t", "std::map< int,OpenBabel::OBAtom * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "std::map< std::string,std::string > *|OpenBabel::OBOp::OpMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__multimapT_double_unsigned_int_t = {"_p_std__multimapT_double_unsigned_int_t", "std::multimap< double,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t = {"_p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t", "std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int_int_t = {"_p_std__pairT_int_int_t", "std::pair< int,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_unsigned_int_unsigned_int_t = {"_p_std__pairT_unsigned_int_unsigned_int_t", "std::vector< std::pair< unsigned int,unsigned int > >::value_type *|std::pair< unsigned int,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_OpenBabel__OBBond_p_t = {"_p_std__setT_OpenBabel__OBBond_p_t", "std::set< OpenBabel::OBBond * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__streampos = {"_p_std__streampos", "std::streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stringbuf = {"_p_std__stringbuf", "std::stringbuf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__type_info = {"_p_std__type_info", "std::type_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBAtom_p_t = {"_p_std__vectorT_OpenBabel__OBAtom_p_t", "std::vector< OpenBabel::OBAtom * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBAtom_p_t__iterator = {"_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator", "std::vector< OpenBabel::OBAtom * >::iterator *|OpenBabel::OBAtomIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBBase_p_t = {"_p_std__vectorT_OpenBabel__OBBase_p_t", "std::vector< OpenBabel::OBBase * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBBond_p_t = {"_p_std__vectorT_OpenBabel__OBBond_p_t", "std::vector< OpenBabel::OBBond * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBBond_p_t__iterator = {"_p_std__vectorT_OpenBabel__OBBond_p_t__iterator", "std::vector< OpenBabel::OBBond * >::iterator *|OpenBabel::OBBondIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBBond_t = {"_p_std__vectorT_OpenBabel__OBBond_t", "std::vector< OpenBabel::OBBond > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBCisTransStereo_p_t = {"_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t", "std::vector< OpenBabel::OBCisTransStereo * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBExternalBond_t = {"_p_std__vectorT_OpenBabel__OBExternalBond_t", "std::vector< OpenBabel::OBExternalBond > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator = {"_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator", "std::vector< OpenBabel::OBFreeGridPoint * >::iterator *|OpenBabel::OBFreeGridPointIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBGenericData_p_t = {"_p_std__vectorT_OpenBabel__OBGenericData_p_t", "std::vector< OpenBabel::OBGenericData * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator = {"_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator", "OpenBabel::OBDataIterator *|std::vector< OpenBabel::OBGenericData * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBInternalCoord_p_t = {"_p_std__vectorT_OpenBabel__OBInternalCoord_p_t", "std::vector< OpenBabel::OBInternalCoord * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator = {"_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator", "std::vector< OpenBabel::OBInternalCoord * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBMol_t = {"_p_std__vectorT_OpenBabel__OBMol_t", "std::vector< OpenBabel::OBMol > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBOrbital_t = {"_p_std__vectorT_OpenBabel__OBOrbital_t", "std::vector< OpenBabel::OBOrbital > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBQueryAtom_p_t = {"_p_std__vectorT_OpenBabel__OBQueryAtom_p_t", "std::vector< OpenBabel::OBQueryAtom * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBQueryBond_p_t = {"_p_std__vectorT_OpenBabel__OBQueryBond_p_t", "std::vector< OpenBabel::OBQueryBond * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBResidue_p_t__iterator = {"_p_std__vectorT_OpenBabel__OBResidue_p_t__iterator", "std::vector< OpenBabel::OBResidue * >::iterator *|OpenBabel::OBResidueIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBResidue_t = {"_p_std__vectorT_OpenBabel__OBResidue_t", "std::vector< OpenBabel::OBResidue > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBRing_p_t = {"_p_std__vectorT_OpenBabel__OBRing_p_t", "std::vector< OpenBabel::OBRing * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBRing_p_t__iterator = {"_p_std__vectorT_OpenBabel__OBRing_p_t__iterator", "std::vector< OpenBabel::OBRing * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBRing_t = {"_p_std__vectorT_OpenBabel__OBRing_t", "std::vector< OpenBabel::OBRing > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBRotor_p_t__iterator = {"_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator", "std::vector< OpenBabel::OBRotor * >::iterator *|OpenBabel::OBRotorIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBStereoUnit_t = {"_p_std__vectorT_OpenBabel__OBStereoUnit_t", "OpenBabel::OBStereoUnitSet *|std::vector< OpenBabel::OBStereoUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t = {"_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t", "std::vector< OpenBabel::OBTetrahedralStereo * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__OBTorsion_t = {"_p_std__vectorT_OpenBabel__OBTorsion_t", "std::vector< OpenBabel::OBTorsion > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t = {"_p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t", "std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OpenBabel__vector3_t = {"_p_std__vectorT_OpenBabel__vector3_t", "std::vector< std::vector< OpenBabel::vector3 > >::value_type *|std::vector< OpenBabel::vector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_p_t = {"_p_std__vectorT_double_p_t", "std::vector< double * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_p_t__iterator = {"_p_std__vectorT_double_p_t__iterator", "std::vector< double * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t__iterator = {"_p_std__vectorT_double_t__iterator", "std::vector< double >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< std::vector< int > >::value_type *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_int_int_t_t = {"_p_std__vectorT_std__pairT_int_int_t_t", "std::vector< std::pair< int,int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_std__string_std__string_t_t = {"_p_std__vectorT_std__pairT_std__string_std__string_t_t", "std::vector< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t = {"_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t", "OpenBabel::OBIsomorphismMapper::Mapping *|OpenBabel::Automorphism *|std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *|std::vector< std::pair< unsigned int,unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t = {"_p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t", "std::vector< std::vector< OpenBabel::OBStereoUnit > > *|OpenBabel::OBStereoUnitSetOfSets *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t = {"_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t", "std::vector< std::vector< OpenBabel::vector3 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_t_t = {"_p_std__vectorT_std__vectorT_int_t_t", "std::vector< std::vector< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_t_t__iterator = {"_p_std__vectorT_std__vectorT_int_t_t__iterator", "std::vector< std::vector< int > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t = {"_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t", "OpenBabel::Automorphisms *|std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *|std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *|OpenBabel::OBIsomorphismMapper::Mappings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t = {"_p_std__vectorT_std__vectorT_unsigned_int_t_t", "std::vector< std::vector< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_uint32_t_t = {"_p_std__vectorT_uint32_t_t", "std::vector< uint32_t > *|OpenBabel::OBBitVec::word_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_p_t__iterator = {"_p_std__vectorT_unsigned_char_p_t__iterator", "std::vector< unsigned char * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_t = {"_p_std__vectorT_unsigned_long_t", "std::vector< unsigned long > *|OpenBabel::OBStereo::Refs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_word_vector = {"_p_word_vector", "word_vector *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__double,
  &_swigt__int,
  &_swigt__p_ConstRefIter,
  &_swigt__p_Mapping,
  &_swigt__p_Mappings,
  &_swigt__p_OpMap,
  &_swigt__p_OpenBabel__AliasData,
  &_swigt__p_OpenBabel__CharPtrLess,
  &_swigt__p_OpenBabel__DoubleType,
  &_swigt__p_OpenBabel__FastSearch,
  &_swigt__p_OpenBabel__FastSearchIndexer,
  &_swigt__p_OpenBabel__FptIndex,
  &_swigt__p_OpenBabel__FptIndexHeader,
  &_swigt__p_OpenBabel__LineSearchType,
  &_swigt__p_OpenBabel__OBAngle,
  &_swigt__p_OpenBabel__OBAngleData,
  &_swigt__p_OpenBabel__OBAromaticTyper,
  &_swigt__p_OpenBabel__OBAtom,
  &_swigt__p_OpenBabel__OBAtomAtomIter,
  &_swigt__p_OpenBabel__OBAtomBondIter,
  &_swigt__p_OpenBabel__OBAtomClassData,
  &_swigt__p_OpenBabel__OBAtomHOF,
  &_swigt__p_OpenBabel__OBAtomTyper,
  &_swigt__p_OpenBabel__OBAtomicHeatOfFormationTable,
  &_swigt__p_OpenBabel__OBBase,
  &_swigt__p_OpenBabel__OBBitVec,
  &_swigt__p_OpenBabel__OBBond,
  &_swigt__p_OpenBabel__OBBuilder,
  &_swigt__p_OpenBabel__OBChainsParser,
  &_swigt__p_OpenBabel__OBChargeModel,
  &_swigt__p_OpenBabel__OBChiralData,
  &_swigt__p_OpenBabel__OBCisTransStereo,
  &_swigt__p_OpenBabel__OBCommentData,
  &_swigt__p_OpenBabel__OBConformerData,
  &_swigt__p_OpenBabel__OBConversion,
  &_swigt__p_OpenBabel__OBDOSData,
  &_swigt__p_OpenBabel__OBDescriptor,
  &_swigt__p_OpenBabel__OBElectronicTransitionData,
  &_swigt__p_OpenBabel__OBElement,
  &_swigt__p_OpenBabel__OBElementTable,
  &_swigt__p_OpenBabel__OBError,
  &_swigt__p_OpenBabel__OBExternalBond,
  &_swigt__p_OpenBabel__OBExternalBondData,
  &_swigt__p_OpenBabel__OBFFCalculation2,
  &_swigt__p_OpenBabel__OBFFCalculation3,
  &_swigt__p_OpenBabel__OBFFCalculation4,
  &_swigt__p_OpenBabel__OBFFConstraint,
  &_swigt__p_OpenBabel__OBFFConstraints,
  &_swigt__p_OpenBabel__OBFFParameter,
  &_swigt__p_OpenBabel__OBFingerprint,
  &_swigt__p_OpenBabel__OBForceField,
  &_swigt__p_OpenBabel__OBFormat,
  &_swigt__p_OpenBabel__OBFreeGrid,
  &_swigt__p_OpenBabel__OBFreeGridPoint,
  &_swigt__p_OpenBabel__OBGenericData,
  &_swigt__p_OpenBabel__OBGlobalDataBase,
  &_swigt__p_OpenBabel__OBGraphSym,
  &_swigt__p_OpenBabel__OBGridData,
  &_swigt__p_OpenBabel__OBInternalCoord,
  &_swigt__p_OpenBabel__OBIsomorphismMapper,
  &_swigt__p_OpenBabel__OBIsomorphismMapper__Functor,
  &_swigt__p_OpenBabel__OBIsotopeTable,
  &_swigt__p_OpenBabel__OBMatrixData,
  &_swigt__p_OpenBabel__OBMessageHandler,
  &_swigt__p_OpenBabel__OBMol,
  &_swigt__p_OpenBabel__OBMolAngleIter,
  &_swigt__p_OpenBabel__OBMolAtomBFSIter,
  &_swigt__p_OpenBabel__OBMolAtomDFSIter,
  &_swigt__p_OpenBabel__OBMolAtomIter,
  &_swigt__p_OpenBabel__OBMolBondBFSIter,
  &_swigt__p_OpenBabel__OBMolBondIter,
  &_swigt__p_OpenBabel__OBMolPairIter,
  &_swigt__p_OpenBabel__OBMolRingIter,
  &_swigt__p_OpenBabel__OBMolTorsionIter,
  &_swigt__p_OpenBabel__OBNasaThermoData,
  &_swigt__p_OpenBabel__OBOp,
  &_swigt__p_OpenBabel__OBOrbital,
  &_swigt__p_OpenBabel__OBOrbitalData,
  &_swigt__p_OpenBabel__OBPairData,
  &_swigt__p_OpenBabel__OBPairTemplateT_bool_t,
  &_swigt__p_OpenBabel__OBPairTemplateT_double_t,
  &_swigt__p_OpenBabel__OBPairTemplateT_int_t,
  &_swigt__p_OpenBabel__OBPlugin,
  &_swigt__p_OpenBabel__OBQuery,
  &_swigt__p_OpenBabel__OBQueryAtom,
  &_swigt__p_OpenBabel__OBQueryBond,
  &_swigt__p_OpenBabel__OBRTree,
  &_swigt__p_OpenBabel__OBRandom,
  &_swigt__p_OpenBabel__OBRateData,
  &_swigt__p_OpenBabel__OBReaction,
  &_swigt__p_OpenBabel__OBResidue,
  &_swigt__p_OpenBabel__OBResidueAtomIter,
  &_swigt__p_OpenBabel__OBResidueData,
  &_swigt__p_OpenBabel__OBResidueIter,
  &_swigt__p_OpenBabel__OBRing,
  &_swigt__p_OpenBabel__OBRingData,
  &_swigt__p_OpenBabel__OBRingSearch,
  &_swigt__p_OpenBabel__OBRingTyper,
  &_swigt__p_OpenBabel__OBRotamerList,
  &_swigt__p_OpenBabel__OBRotationData,
  &_swigt__p_OpenBabel__OBRotor,
  &_swigt__p_OpenBabel__OBRotorKeys,
  &_swigt__p_OpenBabel__OBRotorList,
  &_swigt__p_OpenBabel__OBRotorRule,
  &_swigt__p_OpenBabel__OBRotorRules,
  &_swigt__p_OpenBabel__OBSSMatch,
  &_swigt__p_OpenBabel__OBSerialNums,
  &_swigt__p_OpenBabel__OBSetData,
  &_swigt__p_OpenBabel__OBSmartsMatcher,
  &_swigt__p_OpenBabel__OBSmartsPattern,
  &_swigt__p_OpenBabel__OBSpectrophore,
  &_swigt__p_OpenBabel__OBSqrtTbl,
  &_swigt__p_OpenBabel__OBSquarePlanarStereo,
  &_swigt__p_OpenBabel__OBStereo,
  &_swigt__p_OpenBabel__OBStereoBase,
  &_swigt__p_OpenBabel__OBStereoFacade,
  &_swigt__p_OpenBabel__OBStereoUnit,
  &_swigt__p_OpenBabel__OBStopwatch,
  &_swigt__p_OpenBabel__OBSymmetryData,
  &_swigt__p_OpenBabel__OBTetrahedralStereo,
  &_swigt__p_OpenBabel__OBTorsion,
  &_swigt__p_OpenBabel__OBTorsionData,
  &_swigt__p_OpenBabel__OBTypeTable,
  &_swigt__p_OpenBabel__OBUnitCell,
  &_swigt__p_OpenBabel__OBVectorData,
  &_swigt__p_OpenBabel__OBVibrationData,
  &_swigt__p_OpenBabel__OBVirtualBond,
  &_swigt__p_OpenBabel__Pattern,
  &_swigt__p_OpenBabel__SpaceGroup,
  &_swigt__p_OpenBabel__Template,
  &_swigt__p_OpenBabel__matrix3x3,
  &_swigt__p_OpenBabel__obLogBuf,
  &_swigt__p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,
  &_swigt__p_OpenBabel__rotor_digit,
  &_swigt__p_OpenBabel__transform3d,
  &_swigt__p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,
  &_swigt__p_OpenBabel__vector3,
  &_swigt__p_PluginIterator,
  &_swigt__p_PluginMapType,
  &_swigt__p_Ref,
  &_swigt__p_RefIter,
  &_swigt__p_Refs,
  &_swigt__p_Unit,
  &_swigt__p_a_3__double,
  &_swigt__p_a_4__char,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_obsharedptrT_OpenBabel__OBMol_t,
  &_swigt__p_p_OpenBabel__OBChargeModel,
  &_swigt__p_p_OpenBabel__OBDescriptor,
  &_swigt__p_p_OpenBabel__OBFingerprint,
  &_swigt__p_p_OpenBabel__OBForceField,
  &_swigt__p_p_OpenBabel__OBFormat,
  &_swigt__p_p_OpenBabel__OBOp,
  &_swigt__p_p_double,
  &_swigt__p_p_int,
  &_swigt__p_size_type,
  &_swigt__p_std__binary_functionT_char_const_p_char_const_p_bool_t,
  &_swigt__p_std__dequeT_int_t,
  &_swigt__p_std__istream,
  &_swigt__p_std__listT_OpenBabel__transform3d_p_t__const_iterator,
  &_swigt__p_std__listT_OpenBabel__vector3_t,
  &_swigt__p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t,
  &_swigt__p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t,
  &_swigt__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t,
  &_swigt__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator,
  &_swigt__p_std__mapT_int_OpenBabel__OBAtom_p_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__multimapT_double_unsigned_int_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,
  &_swigt__p_std__pairT_int_int_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__pairT_unsigned_int_unsigned_int_t,
  &_swigt__p_std__setT_OpenBabel__OBBond_p_t,
  &_swigt__p_std__streampos,
  &_swigt__p_std__string,
  &_swigt__p_std__stringbuf,
  &_swigt__p_std__type_info,
  &_swigt__p_std__vectorT_OpenBabel__OBAtom_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBAtom_p_t__iterator,
  &_swigt__p_std__vectorT_OpenBabel__OBBase_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBBond_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBBond_p_t__iterator,
  &_swigt__p_std__vectorT_OpenBabel__OBBond_t,
  &_swigt__p_std__vectorT_OpenBabel__OBCisTransStereo_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBExternalBond_t,
  &_swigt__p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator,
  &_swigt__p_std__vectorT_OpenBabel__OBGenericData_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator,
  &_swigt__p_std__vectorT_OpenBabel__OBInternalCoord_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator,
  &_swigt__p_std__vectorT_OpenBabel__OBMol_t,
  &_swigt__p_std__vectorT_OpenBabel__OBOrbital_t,
  &_swigt__p_std__vectorT_OpenBabel__OBQueryAtom_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBQueryBond_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBResidue_p_t__iterator,
  &_swigt__p_std__vectorT_OpenBabel__OBResidue_t,
  &_swigt__p_std__vectorT_OpenBabel__OBRing_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBRing_p_t__iterator,
  &_swigt__p_std__vectorT_OpenBabel__OBRing_t,
  &_swigt__p_std__vectorT_OpenBabel__OBRotor_p_t__iterator,
  &_swigt__p_std__vectorT_OpenBabel__OBStereoUnit_t,
  &_swigt__p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t,
  &_swigt__p_std__vectorT_OpenBabel__OBTorsion_t,
  &_swigt__p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t,
  &_swigt__p_std__vectorT_OpenBabel__vector3_t,
  &_swigt__p_std__vectorT_double_p_t,
  &_swigt__p_std__vectorT_double_p_t__iterator,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_double_t__iterator,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__pairT_int_int_t_t,
  &_swigt__p_std__vectorT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t,
  &_swigt__p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_t_t__iterator,
  &_swigt__p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_uint32_t_t,
  &_swigt__p_std__vectorT_unsigned_char_p_t__iterator,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_value_type,
  &_swigt__p_void,
  &_swigt__p_word_vector,
};

static swig_cast_info _swigc__double[] = {  {&_swigt__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__int[] = {  {&_swigt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstRefIter[] = {  {&_swigt__p_ConstRefIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mapping[] = {  {&_swigt__p_Mapping, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mappings[] = {  {&_swigt__p_Mappings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpMap[] = {  {&_swigt__p_OpMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__AliasData[] = {  {&_swigt__p_OpenBabel__AliasData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__CharPtrLess[] = {  {&_swigt__p_OpenBabel__CharPtrLess, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__DoubleType[] = {  {&_swigt__p_OpenBabel__DoubleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__FastSearch[] = {  {&_swigt__p_OpenBabel__FastSearch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__FastSearchIndexer[] = {  {&_swigt__p_OpenBabel__FastSearchIndexer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__FptIndex[] = {  {&_swigt__p_OpenBabel__FptIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__FptIndexHeader[] = {  {&_swigt__p_OpenBabel__FptIndexHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__LineSearchType[] = {  {&_swigt__p_OpenBabel__LineSearchType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAngle[] = {  {&_swigt__p_OpenBabel__OBAngle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAngleData[] = {  {&_swigt__p_OpenBabel__OBAngleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAromaticTyper[] = {  {&_swigt__p_OpenBabel__OBAromaticTyper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtom[] = {  {&_swigt__p_OpenBabel__OBAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtomAtomIter[] = {  {&_swigt__p_OpenBabel__OBAtomAtomIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtomBondIter[] = {  {&_swigt__p_OpenBabel__OBAtomBondIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtomClassData[] = {  {&_swigt__p_OpenBabel__OBAtomClassData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtomHOF[] = {  {&_swigt__p_OpenBabel__OBAtomHOF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtomTyper[] = {  {&_swigt__p_OpenBabel__OBAtomTyper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtomicHeatOfFormationTable[] = {  {&_swigt__p_OpenBabel__OBAtomicHeatOfFormationTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBBase[] = {  {&_swigt__p_OpenBabel__OBMol, _p_OpenBabel__OBMolTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBResidue, _p_OpenBabel__OBResidueTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBBase, 0, 0, 0},  {&_swigt__p_OpenBabel__OBBond, _p_OpenBabel__OBBondTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBAtom, _p_OpenBabel__OBAtomTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBReaction, _p_OpenBabel__OBReactionTo_p_OpenBabel__OBBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBBitVec[] = {  {&_swigt__p_OpenBabel__OBBitVec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBBond[] = {  {&_swigt__p_OpenBabel__OBBond, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBBuilder[] = {  {&_swigt__p_OpenBabel__OBBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBChainsParser[] = {  {&_swigt__p_OpenBabel__OBChainsParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBChargeModel[] = {  {&_swigt__p_OpenBabel__OBChargeModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBChiralData[] = {  {&_swigt__p_OpenBabel__OBChiralData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBCisTransStereo[] = {  {&_swigt__p_OpenBabel__OBCisTransStereo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBCommentData[] = {  {&_swigt__p_OpenBabel__OBCommentData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBConformerData[] = {  {&_swigt__p_OpenBabel__OBConformerData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBConversion[] = {  {&_swigt__p_OpenBabel__OBConversion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBDOSData[] = {  {&_swigt__p_OpenBabel__OBDOSData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBDescriptor[] = {  {&_swigt__p_OpenBabel__OBDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBElectronicTransitionData[] = {  {&_swigt__p_OpenBabel__OBElectronicTransitionData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBElement[] = {  {&_swigt__p_OpenBabel__OBElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBElementTable[] = {  {&_swigt__p_OpenBabel__OBElementTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBError[] = {  {&_swigt__p_OpenBabel__OBError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBExternalBond[] = {  {&_swigt__p_OpenBabel__OBExternalBond, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBExternalBondData[] = {  {&_swigt__p_OpenBabel__OBExternalBondData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFFCalculation2[] = {  {&_swigt__p_OpenBabel__OBFFCalculation2, 0, 0, 0},  {&_swigt__p_OpenBabel__OBFFCalculation3, _p_OpenBabel__OBFFCalculation3To_p_OpenBabel__OBFFCalculation2, 0, 0},  {&_swigt__p_OpenBabel__OBFFCalculation4, _p_OpenBabel__OBFFCalculation4To_p_OpenBabel__OBFFCalculation2, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFFCalculation3[] = {  {&_swigt__p_OpenBabel__OBFFCalculation3, 0, 0, 0},  {&_swigt__p_OpenBabel__OBFFCalculation4, _p_OpenBabel__OBFFCalculation4To_p_OpenBabel__OBFFCalculation3, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFFCalculation4[] = {  {&_swigt__p_OpenBabel__OBFFCalculation4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFFConstraint[] = {  {&_swigt__p_OpenBabel__OBFFConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFFConstraints[] = {  {&_swigt__p_OpenBabel__OBFFConstraints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFFParameter[] = {  {&_swigt__p_OpenBabel__OBFFParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFingerprint[] = {  {&_swigt__p_OpenBabel__OBFingerprint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBForceField[] = {  {&_swigt__p_OpenBabel__OBForceField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFormat[] = {  {&_swigt__p_OpenBabel__OBFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFreeGrid[] = {  {&_swigt__p_OpenBabel__OBFreeGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFreeGridPoint[] = {  {&_swigt__p_OpenBabel__OBFreeGridPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBGenericData[] = {  {&_swigt__p_OpenBabel__OBStereoBase, _p_OpenBabel__OBStereoBaseTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBRotamerList, _p_OpenBabel__OBRotamerListTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBVibrationData, _p_OpenBabel__OBVibrationDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBTorsionData, _p_OpenBabel__OBTorsionDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBElectronicTransitionData, _p_OpenBabel__OBElectronicTransitionDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBRotationData, _p_OpenBabel__OBRotationDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__AliasData, _p_OpenBabel__AliasDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBPairData, _p_OpenBabel__OBPairDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBAngleData, _p_OpenBabel__OBAngleDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBAtomClassData, _p_OpenBabel__OBAtomClassDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBFreeGrid, _p_OpenBabel__OBFreeGridTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBChiralData, _p_OpenBabel__OBChiralDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBOrbitalData, _p_OpenBabel__OBOrbitalDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBRingData, _p_OpenBabel__OBRingDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBSerialNums, _p_OpenBabel__OBSerialNumsTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBExternalBondData, _p_OpenBabel__OBExternalBondDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBSetData, _p_OpenBabel__OBSetDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBSymmetryData, _p_OpenBabel__OBSymmetryDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBMatrixData, _p_OpenBabel__OBMatrixDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBCommentData, _p_OpenBabel__OBCommentDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBVectorData, _p_OpenBabel__OBVectorDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBVirtualBond, _p_OpenBabel__OBVirtualBondTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBConformerData, _p_OpenBabel__OBConformerDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBDOSData, _p_OpenBabel__OBDOSDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBGridData, _p_OpenBabel__OBGridDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBGenericData, 0, 0, 0},  {&_swigt__p_OpenBabel__OBUnitCell, _p_OpenBabel__OBUnitCellTo_p_OpenBabel__OBGenericData, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBGlobalDataBase[] = {  {&_swigt__p_OpenBabel__OBAtomicHeatOfFormationTable, _p_OpenBabel__OBAtomicHeatOfFormationTableTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBAtomTyper, _p_OpenBabel__OBAtomTyperTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBAromaticTyper, _p_OpenBabel__OBAromaticTyperTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBGlobalDataBase, 0, 0, 0},  {&_swigt__p_OpenBabel__OBResidueData, _p_OpenBabel__OBResidueDataTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBRingTyper, _p_OpenBabel__OBRingTyperTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBIsotopeTable, _p_OpenBabel__OBIsotopeTableTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBTypeTable, _p_OpenBabel__OBTypeTableTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBRotorRules, _p_OpenBabel__OBRotorRulesTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBElementTable, _p_OpenBabel__OBElementTableTo_p_OpenBabel__OBGlobalDataBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBGraphSym[] = {  {&_swigt__p_OpenBabel__OBGraphSym, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBGridData[] = {  {&_swigt__p_OpenBabel__OBGridData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBInternalCoord[] = {  {&_swigt__p_OpenBabel__OBInternalCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBIsomorphismMapper[] = {  {&_swigt__p_OpenBabel__OBIsomorphismMapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBIsomorphismMapper__Functor[] = {  {&_swigt__p_OpenBabel__OBIsomorphismMapper__Functor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBIsotopeTable[] = {  {&_swigt__p_OpenBabel__OBIsotopeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMatrixData[] = {  {&_swigt__p_OpenBabel__OBMatrixData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMessageHandler[] = {  {&_swigt__p_OpenBabel__OBMessageHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMol[] = {  {&_swigt__p_OpenBabel__OBMol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolAngleIter[] = {  {&_swigt__p_OpenBabel__OBMolAngleIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolAtomBFSIter[] = {  {&_swigt__p_OpenBabel__OBMolAtomBFSIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolAtomDFSIter[] = {  {&_swigt__p_OpenBabel__OBMolAtomDFSIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolAtomIter[] = {  {&_swigt__p_OpenBabel__OBMolAtomIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolBondBFSIter[] = {  {&_swigt__p_OpenBabel__OBMolBondBFSIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolBondIter[] = {  {&_swigt__p_OpenBabel__OBMolBondIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolPairIter[] = {  {&_swigt__p_OpenBabel__OBMolPairIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolRingIter[] = {  {&_swigt__p_OpenBabel__OBMolRingIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMolTorsionIter[] = {  {&_swigt__p_OpenBabel__OBMolTorsionIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBNasaThermoData[] = {  {&_swigt__p_OpenBabel__OBNasaThermoData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBOp[] = {  {&_swigt__p_OpenBabel__OBOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBOrbital[] = {  {&_swigt__p_OpenBabel__OBOrbital, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBOrbitalData[] = {  {&_swigt__p_OpenBabel__OBOrbitalData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBPairData[] = {  {&_swigt__p_OpenBabel__OBPairData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBPairTemplateT_bool_t[] = {  {&_swigt__p_OpenBabel__OBPairTemplateT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBPairTemplateT_double_t[] = {  {&_swigt__p_OpenBabel__OBPairTemplateT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBPairTemplateT_int_t[] = {  {&_swigt__p_OpenBabel__OBPairTemplateT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBPlugin[] = {  {&_swigt__p_OpenBabel__OBDescriptor, _p_OpenBabel__OBDescriptorTo_p_OpenBabel__OBPlugin, 0, 0},  {&_swigt__p_OpenBabel__OBChargeModel, _p_OpenBabel__OBChargeModelTo_p_OpenBabel__OBPlugin, 0, 0},  {&_swigt__p_OpenBabel__OBPlugin, 0, 0, 0},  {&_swigt__p_OpenBabel__OBForceField, _p_OpenBabel__OBForceFieldTo_p_OpenBabel__OBPlugin, 0, 0},  {&_swigt__p_OpenBabel__OBOp, _p_OpenBabel__OBOpTo_p_OpenBabel__OBPlugin, 0, 0},  {&_swigt__p_OpenBabel__OBFormat, _p_OpenBabel__OBFormatTo_p_OpenBabel__OBPlugin, 0, 0},  {&_swigt__p_OpenBabel__OBFingerprint, _p_OpenBabel__OBFingerprintTo_p_OpenBabel__OBPlugin, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBQuery[] = {  {&_swigt__p_OpenBabel__OBQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBQueryAtom[] = {  {&_swigt__p_OpenBabel__OBQueryAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBQueryBond[] = {  {&_swigt__p_OpenBabel__OBQueryBond, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRTree[] = {  {&_swigt__p_OpenBabel__OBRTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRandom[] = {  {&_swigt__p_OpenBabel__OBRandom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRateData[] = {  {&_swigt__p_OpenBabel__OBRateData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBReaction[] = {  {&_swigt__p_OpenBabel__OBReaction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBResidue[] = {  {&_swigt__p_OpenBabel__OBResidue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBResidueAtomIter[] = {  {&_swigt__p_OpenBabel__OBResidueAtomIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBResidueData[] = {  {&_swigt__p_OpenBabel__OBResidueData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBResidueIter[] = {  {&_swigt__p_OpenBabel__OBResidueIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRing[] = {  {&_swigt__p_OpenBabel__OBRing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRingData[] = {  {&_swigt__p_OpenBabel__OBRingData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRingSearch[] = {  {&_swigt__p_OpenBabel__OBRingSearch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRingTyper[] = {  {&_swigt__p_OpenBabel__OBRingTyper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRotamerList[] = {  {&_swigt__p_OpenBabel__OBRotamerList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRotationData[] = {  {&_swigt__p_OpenBabel__OBRotationData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRotor[] = {  {&_swigt__p_OpenBabel__OBRotor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRotorKeys[] = {  {&_swigt__p_OpenBabel__OBRotorKeys, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRotorList[] = {  {&_swigt__p_OpenBabel__OBRotorList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRotorRule[] = {  {&_swigt__p_OpenBabel__OBRotorRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRotorRules[] = {  {&_swigt__p_OpenBabel__OBRotorRules, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSSMatch[] = {  {&_swigt__p_OpenBabel__OBSSMatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSerialNums[] = {  {&_swigt__p_OpenBabel__OBSerialNums, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSetData[] = {  {&_swigt__p_OpenBabel__OBSetData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSmartsMatcher[] = {  {&_swigt__p_OpenBabel__OBSmartsMatcher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSmartsPattern[] = {  {&_swigt__p_OpenBabel__OBSmartsPattern, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSpectrophore[] = {  {&_swigt__p_OpenBabel__OBSpectrophore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSqrtTbl[] = {  {&_swigt__p_OpenBabel__OBSqrtTbl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSquarePlanarStereo[] = {  {&_swigt__p_OpenBabel__OBSquarePlanarStereo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBStereo[] = {  {&_swigt__p_OpenBabel__OBStereo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBStereoBase[] = {  {&_swigt__p_OpenBabel__OBStereoBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBStereoFacade[] = {  {&_swigt__p_OpenBabel__OBStereoFacade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBStereoUnit[] = {  {&_swigt__p_OpenBabel__OBStereoUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBStopwatch[] = {  {&_swigt__p_OpenBabel__OBStopwatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSymmetryData[] = {  {&_swigt__p_OpenBabel__OBSymmetryData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBTetrahedralStereo[] = {  {&_swigt__p_OpenBabel__OBTetrahedralStereo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBTorsion[] = {  {&_swigt__p_OpenBabel__OBTorsion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBTorsionData[] = {  {&_swigt__p_OpenBabel__OBTorsionData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBTypeTable[] = {  {&_swigt__p_OpenBabel__OBTypeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBUnitCell[] = {  {&_swigt__p_OpenBabel__OBUnitCell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBVectorData[] = {  {&_swigt__p_OpenBabel__OBVectorData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBVibrationData[] = {  {&_swigt__p_OpenBabel__OBVibrationData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBVirtualBond[] = {  {&_swigt__p_OpenBabel__OBVirtualBond, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__Pattern[] = {  {&_swigt__p_OpenBabel__Pattern, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__SpaceGroup[] = {  {&_swigt__p_OpenBabel__SpaceGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__Template[] = {  {&_swigt__p_OpenBabel__Template, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__matrix3x3[] = {  {&_swigt__p_OpenBabel__transform3d, _p_OpenBabel__transform3dTo_p_OpenBabel__matrix3x3, 0, 0},  {&_swigt__p_OpenBabel__matrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__obLogBuf[] = {  {&_swigt__p_OpenBabel__obLogBuf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t[] = {  {&_swigt__p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__rotor_digit[] = {  {&_swigt__p_OpenBabel__rotor_digit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__transform3d[] = {  {&_swigt__p_OpenBabel__transform3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t[] = {  {&_swigt__p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__vector3[] = {  {&_swigt__p_OpenBabel__transform3d, _p_OpenBabel__transform3dTo_p_OpenBabel__vector3, 0, 0},  {&_swigt__p_OpenBabel__vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PluginIterator[] = {  {&_swigt__p_PluginIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PluginMapType[] = {  {&_swigt__p_PluginMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ref[] = {  {&_swigt__p_Ref, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefIter[] = {  {&_swigt__p_RefIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Refs[] = {  {&_swigt__p_Refs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Unit[] = {  {&_swigt__p_Unit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_3__double[] = {  {&_swigt__p_a_3__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_4__char[] = {  {&_swigt__p_a_4__char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_obsharedptrT_OpenBabel__OBMol_t[] = {  {&_swigt__p_obsharedptrT_OpenBabel__OBMol_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_OpenBabel__OBChargeModel[] = {  {&_swigt__p_p_OpenBabel__OBChargeModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_OpenBabel__OBDescriptor[] = {  {&_swigt__p_p_OpenBabel__OBDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_OpenBabel__OBFingerprint[] = {  {&_swigt__p_p_OpenBabel__OBFingerprint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_OpenBabel__OBForceField[] = {  {&_swigt__p_p_OpenBabel__OBForceField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_OpenBabel__OBFormat[] = {  {&_swigt__p_p_OpenBabel__OBFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_OpenBabel__OBOp[] = {  {&_swigt__p_p_OpenBabel__OBOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__binary_functionT_char_const_p_char_const_p_bool_t[] = {  {&_swigt__p_std__binary_functionT_char_const_p_char_const_p_bool_t, 0, 0, 0},  {&_swigt__p_OpenBabel__CharPtrLess, _p_OpenBabel__CharPtrLessTo_p_std__binary_functionT_char_const_p_char_const_p_bool_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_int_t[] = {  {&_swigt__p_std__dequeT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_OpenBabel__transform3d_p_t__const_iterator[] = {  {&_swigt__p_std__listT_OpenBabel__transform3d_p_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_OpenBabel__vector3_t[] = {  {&_swigt__p_std__listT_OpenBabel__vector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t[] = {  {&_swigt__p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t[] = {  {&_swigt__p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t[] = {  {&_swigt__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator[] = {  {&_swigt__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_OpenBabel__OBAtom_p_t[] = {  {&_swigt__p_std__mapT_int_OpenBabel__OBAtom_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__multimapT_double_unsigned_int_t[] = {  {&_swigt__p_std__multimapT_double_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t[] = {  {&_swigt__p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int_int_t[] = {  {&_swigt__p_std__pairT_int_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_unsigned_int_unsigned_int_t[] = {  {&_swigt__p_std__pairT_unsigned_int_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_OpenBabel__OBBond_p_t[] = {  {&_swigt__p_std__setT_OpenBabel__OBBond_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__streampos[] = {  {&_swigt__p_std__streampos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringbuf[] = {  {&_swigt__p_std__stringbuf, 0, 0, 0},  {&_swigt__p_OpenBabel__obLogBuf, _p_OpenBabel__obLogBufTo_p_std__stringbuf, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__type_info[] = {  {&_swigt__p_std__type_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBAtom_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBAtom_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBAtom_p_t__iterator[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBBase_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBBase_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBBond_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBBond_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBBond_p_t__iterator[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBBond_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBBond_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBCisTransStereo_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBCisTransStereo_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBExternalBond_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBExternalBond_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBGenericData_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBGenericData_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBInternalCoord_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBMol_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBMol_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBOrbital_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBOrbital_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBQueryAtom_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBQueryAtom_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBQueryBond_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBQueryBond_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBResidue_p_t__iterator[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBResidue_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBResidue_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBResidue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBRing_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBRing_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBRing_p_t__iterator[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBRing_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBRing_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBRing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBRotor_p_t__iterator[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBRotor_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBStereoUnit_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBStereoUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__OBTorsion_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__OBTorsion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OpenBabel__vector3_t[] = {  {&_swigt__p_std__vectorT_OpenBabel__vector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_p_t[] = {  {&_swigt__p_std__vectorT_double_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_p_t__iterator[] = {  {&_swigt__p_std__vectorT_double_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t__iterator[] = {  {&_swigt__p_std__vectorT_double_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_int_int_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_int_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_t_t__iterator[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_uint32_t_t[] = {  {&_swigt__p_std__vectorT_uint32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_p_t__iterator[] = {  {&_swigt__p_std__vectorT_unsigned_char_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_word_vector[] = {  {&_swigt__p_word_vector, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__double,
  _swigc__int,
  _swigc__p_ConstRefIter,
  _swigc__p_Mapping,
  _swigc__p_Mappings,
  _swigc__p_OpMap,
  _swigc__p_OpenBabel__AliasData,
  _swigc__p_OpenBabel__CharPtrLess,
  _swigc__p_OpenBabel__DoubleType,
  _swigc__p_OpenBabel__FastSearch,
  _swigc__p_OpenBabel__FastSearchIndexer,
  _swigc__p_OpenBabel__FptIndex,
  _swigc__p_OpenBabel__FptIndexHeader,
  _swigc__p_OpenBabel__LineSearchType,
  _swigc__p_OpenBabel__OBAngle,
  _swigc__p_OpenBabel__OBAngleData,
  _swigc__p_OpenBabel__OBAromaticTyper,
  _swigc__p_OpenBabel__OBAtom,
  _swigc__p_OpenBabel__OBAtomAtomIter,
  _swigc__p_OpenBabel__OBAtomBondIter,
  _swigc__p_OpenBabel__OBAtomClassData,
  _swigc__p_OpenBabel__OBAtomHOF,
  _swigc__p_OpenBabel__OBAtomTyper,
  _swigc__p_OpenBabel__OBAtomicHeatOfFormationTable,
  _swigc__p_OpenBabel__OBBase,
  _swigc__p_OpenBabel__OBBitVec,
  _swigc__p_OpenBabel__OBBond,
  _swigc__p_OpenBabel__OBBuilder,
  _swigc__p_OpenBabel__OBChainsParser,
  _swigc__p_OpenBabel__OBChargeModel,
  _swigc__p_OpenBabel__OBChiralData,
  _swigc__p_OpenBabel__OBCisTransStereo,
  _swigc__p_OpenBabel__OBCommentData,
  _swigc__p_OpenBabel__OBConformerData,
  _swigc__p_OpenBabel__OBConversion,
  _swigc__p_OpenBabel__OBDOSData,
  _swigc__p_OpenBabel__OBDescriptor,
  _swigc__p_OpenBabel__OBElectronicTransitionData,
  _swigc__p_OpenBabel__OBElement,
  _swigc__p_OpenBabel__OBElementTable,
  _swigc__p_OpenBabel__OBError,
  _swigc__p_OpenBabel__OBExternalBond,
  _swigc__p_OpenBabel__OBExternalBondData,
  _swigc__p_OpenBabel__OBFFCalculation2,
  _swigc__p_OpenBabel__OBFFCalculation3,
  _swigc__p_OpenBabel__OBFFCalculation4,
  _swigc__p_OpenBabel__OBFFConstraint,
  _swigc__p_OpenBabel__OBFFConstraints,
  _swigc__p_OpenBabel__OBFFParameter,
  _swigc__p_OpenBabel__OBFingerprint,
  _swigc__p_OpenBabel__OBForceField,
  _swigc__p_OpenBabel__OBFormat,
  _swigc__p_OpenBabel__OBFreeGrid,
  _swigc__p_OpenBabel__OBFreeGridPoint,
  _swigc__p_OpenBabel__OBGenericData,
  _swigc__p_OpenBabel__OBGlobalDataBase,
  _swigc__p_OpenBabel__OBGraphSym,
  _swigc__p_OpenBabel__OBGridData,
  _swigc__p_OpenBabel__OBInternalCoord,
  _swigc__p_OpenBabel__OBIsomorphismMapper,
  _swigc__p_OpenBabel__OBIsomorphismMapper__Functor,
  _swigc__p_OpenBabel__OBIsotopeTable,
  _swigc__p_OpenBabel__OBMatrixData,
  _swigc__p_OpenBabel__OBMessageHandler,
  _swigc__p_OpenBabel__OBMol,
  _swigc__p_OpenBabel__OBMolAngleIter,
  _swigc__p_OpenBabel__OBMolAtomBFSIter,
  _swigc__p_OpenBabel__OBMolAtomDFSIter,
  _swigc__p_OpenBabel__OBMolAtomIter,
  _swigc__p_OpenBabel__OBMolBondBFSIter,
  _swigc__p_OpenBabel__OBMolBondIter,
  _swigc__p_OpenBabel__OBMolPairIter,
  _swigc__p_OpenBabel__OBMolRingIter,
  _swigc__p_OpenBabel__OBMolTorsionIter,
  _swigc__p_OpenBabel__OBNasaThermoData,
  _swigc__p_OpenBabel__OBOp,
  _swigc__p_OpenBabel__OBOrbital,
  _swigc__p_OpenBabel__OBOrbitalData,
  _swigc__p_OpenBabel__OBPairData,
  _swigc__p_OpenBabel__OBPairTemplateT_bool_t,
  _swigc__p_OpenBabel__OBPairTemplateT_double_t,
  _swigc__p_OpenBabel__OBPairTemplateT_int_t,
  _swigc__p_OpenBabel__OBPlugin,
  _swigc__p_OpenBabel__OBQuery,
  _swigc__p_OpenBabel__OBQueryAtom,
  _swigc__p_OpenBabel__OBQueryBond,
  _swigc__p_OpenBabel__OBRTree,
  _swigc__p_OpenBabel__OBRandom,
  _swigc__p_OpenBabel__OBRateData,
  _swigc__p_OpenBabel__OBReaction,
  _swigc__p_OpenBabel__OBResidue,
  _swigc__p_OpenBabel__OBResidueAtomIter,
  _swigc__p_OpenBabel__OBResidueData,
  _swigc__p_OpenBabel__OBResidueIter,
  _swigc__p_OpenBabel__OBRing,
  _swigc__p_OpenBabel__OBRingData,
  _swigc__p_OpenBabel__OBRingSearch,
  _swigc__p_OpenBabel__OBRingTyper,
  _swigc__p_OpenBabel__OBRotamerList,
  _swigc__p_OpenBabel__OBRotationData,
  _swigc__p_OpenBabel__OBRotor,
  _swigc__p_OpenBabel__OBRotorKeys,
  _swigc__p_OpenBabel__OBRotorList,
  _swigc__p_OpenBabel__OBRotorRule,
  _swigc__p_OpenBabel__OBRotorRules,
  _swigc__p_OpenBabel__OBSSMatch,
  _swigc__p_OpenBabel__OBSerialNums,
  _swigc__p_OpenBabel__OBSetData,
  _swigc__p_OpenBabel__OBSmartsMatcher,
  _swigc__p_OpenBabel__OBSmartsPattern,
  _swigc__p_OpenBabel__OBSpectrophore,
  _swigc__p_OpenBabel__OBSqrtTbl,
  _swigc__p_OpenBabel__OBSquarePlanarStereo,
  _swigc__p_OpenBabel__OBStereo,
  _swigc__p_OpenBabel__OBStereoBase,
  _swigc__p_OpenBabel__OBStereoFacade,
  _swigc__p_OpenBabel__OBStereoUnit,
  _swigc__p_OpenBabel__OBStopwatch,
  _swigc__p_OpenBabel__OBSymmetryData,
  _swigc__p_OpenBabel__OBTetrahedralStereo,
  _swigc__p_OpenBabel__OBTorsion,
  _swigc__p_OpenBabel__OBTorsionData,
  _swigc__p_OpenBabel__OBTypeTable,
  _swigc__p_OpenBabel__OBUnitCell,
  _swigc__p_OpenBabel__OBVectorData,
  _swigc__p_OpenBabel__OBVibrationData,
  _swigc__p_OpenBabel__OBVirtualBond,
  _swigc__p_OpenBabel__Pattern,
  _swigc__p_OpenBabel__SpaceGroup,
  _swigc__p_OpenBabel__Template,
  _swigc__p_OpenBabel__matrix3x3,
  _swigc__p_OpenBabel__obLogBuf,
  _swigc__p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,
  _swigc__p_OpenBabel__rotor_digit,
  _swigc__p_OpenBabel__transform3d,
  _swigc__p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,
  _swigc__p_OpenBabel__vector3,
  _swigc__p_PluginIterator,
  _swigc__p_PluginMapType,
  _swigc__p_Ref,
  _swigc__p_RefIter,
  _swigc__p_Refs,
  _swigc__p_Unit,
  _swigc__p_a_3__double,
  _swigc__p_a_4__char,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_obsharedptrT_OpenBabel__OBMol_t,
  _swigc__p_p_OpenBabel__OBChargeModel,
  _swigc__p_p_OpenBabel__OBDescriptor,
  _swigc__p_p_OpenBabel__OBFingerprint,
  _swigc__p_p_OpenBabel__OBForceField,
  _swigc__p_p_OpenBabel__OBFormat,
  _swigc__p_p_OpenBabel__OBOp,
  _swigc__p_p_double,
  _swigc__p_p_int,
  _swigc__p_size_type,
  _swigc__p_std__binary_functionT_char_const_p_char_const_p_bool_t,
  _swigc__p_std__dequeT_int_t,
  _swigc__p_std__istream,
  _swigc__p_std__listT_OpenBabel__transform3d_p_t__const_iterator,
  _swigc__p_std__listT_OpenBabel__vector3_t,
  _swigc__p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t,
  _swigc__p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t,
  _swigc__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t,
  _swigc__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator,
  _swigc__p_std__mapT_int_OpenBabel__OBAtom_p_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__multimapT_double_unsigned_int_t,
  _swigc__p_std__ostream,
  _swigc__p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,
  _swigc__p_std__pairT_int_int_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__pairT_unsigned_int_unsigned_int_t,
  _swigc__p_std__setT_OpenBabel__OBBond_p_t,
  _swigc__p_std__streampos,
  _swigc__p_std__string,
  _swigc__p_std__stringbuf,
  _swigc__p_std__type_info,
  _swigc__p_std__vectorT_OpenBabel__OBAtom_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBAtom_p_t__iterator,
  _swigc__p_std__vectorT_OpenBabel__OBBase_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBBond_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBBond_p_t__iterator,
  _swigc__p_std__vectorT_OpenBabel__OBBond_t,
  _swigc__p_std__vectorT_OpenBabel__OBCisTransStereo_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBExternalBond_t,
  _swigc__p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator,
  _swigc__p_std__vectorT_OpenBabel__OBGenericData_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator,
  _swigc__p_std__vectorT_OpenBabel__OBInternalCoord_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator,
  _swigc__p_std__vectorT_OpenBabel__OBMol_t,
  _swigc__p_std__vectorT_OpenBabel__OBOrbital_t,
  _swigc__p_std__vectorT_OpenBabel__OBQueryAtom_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBQueryBond_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBResidue_p_t__iterator,
  _swigc__p_std__vectorT_OpenBabel__OBResidue_t,
  _swigc__p_std__vectorT_OpenBabel__OBRing_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBRing_p_t__iterator,
  _swigc__p_std__vectorT_OpenBabel__OBRing_t,
  _swigc__p_std__vectorT_OpenBabel__OBRotor_p_t__iterator,
  _swigc__p_std__vectorT_OpenBabel__OBStereoUnit_t,
  _swigc__p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t,
  _swigc__p_std__vectorT_OpenBabel__OBTorsion_t,
  _swigc__p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t,
  _swigc__p_std__vectorT_OpenBabel__vector3_t,
  _swigc__p_std__vectorT_double_p_t,
  _swigc__p_std__vectorT_double_p_t__iterator,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_double_t__iterator,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__pairT_int_int_t_t,
  _swigc__p_std__vectorT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t,
  _swigc__p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_t_t__iterator,
  _swigc__p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_uint32_t_t,
  _swigc__p_std__vectorT_unsigned_char_p_t__iterator,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_value_type,
  _swigc__p_void,
  _swigc__p_word_vector,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */
/* vdecl subsection */
static int le_swig__p_void=0; /* handle for _p_void */
static int le_swig__p_OpenBabel__OBPairTemplateT_double_t=0; /* handle for _p_OpenBabel__OBPairTemplateT_double_t */
static int le_swig__p_std__vectorT_double_t=0; /* handle for vectorDouble */
static int le_swig__p_OpenBabel__OBPairTemplateT_bool_t=0; /* handle for _p_OpenBabel__OBPairTemplateT_bool_t */
static int le_swig__p_OpenBabel__OBIsomorphismMapper__Functor=0; /* handle for _p_OpenBabel__OBIsomorphismMapper__Functor */
static int le_swig__p_unsigned_char=0; /* handle for _p_unsigned_char */
static int le_swig__p_OpenBabel__OBGlobalDataBase=0; /* handle for OBGlobalDataBase */
static int le_swig__p_std__vectorT_std__pairT_std__string_std__string_t_t=0; /* handle for _p_std__vectorT_std__pairT_std__string_std__string_t_t */
static int le_swig__p_std__string=0; /* handle for _p_std__string */
static int le_swig__p_OpenBabel__OBFFConstraint=0; /* handle for OBFFConstraint */
static int le_swig__p_OpenBabel__OBAngle=0; /* handle for OBAngle */
static int le_swig__p_OpenBabel__OBVectorData=0; /* handle for OBVectorData */
static int le_swig__p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t=0; /* handle for _p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t */
static int le_swig__p_std__vectorT_OpenBabel__OBCisTransStereo_p_t=0; /* handle for _p_std__vectorT_OpenBabel__OBCisTransStereo_p_t */
static int le_swig__p_OpenBabel__OBSqrtTbl=0; /* handle for OBSqrtTbl */
static int le_swig__p_std__vectorT_uint32_t_t=0; /* handle for _p_std__vectorT_uint32_t_t */
static int le_swig__p_std__vectorT_OpenBabel__OBStereoUnit_t=0; /* handle for _p_std__vectorT_OpenBabel__OBStereoUnit_t */
static int le_swig__p_OpenBabel__OBRotor=0; /* handle for OBRotor */
static int le_swig__p_OpenBabel__OBMolPairIter=0; /* handle for OBMolPairIter */
static int le_swig__p_std__vectorT_double_p_t=0; /* handle for _p_std__vectorT_double_p_t */
static int le_swig__p_OpenBabel__OBIsotopeTable=0; /* handle for OBIsotopeTable */
static int le_swig__p_OpenBabel__OBTypeTable=0; /* handle for OBTypeTable */
static int le_swig__p_OpenBabel__AliasData=0; /* handle for AliasData */
static int le_swig__p_a_4__char=0; /* handle for _p_a_4__char */
static int le_swig__p_OpenBabel__OBResidue=0; /* handle for OBResidue */
static int le_swig__p_p_OpenBabel__OBDescriptor=0; /* handle for _p_p_OpenBabel__OBDescriptor */
static int le_swig__p_OpenBabel__OBDescriptor=0; /* handle for OBDescriptor */
static int le_swig__p_OpenBabel__OBExternalBond=0; /* handle for OBExternalBond */
static int le_swig__p_OpenBabel__OBUnitCell=0; /* handle for OBUnitCell */
static int le_swig__p_OpenBabel__OBStereoUnit=0; /* handle for OBStereoUnit */
static int le_swig__p_OpenBabel__OBSymmetryData=0; /* handle for OBSymmetryData */
static int le_swig__p_OpenBabel__FptIndexHeader=0; /* handle for FptIndexHeader */
static int le_swig__p_OpenBabel__OBBitVec=0; /* handle for OBBitVec */
static int le_swig__p_OpenBabel__OBStopwatch=0; /* handle for OBStopwatch */
static int le_swig__p_OpenBabel__FastSearch=0; /* handle for FastSearch */
static int le_swig__p_OpMap=0; /* handle for _p_OpMap */
static int le_swig__p_OpenBabel__OBSmartsMatcher=0; /* handle for OBSmartsMatcher */
static int le_swig__p_OpenBabel__OBRateData=0; /* handle for _p_OpenBabel__OBRateData */
static int le_swig__p_OpenBabel__FptIndex=0; /* handle for _p_OpenBabel__FptIndex */
static int le_swig__p_Ref=0; /* handle for _p_Ref */
static int le_swig__p_std__vectorT_OpenBabel__OBAtom_p_t=0; /* handle for _p_std__vectorT_OpenBabel__OBAtom_p_t */
static int le_swig__p_std__mapT_int_OpenBabel__OBAtom_p_t=0; /* handle for _p_std__mapT_int_OpenBabel__OBAtom_p_t */
static int le_swig__p_std__vectorT_OpenBabel__OBQueryAtom_p_t=0; /* handle for _p_std__vectorT_OpenBabel__OBQueryAtom_p_t */
static int le_swig__p_OpenBabel__OBRotamerList=0; /* handle for OBRotamerList */
static int le_swig__p_unsigned_int=0; /* handle for _p_unsigned_int */
static int le_swig__p_OpenBabel__OBElement=0; /* handle for OBElement */
static int le_swig__p_OpenBabel__SpaceGroup=0; /* handle for SpaceGroup */
static int le_swig__p_std__stringbuf=0; /* handle for stringbuf */
static int le_swig__p_p_OpenBabel__OBOp=0; /* handle for _p_p_OpenBabel__OBOp */
static int le_swig__p_OpenBabel__OBOp=0; /* handle for OBOp */
static int le_swig__p_OpenBabel__OBReaction=0; /* handle for OBReaction */
static int le_swig__p_OpenBabel__OBOrbital=0; /* handle for OBOrbital */
static int le_swig__p_std__vectorT_OpenBabel__OBRing_t=0; /* handle for vectorOBRing */
static int le_swig__p_OpenBabel__obLogBuf=0; /* handle for obLogBuf */
static int le_swig__p_std__dequeT_int_t=0; /* handle for _p_std__dequeT_int_t */
static int le_swig__p_std__pairT_int_int_t=0; /* handle for _p_std__pairT_int_int_t */
static int le_swig__p_OpenBabel__OBPairTemplateT_int_t=0; /* handle for _p_OpenBabel__OBPairTemplateT_int_t */
static int le_swig__p_std__pairT_unsigned_int_unsigned_int_t=0; /* handle for pairUIntUInt */
static int le_swig__p_std__vectorT_int_t=0; /* handle for vectorInt */
static int le_swig__p_std__vectorT_unsigned_int_t=0; /* handle for vectorUnsignedInt */
static int le_swig__p_OpenBabel__OBNasaThermoData=0; /* handle for _p_OpenBabel__OBNasaThermoData */
static int le_swig__p_OpenBabel__OBElementTable=0; /* handle for OBElementTable */
static int le_swig__p_std__multimapT_double_unsigned_int_t=0; /* handle for _p_std__multimapT_double_unsigned_int_t */
static int le_swig__p_OpenBabel__OBIsomorphismMapper=0; /* handle for OBIsomorphismMapper */
static int le_swig__p_OpenBabel__OBAtom=0; /* handle for OBAtom */
static int le_swig__p_OpenBabel__transform3d=0; /* handle for transform3d */
static int le_swig__p_p_OpenBabel__OBForceField=0; /* handle for _p_p_OpenBabel__OBForceField */
static int le_swig__p_OpenBabel__OBForceField=0; /* handle for OBForceField */
static int le_swig__p_std__vectorT_OpenBabel__OBResidue_t=0; /* handle for vectorOBResidue */
static int le_swig__p_std__vectorT_std__vectorT_int_t_t__iterator=0; /* handle for _p_std__vectorT_std__vectorT_int_t_t__iterator */
static int le_swig__p_std__vectorT_double_p_t__iterator=0; /* handle for _p_std__vectorT_double_p_t__iterator */
static int le_swig__p_std__vectorT_OpenBabel__OBResidue_p_t__iterator=0; /* handle for _p_std__vectorT_OpenBabel__OBResidue_p_t__iterator */
static int le_swig__p_std__vectorT_OpenBabel__OBBond_p_t__iterator=0; /* handle for _p_std__vectorT_OpenBabel__OBBond_p_t__iterator */
static int le_swig__p_std__vectorT_OpenBabel__OBAtom_p_t__iterator=0; /* handle for _p_std__vectorT_OpenBabel__OBAtom_p_t__iterator */
static int le_swig__p_PluginIterator=0; /* handle for _p_PluginIterator */
static int le_swig__p_std__vectorT_OpenBabel__OBRing_p_t__iterator=0; /* handle for _p_std__vectorT_OpenBabel__OBRing_p_t__iterator */
static int le_swig__p_std__vectorT_double_t__iterator=0; /* handle for _p_std__vectorT_double_t__iterator */
static int le_swig__p_std__vectorT_OpenBabel__OBRotor_p_t__iterator=0; /* handle for _p_std__vectorT_OpenBabel__OBRotor_p_t__iterator */
static int le_swig__p_std__vectorT_unsigned_char_p_t__iterator=0; /* handle for _p_std__vectorT_unsigned_char_p_t__iterator */
static int le_swig__p_std__vectorT_OpenBabel__OBGenericData_p_t=0; /* handle for vectorpOBGenericData */
static int le_swig__p_OpenBabel__OBRingSearch=0; /* handle for OBRingSearch */
static int le_swig__p_OpenBabel__OBSSMatch=0; /* handle for OBSSMatch */
static int le_swig__p_OpenBabel__OBRingTyper=0; /* handle for OBRingTyper */
static int le_swig__p_std__listT_OpenBabel__transform3d_p_t__const_iterator=0; /* handle for _p_std__listT_OpenBabel__transform3d_p_t__const_iterator */
static int le_swig__p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t=0; /* handle for _p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t */
static int le_swig__p_OpenBabel__OBMol=0; /* handle for OBMol */
static int le_swig__p_OpenBabel__Template=0; /* handle for _p_OpenBabel__Template */
static int le_swig__p_OpenBabel__OBQueryAtom=0; /* handle for OBQueryAtom */
static int le_swig__p_OpenBabel__OBMolRingIter=0; /* handle for OBMolRingIter */
static int le_swig__p_std__istream=0; /* handle for _p_std__istream */
static int le_swig__p_std__ostream=0; /* handle for _p_std__ostream */
static int le_swig__p_OpenBabel__CharPtrLess=0; /* handle for CharPtrLess */
static int le_swig__p_OpenBabel__OBOrbitalData=0; /* handle for OBOrbitalData */
static int le_swig__p_OpenBabel__OBChiralData=0; /* handle for OBChiralData */
static int le_swig__p_OpenBabel__FastSearchIndexer=0; /* handle for FastSearchIndexer */
static int le_swig__p_OpenBabel__OBMolBondIter=0; /* handle for OBMolBondIter */
static int le_swig__p_OpenBabel__OBAtomBondIter=0; /* handle for OBAtomBondIter */
static int le_swig__p_OpenBabel__OBInternalCoord=0; /* handle for OBInternalCoord */
static int le_swig__p_std__mapT_std__string_std__string_t=0; /* handle for _p_std__mapT_std__string_std__string_t */
static int le_swig__p_std__vectorT_std__string_t=0; /* handle for vectorString */
static int le_swig__p_OpenBabel__OBChainsParser=0; /* handle for OBChainsParser */
static int le_swig__p_std__pairT_std__string_std__string_t=0; /* handle for _p_std__pairT_std__string_std__string_t */
static int le_swig__p_OpenBabel__OBPairData=0; /* handle for OBPairData */
static int le_swig__p_std__type_info=0; /* handle for _p_std__type_info */
static int le_swig__p_std__listT_OpenBabel__vector3_t=0; /* handle for _p_std__listT_OpenBabel__vector3_t */
static int le_swig__p_std__vectorT_OpenBabel__vector3_t=0; /* handle for vectorVector3 */
static int le_swig__p_OpenBabel__OBResidueIter=0; /* handle for OBResidueIter */
static int le_swig__p_OpenBabel__OBFormat=0; /* handle for OBFormat */
static int le_swig__p_p_OpenBabel__OBFormat=0; /* handle for _p_p_OpenBabel__OBFormat */
static int le_swig__p_OpenBabel__OBMolAtomDFSIter=0; /* handle for OBMolAtomDFSIter */
static int le_swig__p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t=0; /* handle for _p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t */
static int le_swig__p_std__vectorT_OpenBabel__OBInternalCoord_p_t=0; /* handle for vectorpOBInternalCoord */
static int le_swig__p_OpenBabel__OBMolAtomBFSIter=0; /* handle for OBMolAtomBFSIter */
static int le_swig__p_OpenBabel__OBMolBondBFSIter=0; /* handle for OBMolBondBFSIter */
static int le_swig__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t=0; /* handle for _p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t */
static int le_swig__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator=0; /* handle for _p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator */
static int le_swig__p_OpenBabel__OBCommentData=0; /* handle for OBCommentData */
static int le_swig__p_word_vector=0; /* handle for _p_word_vector */
static int le_swig__p_OpenBabel__OBStereo=0; /* handle for OBStereo */
static int le_swig__p_OpenBabel__OBTetrahedralStereo=0; /* handle for _p_OpenBabel__OBTetrahedralStereo */
static int le_swig__p_OpenBabel__OBSquarePlanarStereo=0; /* handle for _p_OpenBabel__OBSquarePlanarStereo */
static int le_swig__p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t=0; /* handle for vvpairUIntUInt */
static int le_swig__p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t=0; /* handle for vpairUIntUInt */
static int le_swig__p_OpenBabel__OBDOSData=0; /* handle for OBDOSData */
static int le_swig__p_OpenBabel__OBMatrixData=0; /* handle for OBMatrixData */
static int le_swig__p_OpenBabel__OBRotorList=0; /* handle for OBRotorList */
static int le_swig__p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator=0; /* handle for _p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator */
static int le_swig__p_OpenBabel__OBRing=0; /* handle for OBRing */
static int le_swig__p_OpenBabel__OBRotorKeys=0; /* handle for OBRotorKeys */
static int le_swig__p_OpenBabel__OBRotorRules=0; /* handle for OBRotorRules */
static int le_swig__p_OpenBabel__OBStereoFacade=0; /* handle for OBStereoFacade */
static int le_swig__p_OpenBabel__OBFFConstraints=0; /* handle for OBFFConstraints */
static int le_swig__p_OpenBabel__OBFreeGridPoint=0; /* handle for OBFreeGridPoint */
static int le_swig__p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t=0; /* handle for _p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t */
static int le_swig__p_OpenBabel__rotor_digit=0; /* handle for rotor_digit */
static int le_swig__p_OpenBabel__OBAtomClassData=0; /* handle for OBAtomClassData */
static int le_swig__p_std__vectorT_OpenBabel__OBOrbital_t=0; /* handle for _p_std__vectorT_OpenBabel__OBOrbital_t */
static int le_swig__p_OpenBabel__OBAromaticTyper=0; /* handle for OBAromaticTyper */
static int le_swig__p_OpenBabel__OBPlugin=0; /* handle for OBPlugin */
static int le_swig__p_p_int=0; /* handle for _p_p_int */
static int le_swig__p_int=0; /* handle for _p_int */
static int le_swig__p_OpenBabel__OBGraphSym=0; /* handle for OBGraphSym */
static int le_swig__p_OpenBabel__Pattern=0; /* handle for _p_OpenBabel__Pattern */
static int le_swig__p_OpenBabel__OBSmartsPattern=0; /* handle for OBSmartsPattern */
static int le_swig__p_OpenBabel__DoubleType=0; /* handle for DoubleType */
static int le_swig__p_OpenBabel__matrix3x3=0; /* handle for matrix3x3 */
static int le_swig__p_Refs=0; /* handle for _p_Refs */
static int le_swig__p_OpenBabel__OBRotorRule=0; /* handle for OBRotorRule */
static int le_swig__p_OpenBabel__OBMolAngleIter=0; /* handle for OBMolAngleIter */
static int le_swig__p_OpenBabel__OBCisTransStereo=0; /* handle for _p_OpenBabel__OBCisTransStereo */
static int le_swig__p_OpenBabel__OBMessageHandler=0; /* handle for OBMessageHandler */
static int le_swig__p_bool=0; /* handle for _p_bool */
static int le_swig__p_value_type=0; /* handle for _p_value_type */
static int le_swig__p_difference_type=0; /* handle for _p_difference_type */
static int le_swig__p_std__vectorT_std__pairT_int_int_t_t=0; /* handle for _p_std__vectorT_std__pairT_int_int_t_t */
static int le_swig__p_std__vectorT_std__vectorT_unsigned_int_t_t=0; /* handle for _p_std__vectorT_std__vectorT_unsigned_int_t_t */
static int le_swig__p_std__vectorT_std__vectorT_int_t_t=0; /* handle for vectorvInt */
static int le_swig__p_OpenBabel__OBAtomTyper=0; /* handle for OBAtomTyper */
static int le_swig__p_Mapping=0; /* handle for _p_Mapping */
static int le_swig__p_OpenBabel__OBMolTorsionIter=0; /* handle for OBMolTorsionIter */
static int le_swig__p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator=0; /* handle for _p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator */
static int le_swig__p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator=0; /* handle for _p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator */
static int le_swig__p_OpenBabel__OBBond=0; /* handle for OBBond */
static int le_swig__p_OpenBabel__OBRTree=0; /* handle for OBRTree */
static int le_swig__p_OpenBabel__OBAtomicHeatOfFormationTable=0; /* handle for OBAtomicHeatOfFormationTable */
static int le_swig__p_OpenBabel__OBRandom=0; /* handle for OBRandom */
static int le_swig__p_p_double=0; /* handle for _p_p_double */
static int le_swig__p_double=0; /* handle for _p_double */
static int le_swig__double=0; /* handle for _double */
static int le_swig__p_a_3__double=0; /* handle for _p_a_3__double */
static int le_swig__p_PluginMapType=0; /* handle for _p_PluginMapType */
static int le_swig__p_OpenBabel__OBRingData=0; /* handle for OBRingData */
static int le_swig__p_std__vectorT_unsigned_long_t=0; /* handle for _p_std__vectorT_unsigned_long_t */
static int le_swig__p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t=0; /* handle for _p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t */
static int le_swig__p_OpenBabel__OBBase=0; /* handle for OBBase */
static int le_swig__p_OpenBabel__OBQuery=0; /* handle for OBQuery */
static int le_swig__p_Mappings=0; /* handle for _p_Mappings */
static int le_swig__p_OpenBabel__OBQueryBond=0; /* handle for OBQueryBond */
static int le_swig__p_OpenBabel__OBConversion=0; /* handle for OBConversion */
static int le_swig__p_std__vectorT_OpenBabel__OBExternalBond_t=0; /* handle for _p_std__vectorT_OpenBabel__OBExternalBond_t */
static int le_swig__p_std__vectorT_OpenBabel__OBBond_t=0; /* handle for vectorOBBond */
static int le_swig__p_std__binary_functionT_char_const_p_char_const_p_bool_t=0; /* handle for dummy */
static int le_swig__p_OpenBabel__OBExternalBondData=0; /* handle for OBExternalBondData */
static int le_swig__p_std__vectorT_OpenBabel__OBRing_p_t=0; /* handle for vectorpOBRing */
static int le_swig__p_OpenBabel__OBSetData=0; /* handle for OBSetData */
static int le_swig__p_OpenBabel__OBResidueData=0; /* handle for OBResidueData */
static int le_swig__p_p_OpenBabel__OBChargeModel=0; /* handle for _p_p_OpenBabel__OBChargeModel */
static int le_swig__p_OpenBabel__OBChargeModel=0; /* handle for OBChargeModel */
static int le_swig__p_OpenBabel__OBStereoBase=0; /* handle for OBStereoBase */
static int le_swig__p_OpenBabel__OBFingerprint=0; /* handle for OBFingerprint */
static int le_swig__p_p_OpenBabel__OBFingerprint=0; /* handle for _p_p_OpenBabel__OBFingerprint */
static int le_swig__p_size_type=0; /* handle for _p_size_type */
static int le_swig__p_OpenBabel__OBSpectrophore=0; /* handle for OBSpectrophore */
static int le_swig__p_OpenBabel__OBAtomHOF=0; /* handle for OBAtomHOF */
static int le_swig__p_OpenBabel__OBConformerData=0; /* handle for OBConformerData */
static int le_swig__p_std__vectorT_OpenBabel__OBBond_p_t=0; /* handle for _p_std__vectorT_OpenBabel__OBBond_p_t */
static int le_swig__p_std__vectorT_OpenBabel__OBQueryBond_p_t=0; /* handle for _p_std__vectorT_OpenBabel__OBQueryBond_p_t */
static int le_swig__p_std__setT_OpenBabel__OBBond_p_t=0; /* handle for _p_std__setT_OpenBabel__OBBond_p_t */
static int le_swig__p_obsharedptrT_OpenBabel__OBMol_t=0; /* handle for _p_obsharedptrT_OpenBabel__OBMol_t */
static int le_swig__p_Unit=0; /* handle for _p_Unit */
static int le_swig__p_std__vectorT_OpenBabel__OBMol_t=0; /* handle for vectorOBMol */
static int le_swig__p_OpenBabel__LineSearchType=0; /* handle for LineSearchType */
static int le_swig__p_OpenBabel__OBMolAtomIter=0; /* handle for OBMolAtomIter */
static int le_swig__p_OpenBabel__OBAtomAtomIter=0; /* handle for OBAtomAtomIter */
static int le_swig__p_OpenBabel__OBResidueAtomIter=0; /* handle for OBResidueAtomIter */
static int le_swig__p_std__vectorT_OpenBabel__OBBase_p_t=0; /* handle for _p_std__vectorT_OpenBabel__OBBase_p_t */
static int le_swig__p_RefIter=0; /* handle for _p_RefIter */
static int le_swig__p_ConstRefIter=0; /* handle for _p_ConstRefIter */
static int le_swig__p_std__vectorT_unsigned_short_t=0; /* handle for _p_std__vectorT_unsigned_short_t */
static int le_swig__p_std__vectorT_OpenBabel__OBTorsion_t=0; /* handle for _p_std__vectorT_OpenBabel__OBTorsion_t */
static int le_swig__p_OpenBabel__OBGridData=0; /* handle for OBGridData */
static int le_swig__p_OpenBabel__OBTorsion=0; /* handle for OBTorsion */
static int le_swig__int=0; /* handle for _int */
static int le_swig__p_OpenBabel__OBGenericData=0; /* handle for OBGenericData */
static int le_swig__p_OpenBabel__OBError=0; /* handle for OBError */
static int le_swig__p_std__streampos=0; /* handle for _p_std__streampos */
static int le_swig__p_OpenBabel__OBFFCalculation2=0; /* handle for OBFFCalculation2 */
static int le_swig__p_OpenBabel__OBFFCalculation3=0; /* handle for OBFFCalculation3 */
static int le_swig__p_OpenBabel__OBFFCalculation4=0; /* handle for OBFFCalculation4 */
static int le_swig__p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t=0; /* handle for _p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t */
static int le_swig__p_OpenBabel__OBAngleData=0; /* handle for OBAngleData */
static int le_swig__p_OpenBabel__OBBuilder=0; /* handle for OBBuilder */
static int le_swig__p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t=0; /* handle for _p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t */
static int le_swig__p_OpenBabel__OBFFParameter=0; /* handle for OBFFParameter */
static int le_swig__p_OpenBabel__OBFreeGrid=0; /* handle for OBFreeGrid */
static int le_swig__p_OpenBabel__OBSerialNums=0; /* handle for OBSerialNums */
static int le_swig__p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t=0; /* handle for vectorvVector3 */
static int le_swig__p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t=0; /* handle for _p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t */
static int le_swig__p_char=0; /* handle for _p_char */
static int le_swig__p_OpenBabel__vector3=0; /* handle for vector3 */
static int le_swig__p_OpenBabel__OBElectronicTransitionData=0; /* handle for OBElectronicTransitionData */
static int le_swig__p_OpenBabel__OBRotationData=0; /* handle for OBRotationData */
static int le_swig__p_OpenBabel__OBTorsionData=0; /* handle for OBTorsionData */
static int le_swig__p_OpenBabel__OBVibrationData=0; /* handle for OBVibrationData */
static int le_swig__p_OpenBabel__OBVirtualBond=0; /* handle for OBVirtualBond */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_new_vectorInt__SWIG_0) { std::vector< int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (std::vector< int > *)new std::vector< int >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorInt__SWIG_1) { std::vector< int >::size_type arg1 ; zval **args[1];
  std::vector< int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< int >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorInt) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorInt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorInt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorInt'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorInt_size) { std::vector< int > *arg1 = (std::vector< int > *) 0 ; zval **args[1];
  std::vector< int >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorInt_size. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((std::vector< int > const *)arg1)->size(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorInt_is_empty) { std::vector< int > *arg1 = (std::vector< int > *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorInt_is_empty. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_int_Sg__is_empty((std::vector< int > const *)arg1); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorInt_get) { std::vector< int > *arg1 = (std::vector< int > *) 0 ; int arg2 ; zval **args[2];
  std::vector< int >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorInt_get. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  try { result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);}  catch(std::out_of_range &_e) {
    (void)_e; zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  {
    ZVAL_LONG(return_value,*result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorInt_set) { std::vector< int > *arg1 = (std::vector< int > *) 0 ; int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ; std::vector< int >::value_type temp3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorInt_set. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); temp3 = (std::vector< int >::value_type) Z_LVAL_PP(args[2]); ; arg3 = &temp3; try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);}  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorInt(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(int)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorUnsignedInt__SWIG_0) { std::vector< unsigned int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_int_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorUnsignedInt__SWIG_1) { std::vector< unsigned int >::size_type arg1 ; zval **args[1];
  std::vector< unsigned int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< unsigned int >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_int_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorUnsignedInt) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorUnsignedInt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorUnsignedInt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorUnsignedInt'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorUnsignedInt_size) { std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  zval **args[1]; std::vector< unsigned int >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorUnsignedInt_size. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((std::vector< unsigned int > const *)arg1)->size();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorUnsignedInt_is_empty) { std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorUnsignedInt_is_empty. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_unsigned_SS_int_Sg__is_empty((std::vector< unsigned int > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorUnsignedInt_get) { std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ; zval **args[2]; std::vector< unsigned int >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorUnsignedInt_get. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  {
    ZVAL_LONG(return_value,*result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorUnsignedInt_set) { std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ; std::vector< unsigned int >::value_type *arg3 = 0 ; std::vector< unsigned int >::value_type temp3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorUnsignedInt_set. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]);
  temp3 = (std::vector< unsigned int >::value_type) Z_LVAL_PP(args[2]); ; arg3 = &temp3; try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);}  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorUnsignedInt(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< unsigned int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_unsigned_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(unsigned int)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorvInt__SWIG_0) { std::vector< std::vector< int > > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorvInt__SWIG_1) { std::vector< std::vector< int > >::size_type arg1 ; zval **args[1];
  std::vector< std::vector< int > > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< std::vector< int > >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorvInt) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorvInt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorvInt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorvInt'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorvInt_size) { std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  zval **args[1]; std::vector< std::vector< int > >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorvInt_size. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::vector< int > > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorvInt_is_empty) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorvInt_is_empty. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg__is_empty((std::vector< std::vector< int > > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorvInt_get) { std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ; zval **args[2]; std::vector< std::vector< int > >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorvInt_get. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorvInt_set) { std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ; std::vector< std::vector< int > >::value_type *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorvInt_set. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorvInt_set. Expected SWIGTYPE_p_std__vectorT_int_t"); }  }  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(arg1,arg2,(std::vector< int > const &)*arg3);}  catch(std::out_of_range &_e) {
    (void)_e; zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorvInt(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< std::vector< int > > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(std::vector<(int)>)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorDouble__SWIG_0) { std::vector< double > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (std::vector< double > *)new std::vector< double >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorDouble__SWIG_1) { std::vector< double >::size_type arg1 ; zval **args[1];
  std::vector< double > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< double >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorDouble) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorDouble__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorDouble__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorDouble'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorDouble_size) { std::vector< double > *arg1 = (std::vector< double > *) 0 ; zval **args[1];
  std::vector< double >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorDouble_size. Expected SWIGTYPE_p_std__vectorT_double_t"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((std::vector< double > const *)arg1)->size(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorDouble_is_empty) { std::vector< double > *arg1 = (std::vector< double > *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorDouble_is_empty. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_double_Sg__is_empty((std::vector< double > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorDouble_get) { std::vector< double > *arg1 = (std::vector< double > *) 0 ; int arg2 ;
  zval **args[2]; std::vector< double >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorDouble_get. Expected SWIGTYPE_p_std__vectorT_double_t"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  try { result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  {
    ZVAL_DOUBLE(return_value,*result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorDouble_set) { std::vector< double > *arg1 = (std::vector< double > *) 0 ; int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ; std::vector< double >::value_type temp3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorDouble_set. Expected SWIGTYPE_p_std__vectorT_double_t"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_double_ex(args[2]); temp3 = (std::vector< double >::value_type) Z_DVAL_PP(args[2]); ; arg3 = &temp3; try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);}  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorDouble(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< double > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_double_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(double)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorString__SWIG_0) { std::vector< std::string > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (std::vector< std::string > *)new std::vector< std::string >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__string_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorString__SWIG_1) { std::vector< std::string >::size_type arg1 ; zval **args[1];
  std::vector< std::string > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< std::string >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__string_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorString) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorString'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorString_size) { std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1]; std::vector< std::string >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorString_size. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((std::vector< std::string > const *)arg1)->size();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorString_is_empty) { std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorString_is_empty. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_std_string_Sg__is_empty((std::vector< std::string > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorString_get) { std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; int arg2 ;
  zval **args[2]; std::vector< std::string >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorString_get. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorString_set) { std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ; std::vector< std::string >::value_type temp3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorString_set. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  arg3 = &temp3; try { std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);}  catch(std::out_of_range &_e) {
    (void)_e; zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorString(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< std::string > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_std__string_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(std::string)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorVector3__SWIG_0) { std::vector< OpenBabel::vector3 > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< OpenBabel::vector3 > *)new std::vector< OpenBabel::vector3 >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorVector3__SWIG_1) { std::vector< OpenBabel::vector3 >::size_type arg1 ; zval **args[1];
  std::vector< OpenBabel::vector3 > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< OpenBabel::vector3 >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< OpenBabel::vector3 > *)new std::vector< OpenBabel::vector3 >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorVector3) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorVector3__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorVector3__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorVector3'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorVector3_size) {
  std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ; zval **args[1];
  std::vector< OpenBabel::vector3 >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorVector3_size. Expected SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< OpenBabel::vector3 > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorVector3_is_empty) {
  std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorVector3_is_empty. Expected SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_OpenBabel_vector3_Sg__is_empty((std::vector< OpenBabel::vector3 > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorVector3_get) {
  std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ; int arg2 ; zval **args[2];
  std::vector< OpenBabel::vector3 >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorVector3_get. Expected SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< OpenBabel::vector3 >::value_type *) &std_vector_Sl_OpenBabel_vector3_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorVector3_set) {
  std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ; int arg2 ;
  std::vector< OpenBabel::vector3 >::value_type *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorVector3_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorVector3_set. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  try { std_vector_Sl_OpenBabel_vector3_Sg__set(arg1,arg2,(OpenBabel::vector3 const &)*arg3);}  catch(std::out_of_range &_e) {
    (void)_e; zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorVector3(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< OpenBabel::vector3 > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(OpenBabel::vector3)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorvVector3__SWIG_0) { std::vector< std::vector< OpenBabel::vector3 > > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< std::vector< OpenBabel::vector3 > > *)new std::vector< std::vector< OpenBabel::vector3 > >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 1); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorvVector3__SWIG_1) { std::vector< std::vector< OpenBabel::vector3 > >::size_type arg1 ;
  zval **args[1]; std::vector< std::vector< OpenBabel::vector3 > > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< std::vector< OpenBabel::vector3 > >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< std::vector< OpenBabel::vector3 > > *)new std::vector< std::vector< OpenBabel::vector3 > >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 1); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorvVector3) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorvVector3__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorvVector3__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorvVector3'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorvVector3_size) {
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ;
  zval **args[1]; std::vector< std::vector< OpenBabel::vector3 > >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorvVector3_size. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::vector< OpenBabel::vector3 > > const *)arg1)->size(); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorvVector3_is_empty) {
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorvVector3_is_empty. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__is_empty((std::vector< std::vector< OpenBabel::vector3 > > const *)arg1);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorvVector3_get) {
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ; int arg2 ;
  zval **args[2]; std::vector< std::vector< OpenBabel::vector3 > >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorvVector3_get. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< std::vector< OpenBabel::vector3 > >::value_type *) &std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorvVector3_set) {
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ; int arg2 ;
  std::vector< std::vector< OpenBabel::vector3 > >::value_type *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorvVector3_set. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorvVector3_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t"); }
     }  try {
    std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__set(arg1,arg2,(std::vector< OpenBabel::vector3 > const &)*arg3);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorvVector3(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ;
  efree(value); if (! newobject) return; 
  arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(std::vector<(OpenBabel::vector3)>)> resource already free'd"); delete arg1;
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBMol__SWIG_0) { std::vector< OpenBabel::OBMol > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< OpenBabel::OBMol > *)new std::vector< OpenBabel::OBMol >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBMol__SWIG_1) { std::vector< OpenBabel::OBMol >::size_type arg1 ; zval **args[1];
  std::vector< OpenBabel::OBMol > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< OpenBabel::OBMol >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< OpenBabel::OBMol > *)new std::vector< OpenBabel::OBMol >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBMol) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorOBMol__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorOBMol__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorOBMol'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBMol_size) { std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ;
  zval **args[1]; std::vector< OpenBabel::OBMol >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBMol_size. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< OpenBabel::OBMol > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBMol_is_empty) {
  std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBMol_is_empty. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_OpenBabel_OBMol_Sg__is_empty((std::vector< OpenBabel::OBMol > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBMol_get) { std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ;
  int arg2 ; zval **args[2]; std::vector< OpenBabel::OBMol >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBMol_get. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< OpenBabel::OBMol >::value_type *) &std_vector_Sl_OpenBabel_OBMol_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBMol_set) { std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ;
  int arg2 ; std::vector< OpenBabel::OBMol >::value_type *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBMol_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorOBMol_set. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  try {
    std_vector_Sl_OpenBabel_OBMol_Sg__set(arg1,arg2,(OpenBabel::OBMol const &)*arg3);}  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorOBMol(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< OpenBabel::OBMol > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(OpenBabel::OBMol)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBBond__SWIG_0) { std::vector< OpenBabel::OBBond > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< OpenBabel::OBBond > *)new std::vector< OpenBabel::OBBond >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBBond__SWIG_1) { std::vector< OpenBabel::OBBond >::size_type arg1 ; zval **args[1];
  std::vector< OpenBabel::OBBond > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< OpenBabel::OBBond >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< OpenBabel::OBBond > *)new std::vector< OpenBabel::OBBond >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBBond) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorOBBond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorOBBond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorOBBond'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBBond_size) { std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ;
  zval **args[1]; std::vector< OpenBabel::OBBond >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBBond_size. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< OpenBabel::OBBond > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBBond_is_empty) {
  std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBBond_is_empty. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_OpenBabel_OBBond_Sg__is_empty((std::vector< OpenBabel::OBBond > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBBond_get) { std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ;
  int arg2 ; zval **args[2]; std::vector< OpenBabel::OBBond >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBBond_get. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< OpenBabel::OBBond >::value_type *) &std_vector_Sl_OpenBabel_OBBond_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBBond_set) { std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ;
  int arg2 ; std::vector< OpenBabel::OBBond >::value_type *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBBond_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorOBBond_set. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  try { std_vector_Sl_OpenBabel_OBBond_Sg__set(arg1,arg2,(OpenBabel::OBBond const &)*arg3);}  catch(std::out_of_range &_e) {
    (void)_e; zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorOBBond(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< OpenBabel::OBBond > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(OpenBabel::OBBond)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBResidue__SWIG_0) { std::vector< OpenBabel::OBResidue > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< OpenBabel::OBResidue > *)new std::vector< OpenBabel::OBResidue >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBResidue__SWIG_1) { std::vector< OpenBabel::OBResidue >::size_type arg1 ; zval **args[1];
  std::vector< OpenBabel::OBResidue > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< OpenBabel::OBResidue >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< OpenBabel::OBResidue > *)new std::vector< OpenBabel::OBResidue >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBResidue) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorOBResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorOBResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorOBResidue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBResidue_size) {
  std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBResidue >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBResidue_size. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< OpenBabel::OBResidue > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBResidue_is_empty) {
  std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBResidue_is_empty. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_OpenBabel_OBResidue_Sg__is_empty((std::vector< OpenBabel::OBResidue > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBResidue_get) {
  std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ; int arg2 ; zval **args[2];
  std::vector< OpenBabel::OBResidue >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBResidue_get. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< OpenBabel::OBResidue >::value_type *) &std_vector_Sl_OpenBabel_OBResidue_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBResidue_set) {
  std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBResidue >::value_type *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBResidue_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorOBResidue_set. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   try { std_vector_Sl_OpenBabel_OBResidue_Sg__set(arg1,arg2,(OpenBabel::OBResidue const &)*arg3);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorOBResidue(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ; efree(value);
  if (! newobject) return; 
  arg1 = (std::vector< OpenBabel::OBResidue > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(OpenBabel::OBResidue)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBRing__SWIG_0) { std::vector< OpenBabel::OBRing > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< OpenBabel::OBRing > *)new std::vector< OpenBabel::OBRing >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBRing__SWIG_1) { std::vector< OpenBabel::OBRing >::size_type arg1 ; zval **args[1];
  std::vector< OpenBabel::OBRing > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< OpenBabel::OBRing >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< OpenBabel::OBRing > *)new std::vector< OpenBabel::OBRing >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorOBRing) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorOBRing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorOBRing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorOBRing'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBRing_size) { std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ;
  zval **args[1]; std::vector< OpenBabel::OBRing >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBRing_size. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< OpenBabel::OBRing > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBRing_is_empty) {
  std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBRing_is_empty. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_OpenBabel_OBRing_Sg__is_empty((std::vector< OpenBabel::OBRing > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBRing_get) { std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ;
  int arg2 ; zval **args[2]; std::vector< OpenBabel::OBRing >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBRing_get. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< OpenBabel::OBRing >::value_type *) &std_vector_Sl_OpenBabel_OBRing_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorOBRing_set) { std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ;
  int arg2 ; std::vector< OpenBabel::OBRing >::value_type *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorOBRing_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorOBRing_set. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  try { std_vector_Sl_OpenBabel_OBRing_Sg__set(arg1,arg2,(OpenBabel::OBRing const &)*arg3);}  catch(std::out_of_range &_e) {
    (void)_e; zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorOBRing(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< OpenBabel::OBRing > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(OpenBabel::OBRing)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBRing__SWIG_0) { std::vector< OpenBabel::OBRing * > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< OpenBabel::OBRing * > *)new std::vector< OpenBabel::OBRing * >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBRing__SWIG_1) { std::vector< OpenBabel::OBRing * >::size_type arg1 ; zval **args[1];
  std::vector< OpenBabel::OBRing * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< OpenBabel::OBRing * >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< OpenBabel::OBRing * > *)new std::vector< OpenBabel::OBRing * >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBRing) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorpOBRing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorpOBRing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorpOBRing'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBRing_size) {
  std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBRing * >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBRing_size. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< OpenBabel::OBRing * > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBRing_is_empty) {
  std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBRing_is_empty. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_OpenBabel_OBRing_Sm__Sg__is_empty((std::vector< OpenBabel::OBRing * > const *)arg1); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBRing_get) {
  std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ; int arg2 ; zval **args[2];
  std::vector< OpenBabel::OBRing * >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBRing_get. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< OpenBabel::OBRing * >::value_type *) &std_vector_Sl_OpenBabel_OBRing_Sm__Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)*result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBRing_set) {
  std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBRing * >::value_type *arg3 = 0 ; std::vector< OpenBabel::OBRing * >::value_type temp3 ;
  zval **args[3]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBRing_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; { if(SWIG_ConvertPtr(*args[2], (void **) &temp3, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorpOBRing_set. Expected SWIGTYPE_p_OpenBabel__OBRing"); } 
    arg3 = (std::vector< OpenBabel::OBRing * >::value_type *)&temp3; }  try {
    std_vector_Sl_OpenBabel_OBRing_Sm__Sg__set(arg1,arg2,(OpenBabel::OBRing *const &)*arg3);}  catch(std::out_of_range &_e) {
    (void)_e; zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorpOBRing(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::vector< OpenBabel::OBRing * > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(p.OpenBabel::OBRing)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBGenericData__SWIG_0) { std::vector< OpenBabel::OBGenericData * > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< OpenBabel::OBGenericData * > *)new std::vector< OpenBabel::OBGenericData * >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBGenericData__SWIG_1) { std::vector< OpenBabel::OBGenericData * >::size_type arg1 ;
  zval **args[1]; std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< OpenBabel::OBGenericData * >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< OpenBabel::OBGenericData * > *)new std::vector< OpenBabel::OBGenericData * >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBGenericData) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorpOBGenericData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorpOBGenericData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorpOBGenericData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBGenericData_size) {
  std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBGenericData * >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBGenericData_size. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< OpenBabel::OBGenericData * > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBGenericData_is_empty) {
  std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBGenericData_is_empty. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__is_empty((std::vector< OpenBabel::OBGenericData * > const *)arg1);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBGenericData_get) {
  std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ; int arg2 ; zval **args[2];
  std::vector< OpenBabel::OBGenericData * >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBGenericData_get. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< OpenBabel::OBGenericData * >::value_type *) &std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)*result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBGenericData_set) {
  std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBGenericData * >::value_type *arg3 = 0 ;
  std::vector< OpenBabel::OBGenericData * >::value_type temp3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBGenericData_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &temp3, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorpOBGenericData_set. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     arg3 = (std::vector< OpenBabel::OBGenericData * >::value_type *)&temp3; }  try {
    std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__set(arg1,arg2,(OpenBabel::OBGenericData *const &)*arg3);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorpOBGenericData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ; efree(value);
  if (! newobject) return; 
  arg1 = (std::vector< OpenBabel::OBGenericData * > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(p.OpenBabel::OBGenericData)> resource already free'd"); delete arg1; return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBInternalCoord__SWIG_0) { std::vector< OpenBabel::OBInternalCoord * > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< OpenBabel::OBInternalCoord * > *)new std::vector< OpenBabel::OBInternalCoord * >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBInternalCoord__SWIG_1) { std::vector< OpenBabel::OBInternalCoord * >::size_type arg1 ;
  zval **args[1]; std::vector< OpenBabel::OBInternalCoord * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< OpenBabel::OBInternalCoord * >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< OpenBabel::OBInternalCoord * > *)new std::vector< OpenBabel::OBInternalCoord * >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vectorpOBInternalCoord) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vectorpOBInternalCoord__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vectorpOBInternalCoord__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vectorpOBInternalCoord'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBInternalCoord_size) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBInternalCoord * >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBInternalCoord_size. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< OpenBabel::OBInternalCoord * > const *)arg1)->size(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBInternalCoord_is_empty) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBInternalCoord_is_empty. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__is_empty((std::vector< OpenBabel::OBInternalCoord * > const *)arg1);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBInternalCoord_get) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ; int arg2 ;
  zval **args[2]; std::vector< OpenBabel::OBInternalCoord * >::value_type *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBInternalCoord_get. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< OpenBabel::OBInternalCoord * >::value_type *) &std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)*result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorpOBInternalCoord_set) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBInternalCoord * >::value_type *arg3 = 0 ;
  std::vector< OpenBabel::OBInternalCoord * >::value_type temp3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorpOBInternalCoord_set. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &temp3, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vectorpOBInternalCoord_set. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     arg3 = (std::vector< OpenBabel::OBInternalCoord * >::value_type *)&temp3; }  try {
    std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__set(arg1,arg2,(OpenBabel::OBInternalCoord *const &)*arg3);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vectorpOBInternalCoord(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ; efree(value);
  if (! newobject) return; 
  arg1 = (std::vector< OpenBabel::OBInternalCoord * > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(p.OpenBabel::OBInternalCoord)> resource already free'd"); delete arg1; return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_pairUIntUInt__SWIG_0) { std::pair< unsigned int,unsigned int > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::pair< unsigned int,unsigned int > *)new std::pair< unsigned int,unsigned int >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_pairUIntUInt__SWIG_1) { unsigned int arg1 ; unsigned int arg2 ; zval **args[2];
  std::pair< unsigned int,unsigned int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (unsigned int) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;
  result = (std::pair< unsigned int,unsigned int > *)new std::pair< unsigned int,unsigned int >(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_pairUIntUInt__SWIG_2) { std::pair< unsigned int,unsigned int > *arg1 = 0 ; zval **args[1];
  std::pair< unsigned int,unsigned int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_pairUIntUInt. Expected SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t"); }
     } 
  result = (std::pair< unsigned int,unsigned int > *)new std::pair< unsigned int,unsigned int >((std::pair< unsigned int,unsigned int > const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_pairUIntUInt) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_pairUIntUInt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_pairUIntUInt__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_pairUIntUInt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_pairUIntUInt'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_pairUIntUInt_first_set) {
  std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pairUIntUInt_first_set. Expected SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->first = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_pairUIntUInt_first_get) {
  std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pairUIntUInt_first_get. Expected SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int) ((arg1)->first); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_pairUIntUInt_second_set) {
  std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pairUIntUInt_second_set. Expected SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->second = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_pairUIntUInt_second_get) {
  std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pairUIntUInt_second_get. Expected SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int) ((arg1)->second); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_pairUIntUInt(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ; efree(value);
  if (! newobject) return; 
  arg1 = (std::pair< unsigned int,unsigned int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::pair<(unsigned int,unsigned int)> resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vpairUIntUInt__SWIG_0) { std::vector< std::pair< unsigned int,unsigned int > > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< std::pair< unsigned int,unsigned int > > *)new std::vector< std::pair< unsigned int,unsigned int > >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 1);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vpairUIntUInt__SWIG_1) { std::vector< std::pair< unsigned int,unsigned int > >::size_type arg1 ;
  zval **args[1]; std::vector< std::pair< unsigned int,unsigned int > > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (std::vector< std::pair< unsigned int,unsigned int > >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< std::pair< unsigned int,unsigned int > > *)new std::vector< std::pair< unsigned int,unsigned int > >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 1);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vpairUIntUInt) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vpairUIntUInt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vpairUIntUInt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vpairUIntUInt'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vpairUIntUInt_size) {
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  zval **args[1]; std::vector< std::pair< unsigned int,unsigned int > >::size_type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vpairUIntUInt_size. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::pair< unsigned int,unsigned int > > const *)arg1)->size(); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vpairUIntUInt_is_empty) {
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vpairUIntUInt_is_empty. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__is_empty((std::vector< std::pair< unsigned int,unsigned int > > const *)arg1);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vpairUIntUInt_get) {
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  int arg2 ; zval **args[2]; std::vector< std::pair< unsigned int,unsigned int > >::value_type *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vpairUIntUInt_get. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< std::pair< unsigned int,unsigned int > >::value_type *) &std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vpairUIntUInt_set) {
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  int arg2 ; std::vector< std::pair< unsigned int,unsigned int > >::value_type *arg3 = 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vpairUIntUInt_set. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vpairUIntUInt_set. Expected SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t"); }
     }  try {
    std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__set(arg1,arg2,(std::pair< unsigned int,unsigned int > const &)*arg3);}
   catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vpairUIntUInt(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  efree(value); if (! newobject) return; 
  arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(std::pair<(unsigned int,unsigned int)>)> resource already free'd"); delete arg1;
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vvpairUIntUInt__SWIG_0) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *)new std::vector< std::vector< std::pair< unsigned int,unsigned int > > >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 1);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vvpairUIntUInt__SWIG_1) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type arg1 ; zval **args[1];
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type) Z_LVAL_PP(args[0]); ;
  result = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *)new std::vector< std::vector< std::pair< unsigned int,unsigned int > > >(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 1);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vvpairUIntUInt) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_vvpairUIntUInt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_vvpairUIntUInt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vvpairUIntUInt'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_size) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  zval **args[1]; std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_size. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const *)arg1)->size(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_capacity) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  zval **args[1]; std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_capacity. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const *)arg1)->capacity(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_reserve) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_reserve. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type) Z_LVAL_PP(args[1]); ;
  (arg1)->reserve(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_clear) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_clear. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_push) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_push. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vvpairUIntUInt_push. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }  (arg1)->push_back((std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type const &)*arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_is_empty) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_is_empty. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__is_empty((std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const *)arg1);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_pop) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  zval **args[1]; std::vector< std::pair< unsigned int,unsigned int > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_pop. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); try {
    result = std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__pop(arg1);} 
  catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  {
    std::vector< std::pair< unsigned int,unsigned int > > * resultobj = new std::vector< std::pair< unsigned int,unsigned int > >((const std::vector< std::pair< unsigned int,unsigned int > > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 1); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_get) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  int arg2 ; zval **args[2]; std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_get. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; try {
    result = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; } 
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vvpairUIntUInt_set) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  int arg2 ; std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *arg3 = 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vvpairUIntUInt_set. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of vvpairUIntUInt_set. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }  try {
    std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__set(arg1,arg2,(std::vector< std::pair< unsigned int,unsigned int > > const &)*arg3);}
   catch(std::out_of_range &_e) { (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC); return; }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vvpairUIntUInt(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  efree(value); if (! newobject) return; 
  arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)> resource already free'd");
  delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toAliasData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::AliasData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toAliasData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::AliasData *)toAliasData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__AliasData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toAngleData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBAngleData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toAngleData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBAngleData *)toAngleData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAngleData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toAtomClassData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBAtomClassData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toAtomClassData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  }
   result = (OpenBabel::OBAtomClassData *)toAtomClassData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomClassData, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toChiralData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBChiralData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toChiralData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBChiralData *)toChiralData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBChiralData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toCommentData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBCommentData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toCommentData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBCommentData *)toCommentData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBCommentData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toConformerData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBConformerData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toConformerData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  }
   result = (OpenBabel::OBConformerData *)toConformerData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConformerData, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toExternalBondData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  zval **args[1]; OpenBabel::OBExternalBondData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toExternalBondData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  result = (OpenBabel::OBExternalBondData *)toExternalBondData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBExternalBondData, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toGridData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBGridData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toGridData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBGridData *)toGridData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGridData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toMatrixData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBMatrixData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toMatrixData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBMatrixData *)toMatrixData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMatrixData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toNasaThermoData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBNasaThermoData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toNasaThermoData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  }
   result = (OpenBabel::OBNasaThermoData *)toNasaThermoData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBNasaThermoData, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toPairData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBPairData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toPairData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBPairData *)toPairData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBPairData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toRateData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBRateData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toRateData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBRateData *)toRateData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRateData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toRotamerList) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBRotamerList *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toRotamerList. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBRotamerList *)toRotamerList(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotamerList, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toRotationData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBRotationData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toRotationData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBRotationData *)toRotationData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotationData, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toSerialNums) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBSerialNums *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toSerialNums. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBSerialNums *)toSerialNums(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSerialNums, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toSetData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBSetData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toSetData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBSetData *)toSetData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSetData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toSymmetryData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBSymmetryData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toSymmetryData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBSymmetryData *)toSymmetryData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSymmetryData, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toTorsionData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBTorsionData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toTorsionData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBTorsionData *)toTorsionData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBTorsionData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toUnitCell) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBUnitCell *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toUnitCell. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBUnitCell *)toUnitCell(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBUnitCell, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toVectorData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBVectorData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toVectorData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBVectorData *)toVectorData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBVectorData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toVibrationData) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBVibrationData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toVibrationData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  }
   result = (OpenBabel::OBVibrationData *)toVibrationData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBVibrationData, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_toVirtualBond) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; zval **args[1];
  OpenBabel::OBVirtualBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toVirtualBond. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  } 
  result = (OpenBabel::OBVirtualBond *)toVirtualBond(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBVirtualBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGlobalDataBase) { OpenBabel::OBGlobalDataBase *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBGlobalDataBase *)new OpenBabel::OBGlobalDataBase();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBGlobalDataBase(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBGlobalDataBase *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBGlobalDataBase TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBGlobalDataBase resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGlobalDataBase_Init) { OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGlobalDataBase_Init. Expected SWIGTYPE_p_OpenBabel__OBGlobalDataBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Init(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGlobalDataBase_GetSize) { OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGlobalDataBase_GetSize. Expected SWIGTYPE_p_OpenBabel__OBGlobalDataBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGlobalDataBase_SetReadDirectory) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGlobalDataBase_SetReadDirectory. Expected SWIGTYPE_p_OpenBabel__OBGlobalDataBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetReadDirectory(arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGlobalDataBase_SetEnvironmentVariable) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGlobalDataBase_SetEnvironmentVariable. Expected SWIGTYPE_p_OpenBabel__OBGlobalDataBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetEnvironmentVariable(arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGlobalDataBase_ParseLine) { OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGlobalDataBase_ParseLine. Expected SWIGTYPE_p_OpenBabel__OBGlobalDataBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->ParseLine((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBElement__SWIG_0) { OpenBabel::OBElement *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBElement *)new OpenBabel::OBElement();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBElement, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBElement__SWIG_1) { int arg1 ; char *arg2 = (char *) 0 ; double arg3 ; double arg4 ;
  double arg5 ; int arg6 ; double arg7 ; double arg8 ; double arg9 ; double arg10 ; double arg11 ; double arg12 ; double arg13 ;
  std::string arg14 ; zval **args[14]; OpenBabel::OBElement *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 14 || zend_get_parameters_array_ex(14, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  convert_to_double_ex(args[2]);
  arg3 = (double) Z_DVAL_PP(args[2]); ;  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; 
  convert_to_double_ex(args[4]); arg5 = (double) Z_DVAL_PP(args[4]); ;  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]); ;  convert_to_double_ex(args[6]); arg7 = (double) Z_DVAL_PP(args[6]); ; 
  convert_to_double_ex(args[7]); arg8 = (double) Z_DVAL_PP(args[7]); ;  convert_to_double_ex(args[8]);
  arg9 = (double) Z_DVAL_PP(args[8]); ;  convert_to_double_ex(args[9]); arg10 = (double) Z_DVAL_PP(args[9]); ; 
  convert_to_double_ex(args[10]); arg11 = (double) Z_DVAL_PP(args[10]); ;  convert_to_double_ex(args[11]);
  arg12 = (double) Z_DVAL_PP(args[11]); ;  convert_to_double_ex(args[12]); arg13 = (double) Z_DVAL_PP(args[12]); ;
  convert_to_string_ex(args[13]); (&arg14)->assign(Z_STRVAL_PP(args[13]), Z_STRLEN_PP(args[13]));
  result = (OpenBabel::OBElement *)new OpenBabel::OBElement(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBElement, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBElement) { int argc; zval **argv[14]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBElement__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 14) {
    _wrap_new_OBElement__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBElement'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetAtomicNum) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBElement"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetAtomicNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetSymbol) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetSymbol. Expected SWIGTYPE_p_OpenBabel__OBElement"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(arg1)->GetSymbol(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetCovalentRad) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetCovalentRad. Expected SWIGTYPE_p_OpenBabel__OBElement"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetCovalentRad(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetVdwRad) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetVdwRad. Expected SWIGTYPE_p_OpenBabel__OBElement"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetVdwRad(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetMass) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetMass. Expected SWIGTYPE_p_OpenBabel__OBElement"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetMaxBonds) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetMaxBonds. Expected SWIGTYPE_p_OpenBabel__OBElement"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetMaxBonds(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetElectroNeg) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetElectroNeg. Expected SWIGTYPE_p_OpenBabel__OBElement"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetElectroNeg(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetAllredRochowElectroNeg) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetAllredRochowElectroNeg. Expected SWIGTYPE_p_OpenBabel__OBElement"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetAllredRochowElectroNeg(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetIonization) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetIonization. Expected SWIGTYPE_p_OpenBabel__OBElement"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetIonization(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetElectronAffinity) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetElectronAffinity. Expected SWIGTYPE_p_OpenBabel__OBElement"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetElectronAffinity(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetName) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetName. Expected SWIGTYPE_p_OpenBabel__OBElement"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetName();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetRed) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetRed. Expected SWIGTYPE_p_OpenBabel__OBElement"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetRed(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetGreen) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetGreen. Expected SWIGTYPE_p_OpenBabel__OBElement"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetGreen(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElement_GetBlue) { OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElement, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElement_GetBlue. Expected SWIGTYPE_p_OpenBabel__OBElement"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetBlue(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBElement(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBElement *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBElement TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBElement resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBElementTable) { OpenBabel::OBElementTable *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBElementTable *)new OpenBabel::OBElementTable();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBElementTable, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBElementTable(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBElementTable *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBElementTable TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBElementTable resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetNumberOfElements) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetNumberOfElements. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetNumberOfElements(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetAtomicNum__SWIG_0) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; char *arg2 = (char *) 0 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (int)(arg1)->GetAtomicNum((char const *)arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetAtomicNum__SWIG_1) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; char *arg2 = (char *) 0 ; int *arg3 = 0 ; zval **args[3];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBElementTable_GetAtomicNum. Expected SWIGTYPE_p_int"); }  } 
  result = (int)(arg1)->GetAtomicNum((char const *)arg2,*arg3); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetAtomicNum__SWIG_2) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; std::string arg2 ; int *arg3 = 0 ; zval **args[3];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBElementTable_GetAtomicNum. Expected SWIGTYPE_p_int"); }  } 
  result = (int)(arg1)->GetAtomicNum(arg2,*arg3); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetAtomicNum) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBElementTable_GetAtomicNum__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBElementTable_GetAtomicNum__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 3) {
    _wrap_OBElementTable_GetAtomicNum__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBElementTable_GetAtomicNum'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetSymbol) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetSymbol. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (char *)(arg1)->GetSymbol(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetVdwRad) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetVdwRad. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->GetVdwRad(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetCovalentRad) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetCovalentRad. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->GetCovalentRad(arg2); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetMass) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetMass. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->GetMass(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_CorrectedBondRad__SWIG_0) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; int arg2 ; int arg3 ; zval **args[3]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_CorrectedBondRad. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (double)(arg1)->CorrectedBondRad(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_CorrectedBondRad__SWIG_1) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_CorrectedBondRad. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->CorrectedBondRad(arg2); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_CorrectedBondRad) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBElementTable_CorrectedBondRad__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBElementTable_CorrectedBondRad__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBElementTable_CorrectedBondRad'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_CorrectedVdwRad__SWIG_0) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; int arg2 ; int arg3 ; zval **args[3]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_CorrectedVdwRad. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (double)(arg1)->CorrectedVdwRad(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_CorrectedVdwRad__SWIG_1) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_CorrectedVdwRad. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->CorrectedVdwRad(arg2); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_CorrectedVdwRad) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBElementTable_CorrectedVdwRad__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBElementTable_CorrectedVdwRad__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBElementTable_CorrectedVdwRad'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetMaxBonds) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetMaxBonds. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)(arg1)->GetMaxBonds(arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetElectroNeg) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetElectroNeg. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->GetElectroNeg(arg2); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetAllredRochowElectroNeg) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetAllredRochowElectroNeg. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->GetAllredRochowElectroNeg(arg2); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetIonization) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetIonization. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->GetIonization(arg2); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetElectronAffinity) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetElectronAffinity. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->GetElectronAffinity(arg2); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetRGB) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetRGB. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (arg1)->GetRGB(arg2); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElementTable_GetName) { OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElementTable_GetName. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (arg1)->GetName(arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBIsotopeTable) { OpenBabel::OBIsotopeTable *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBIsotopeTable *)new OpenBabel::OBIsotopeTable();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBIsotopeTable, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBIsotopeTable(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBIsotopeTable *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBIsotopeTable TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBIsotopeTable resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsotopeTable_GetExactMass__SWIG_0) {
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ; unsigned int arg2 ; unsigned int arg3 ; zval **args[3];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsotopeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsotopeTable_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBIsotopeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  result = (double)(arg1)->GetExactMass(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsotopeTable_GetExactMass__SWIG_1) {
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ; unsigned int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsotopeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsotopeTable_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBIsotopeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->GetExactMass(arg2); { ZVAL_DOUBLE(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsotopeTable_GetExactMass) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBIsotopeTable_GetExactMass__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBIsotopeTable_GetExactMass__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBIsotopeTable_GetExactMass'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomHOF) { std::string arg1 ; int arg2 ; std::string arg3 ; std::string arg4 ; double arg5 ;
  double arg6 ; int arg7 ; std::string arg8 ; zval **args[8]; OpenBabel::OBAtomHOF *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 8 || zend_get_parameters_array_ex(8, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; convert_to_string_ex(args[2]); (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  convert_to_string_ex(args[3]); (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));  convert_to_double_ex(args[4]);
  arg5 = (double) Z_DVAL_PP(args[4]); ;  convert_to_double_ex(args[5]); arg6 = (double) Z_DVAL_PP(args[5]); ; 
  convert_to_long_ex(args[6]); arg7 = (int) Z_LVAL_PP(args[6]); ; convert_to_string_ex(args[7]);
  (&arg8)->assign(Z_STRVAL_PP(args[7]), Z_STRLEN_PP(args[7]));
  result = (OpenBabel::OBAtomHOF *)new OpenBabel::OBAtomHOF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomHOF, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAtomHOF(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAtomHOF *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAtomHOF TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAtomHOF resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomHOF_Element) { OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomHOF, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomHOF_Element. Expected SWIGTYPE_p_OpenBabel__OBAtomHOF"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->Element();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomHOF_Charge) { OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomHOF, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomHOF_Charge. Expected SWIGTYPE_p_OpenBabel__OBAtomHOF"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->Charge(); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomHOF_Method) { OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomHOF, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomHOF_Method. Expected SWIGTYPE_p_OpenBabel__OBAtomHOF"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->Method();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomHOF_Desc) { OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomHOF, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomHOF_Desc. Expected SWIGTYPE_p_OpenBabel__OBAtomHOF"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->Desc();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomHOF_T) { OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomHOF, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomHOF_T. Expected SWIGTYPE_p_OpenBabel__OBAtomHOF"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->T(); { ZVAL_DOUBLE(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomHOF_Value) { OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomHOF, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomHOF_Value. Expected SWIGTYPE_p_OpenBabel__OBAtomHOF"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->Value(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomHOF_Multiplicity) { OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomHOF, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomHOF_Multiplicity. Expected SWIGTYPE_p_OpenBabel__OBAtomHOF"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->Multiplicity(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomHOF_Unit) { OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomHOF, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomHOF_Unit. Expected SWIGTYPE_p_OpenBabel__OBAtomHOF"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->Unit();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomicHeatOfFormationTable) { OpenBabel::OBAtomicHeatOfFormationTable *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (OpenBabel::OBAtomicHeatOfFormationTable *)new OpenBabel::OBAtomicHeatOfFormationTable();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomicHeatOfFormationTable, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAtomicHeatOfFormationTable(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAtomicHeatOfFormationTable *arg1 = (OpenBabel::OBAtomicHeatOfFormationTable *) 0 ; efree(value);
  if (! newobject) return; 
  arg1 = (OpenBabel::OBAtomicHeatOfFormationTable *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAtomicHeatOfFormationTable TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAtomicHeatOfFormationTable resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomicHeatOfFormationTable_GetHeatOfFormation) {
  OpenBabel::OBAtomicHeatOfFormationTable *arg1 = (OpenBabel::OBAtomicHeatOfFormationTable *) 0 ; std::string arg2 ; int arg3 ;
  std::string arg4 ; double arg5 ; double *arg6 = (double *) 0 ; double *arg7 = (double *) 0 ; double *arg8 = (double *) 0 ;
  zval **args[8]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 8 || zend_get_parameters_array_ex(8, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomicHeatOfFormationTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomicHeatOfFormationTable_GetHeatOfFormation. Expected SWIGTYPE_p_OpenBabel__OBAtomicHeatOfFormationTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  convert_to_string_ex(args[3]); (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));  convert_to_double_ex(args[4]);
  arg5 = (double) Z_DVAL_PP(args[4]); ; { if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of OBAtomicHeatOfFormationTable_GetHeatOfFormation. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[6], (void **) &arg7, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 7 of OBAtomicHeatOfFormationTable_GetHeatOfFormation. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[7], (void **) &arg8, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 8 of OBAtomicHeatOfFormationTable_GetHeatOfFormation. Expected SWIGTYPE_p_double"); }
     }  result = (int)(arg1)->GetHeatOfFormation(arg2,arg3,arg4,arg5,arg6,arg7,arg8); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBTypeTable) { OpenBabel::OBTypeTable *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBTypeTable *)new OpenBabel::OBTypeTable();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBTypeTable, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBTypeTable(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBTypeTable *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBTypeTable TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBTypeTable resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTypeTable_SetFromType) { OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTypeTable_SetFromType. Expected SWIGTYPE_p_OpenBabel__OBTypeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(arg1)->SetFromType((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTypeTable_SetToType) { OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTypeTable_SetToType. Expected SWIGTYPE_p_OpenBabel__OBTypeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(arg1)->SetToType((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTypeTable_Translate__SWIG_0) { OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ; char *arg3 = (char *) 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTypeTable_Translate. Expected SWIGTYPE_p_OpenBabel__OBTypeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;
  result = (bool)(arg1)->Translate(arg2,(char const *)arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTypeTable_Translate__SWIG_1) { OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string temp2 ; std::string temp3 ; zval **args[3]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTypeTable_Translate. Expected SWIGTYPE_p_OpenBabel__OBTypeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  result = (bool)(arg1)->Translate(*arg2,(std::string const &)*arg3); { ZVAL_BOOL(return_value,(result)?1:0); } 
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTypeTable_Translate__SWIG_2) { OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTypeTable_Translate. Expected SWIGTYPE_p_OpenBabel__OBTypeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (arg1)->Translate((std::string const &)*arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTypeTable_Translate) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBTypeTable_Translate__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__string, 0) >= 0); } }  if (!_v) goto check_2; {
      _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_2;
    _wrap_OBTypeTable_Translate__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 3) {
    _wrap_OBTypeTable_Translate__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBTypeTable_Translate'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTypeTable_GetFromType) { OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTypeTable_GetFromType. Expected SWIGTYPE_p_OpenBabel__OBTypeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetFromType();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTypeTable_GetToType) { OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTypeTable_GetToType. Expected SWIGTYPE_p_OpenBabel__OBTypeTable"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetToType();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueData) { OpenBabel::OBResidueData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBResidueData *)new OpenBabel::OBResidueData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidueData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueData_SetResName) { OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueData_SetResName. Expected SWIGTYPE_p_OpenBabel__OBResidueData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(arg1)->SetResName((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueData_LookupBO__SWIG_0) { OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueData_LookupBO. Expected SWIGTYPE_p_OpenBabel__OBResidueData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (int)(arg1)->LookupBO((std::string const &)*arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueData_LookupBO__SWIG_1) { OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string temp2 ; std::string temp3 ; zval **args[3]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueData_LookupBO. Expected SWIGTYPE_p_OpenBabel__OBResidueData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  result = (int)(arg1)->LookupBO((std::string const &)*arg2,(std::string const &)*arg3); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueData_LookupBO) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBResidueData_LookupBO__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBResidueData_LookupBO__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueData_LookupBO'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueData_LookupType) { OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ; std::string *arg3 = 0 ; int *arg4 = 0 ; std::string temp2 ; std::string temp3 ; zval **args[4];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueData_LookupType. Expected SWIGTYPE_p_OpenBabel__OBResidueData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3; {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_int, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBResidueData_LookupType. Expected SWIGTYPE_p_int"); }  } 
  result = (bool)(arg1)->LookupType((std::string const &)*arg2,*arg3,*arg4); { ZVAL_BOOL(return_value,(result)?1:0); } 
  ZVAL_STRINGL(*(args[2]), const_cast<char*>(arg3->data()), arg3->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueData_AssignBonds) { OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; OpenBabel::OBBitVec *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueData_AssignBonds. Expected SWIGTYPE_p_OpenBabel__OBResidueData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueData_AssignBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBResidueData_AssignBonds. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  result = (bool)(arg1)->AssignBonds(*arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBResidueData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBResidueData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBResidueData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBResidueData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_DoubleType_hi_set) { OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__DoubleType, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleType_hi_set. Expected SWIGTYPE_p_OpenBabel__DoubleType"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->hi = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_DoubleType_hi_get) { OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__DoubleType, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleType_hi_get. Expected SWIGTYPE_p_OpenBabel__DoubleType"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int) ((arg1)->hi); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_DoubleType_lo_set) { OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__DoubleType, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleType_lo_set. Expected SWIGTYPE_p_OpenBabel__DoubleType"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->lo = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_DoubleType_lo_get) { OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__DoubleType, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleType_lo_get. Expected SWIGTYPE_p_OpenBabel__DoubleType"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int) ((arg1)->lo); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_DoubleType) { OpenBabel::DoubleType *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::DoubleType *)new OpenBabel::DoubleType();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__DoubleType, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_DoubleType(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::DoubleType *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__DoubleType TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::DoubleType resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_DoubleMultiply) { unsigned int arg1 ; unsigned int arg2 ;
  OpenBabel::DoubleType *arg3 = (OpenBabel::DoubleType *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (unsigned int) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__DoubleType, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of DoubleMultiply. Expected SWIGTYPE_p_OpenBabel__DoubleType"); }  } 
  OpenBabel::DoubleMultiply(arg1,arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_DoubleAdd) { OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__DoubleType, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleAdd. Expected SWIGTYPE_p_OpenBabel__DoubleType"); }  }  
  convert_to_long_ex(args[1]); arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; OpenBabel::DoubleAdd(arg1,arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_DoubleModulus) { OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ; unsigned int arg2 ;
  zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__DoubleType, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleModulus. Expected SWIGTYPE_p_OpenBabel__DoubleType"); }  }  
  convert_to_long_ex(args[1]); arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;
  result = (unsigned int)OpenBabel::DoubleModulus(arg1,arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRandom__SWIG_0) { bool arg1 ; zval **args[1]; OpenBabel::OBRandom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_boolean_ex(args[0]); arg1 = (bool) Z_LVAL_PP(args[0]); ;
  result = (OpenBabel::OBRandom *)new OpenBabel::OBRandom(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRandom, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRandom__SWIG_1) { OpenBabel::OBRandom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRandom *)new OpenBabel::OBRandom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRandom, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRandom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBRandom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBRandom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBRandom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRandom_Seed) { OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRandom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRandom_Seed. Expected SWIGTYPE_p_OpenBabel__OBRandom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->Seed(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRandom_TimeSeed) { OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRandom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRandom_TimeSeed. Expected SWIGTYPE_p_OpenBabel__OBRandom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->TimeSeed(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRandom_NextInt) { OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRandom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRandom_NextInt. Expected SWIGTYPE_p_OpenBabel__OBRandom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->NextInt(); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRandom_NextFloat) { OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRandom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRandom_NextFloat. Expected SWIGTYPE_p_OpenBabel__OBRandom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->NextFloat(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRandom(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRandom *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRandom TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRandom resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStopwatch_Start) { OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStopwatch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStopwatch_Start. Expected SWIGTYPE_p_OpenBabel__OBStopwatch"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Start(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStopwatch_Lap) { OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStopwatch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStopwatch_Lap. Expected SWIGTYPE_p_OpenBabel__OBStopwatch"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->Lap(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStopwatch_Elapsed) { OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStopwatch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStopwatch_Elapsed. Expected SWIGTYPE_p_OpenBabel__OBStopwatch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->Elapsed(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStopwatch) { OpenBabel::OBStopwatch *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBStopwatch *)new OpenBabel::OBStopwatch();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBStopwatch, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBStopwatch(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBStopwatch *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBStopwatch TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBStopwatch resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSqrtTbl__SWIG_0) { OpenBabel::OBSqrtTbl *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBSqrtTbl *)new OpenBabel::OBSqrtTbl();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSqrtTbl, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSqrtTbl__SWIG_1) { double arg1 ; double arg2 ; zval **args[2];
  OpenBabel::OBSqrtTbl *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_double_ex(args[0]); arg1 = (double) Z_DVAL_PP(args[0]); ;  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; result = (OpenBabel::OBSqrtTbl *)new OpenBabel::OBSqrtTbl(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSqrtTbl, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSqrtTbl) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBSqrtTbl__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBSqrtTbl__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBSqrtTbl'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBSqrtTbl(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBSqrtTbl *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBSqrtTbl TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBSqrtTbl resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSqrtTbl_Sqrt) { OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ; double arg2 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSqrtTbl, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSqrtTbl_Sqrt. Expected SWIGTYPE_p_OpenBabel__OBSqrtTbl"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; result = (double)((OpenBabel::OBSqrtTbl const *)arg1)->Sqrt(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSqrtTbl_Init) { OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ; double arg2 ;
  double arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSqrtTbl, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSqrtTbl_Init. Expected SWIGTYPE_p_OpenBabel__OBSqrtTbl"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; (arg1)->Init(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_rotate_coords) { double *arg1 = (double *) 0 ; double (*arg2)[3] ; unsigned int arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rotate_coords. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_a_3__double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of rotate_coords. Expected SWIGTYPE_p_a_3__double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  OpenBabel::rotate_coords(arg1,(double (*)[3])arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_calc_rms) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; unsigned int arg3 ;
  zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of calc_rms. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of calc_rms. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; result = (double)OpenBabel::calc_rms(arg1,arg2,arg3);
  { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vector3__SWIG_0) { double arg1 ; double arg2 ; double arg3 ; zval **args[3];
  OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_double_ex(args[0]); arg1 = (double) Z_DVAL_PP(args[0]); ;  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vector3__SWIG_1) { double arg1 ; double arg2 ; zval **args[2]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_double_ex(args[0]); arg1 = (double) Z_DVAL_PP(args[0]); ;  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vector3__SWIG_2) { double arg1 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_double_ex(args[0]); arg1 = (double) Z_DVAL_PP(args[0]); ;
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vector3__SWIG_3) { OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::vector3 *)new OpenBabel::vector3();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vector3__SWIG_4) { double *arg1 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_vector3. Expected SWIGTYPE_p_double"); }  } 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vector3__SWIG_5) { OpenBabel::vector3 *arg1 = 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_vector3. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3((OpenBabel::vector3 const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_vector3) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) { _wrap_new_vector3__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}
   if (argc == 1) { int _v = 0; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_double, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_new_vector3__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    int _v = 0; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_3; _wrap_new_vector3__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 1) {
    _wrap_new_vector3__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_vector3__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_vector3__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_vector3'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_vector3(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::vector3 *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__vector3 TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::vector3 resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_begin__SWIG_0) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  OpenBabel::vector3::iterator result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_begin. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3::iterator)(arg1)->begin();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_end__SWIG_0) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  OpenBabel::vector3::iterator result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_end. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3::iterator)(arg1)->end();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_begin__SWIG_1) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  OpenBabel::vector3::const_iterator result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_begin. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::vector3::const_iterator)((OpenBabel::vector3 const *)arg1)->begin();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_begin) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_vector3_begin__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_vector3_begin__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vector3_begin'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_end__SWIG_1) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  OpenBabel::vector3::const_iterator result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_end. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::vector3::const_iterator)((OpenBabel::vector3 const *)arg1)->end();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_end) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { _wrap_vector3_end__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}
   if (argc == 1) { _wrap_vector3_end__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vector3_end'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_Set__SWIG_0) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double arg2 ;
  double arg3 ; double arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_Set. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;  convert_to_double_ex(args[3]);
  arg4 = (double) Z_DVAL_PP(args[3]); ; (arg1)->Set(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_Set__SWIG_1) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_Set. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vector3_Set. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->Set((double const *)arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_Set) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { _wrap_vector3_Set__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}
   if (argc == 4) { _wrap_vector3_Set__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vector3_Set'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_SetX) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_SetX. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; (arg1)->SetX(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_SetY) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_SetY. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; (arg1)->SetY(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_SetZ) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_SetZ. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; (arg1)->SetZ(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_GetX) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_GetX. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::vector3 const *)arg1)->GetX(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_GetY) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_GetY. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::vector3 const *)arg1)->GetY(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_GetZ) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_GetZ. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::vector3 const *)arg1)->GetZ(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_Get) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double *arg2 = (double *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_Get. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vector3_Get. Expected SWIGTYPE_p_double"); }  }  (arg1)->Get(arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_AsArray) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_AsArray. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)((OpenBabel::vector3 const *)arg1)->AsArray();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_add__SWIG_0) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_add. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vector3_add. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (OpenBabel::vector3 *) &(arg1)->operator +=((OpenBabel::vector3 const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_add__SWIG_1) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_add. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vector3_add. Expected SWIGTYPE_p_double"); }  } 
  result = (OpenBabel::vector3 *) &(arg1)->operator +=((double const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_add) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_vector3_add__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_vector3_add__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vector3_add'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_randomUnitVector__SWIG_0) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::OBRandom *arg2 = (OpenBabel::OBRandom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_randomUnitVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBRandom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vector3_randomUnitVector. Expected SWIGTYPE_p_OpenBabel__OBRandom"); }
     }  (arg1)->randomUnitVector(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_randomUnitVector__SWIG_1) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_randomUnitVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->randomUnitVector(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_randomUnitVector) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_vector3_randomUnitVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_vector3_randomUnitVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vector3_randomUnitVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_normalize) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_normalize. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(arg1)->normalize();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_CanBeNormalized) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_CanBeNormalized. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::vector3 const *)arg1)->CanBeNormalized(); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_length_2) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_length_2. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::vector3 const *)arg1)->length_2(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_length) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_length. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::vector3 const *)arg1)->length(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_x__SWIG_0) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_x. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) &((OpenBabel::vector3 const *)arg1)->x(); {
    ZVAL_DOUBLE(return_value,*result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_y__SWIG_0) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_y. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) &((OpenBabel::vector3 const *)arg1)->y(); {
    ZVAL_DOUBLE(return_value,*result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_z__SWIG_0) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_z. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) &((OpenBabel::vector3 const *)arg1)->z(); {
    ZVAL_DOUBLE(return_value,*result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_x__SWIG_1) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_x. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) &(arg1)->x();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_x) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { _wrap_vector3_x__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  if (argc == 1) { _wrap_vector3_x__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vector3_x'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_y__SWIG_1) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_y. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) &(arg1)->y();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_y) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { _wrap_vector3_y__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  if (argc == 1) { _wrap_vector3_y__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vector3_y'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_z__SWIG_1) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_z. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) &(arg1)->z();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_z) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { _wrap_vector3_z__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  if (argc == 1) { _wrap_vector3_z__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vector3_z'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_IsApprox) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; double *arg3 = 0 ; double temp3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_IsApprox. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vector3_IsApprox. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  
  convert_to_double_ex(args[2]); temp3 = (double) Z_DVAL_PP(args[2]); ; arg3 = &temp3;
  result = (bool)((OpenBabel::vector3 const *)arg1)->IsApprox((OpenBabel::vector3 const &)*arg2,(double const &)*arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_distSq) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_distSq. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vector3_distSq. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (double)((OpenBabel::vector3 const *)arg1)->distSq((OpenBabel::vector3 const &)*arg2); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vector3_createOrthoVector) { OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vector3_createOrthoVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vector3_createOrthoVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (bool)((OpenBabel::vector3 const *)arg1)->createOrthoVector(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_dot) { OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dot. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of dot. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (double)OpenBabel::dot((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_cross) { OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; zval **args[2];
  OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of cross. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of cross. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = OpenBabel::cross((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_vectorAngle) { OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; zval **args[2];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vectorAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of vectorAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (double)OpenBabel::vectorAngle((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CalcTorsionAngle) { OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CalcTorsionAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CalcTorsionAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of CalcTorsionAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of CalcTorsionAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (double)OpenBabel::CalcTorsionAngle((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2,(OpenBabel::vector3 const &)*arg3,(OpenBabel::vector3 const &)*arg4);
  { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_Point2PlaneSigned) { OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ; OpenBabel::vector3 *tmp1 ; OpenBabel::vector3 *tmp2 ; OpenBabel::vector3 *tmp3 ;
  OpenBabel::vector3 *tmp4 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Point2PlaneSigned. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg1 = *tmp1; }  { if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Point2PlaneSigned. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  { if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Point2PlaneSigned. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg3 = *tmp3; }  { if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of Point2PlaneSigned. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg4 = *tmp4; }  result = (double)OpenBabel::Point2PlaneSigned(arg1,arg2,arg3,arg4); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_Point2Plane) { OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ; OpenBabel::vector3 *tmp1 ; OpenBabel::vector3 *tmp2 ; OpenBabel::vector3 *tmp3 ;
  OpenBabel::vector3 *tmp4 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Point2Plane. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg1 = *tmp1; }  { if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Point2Plane. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  { if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Point2Plane. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg3 = *tmp3; }  { if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of Point2Plane. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg4 = *tmp4; }  result = (double)OpenBabel::Point2Plane(arg1,arg2,arg3,arg4); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_Point2PlaneAngle) { OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ; OpenBabel::vector3 *tmp1 ; OpenBabel::vector3 *tmp2 ; OpenBabel::vector3 *tmp3 ;
  OpenBabel::vector3 *tmp4 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Point2PlaneAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg1 = *tmp1; }  { if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Point2PlaneAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  { if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Point2PlaneAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg3 = *tmp3; }  { if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of Point2PlaneAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg4 = *tmp4; }  result = (double)OpenBabel::Point2PlaneAngle(arg1,arg2,arg3,arg4); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_Point2Line) { OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Point2Line. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Point2Line. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Point2Line. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (double)OpenBabel::Point2Line((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2,(OpenBabel::vector3 const &)*arg3);
  { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_VZero_get) { OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::vector3 *) &OpenBabel::VZero;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_VX_get) { OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::vector3 *) &OpenBabel::VX;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_VY_get) { OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::vector3 *) &OpenBabel::VY;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_VZ_get) { OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::vector3 *) &OpenBabel::VZ;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_matrix3x3__SWIG_0) { OpenBabel::matrix3x3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__matrix3x3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_matrix3x3__SWIG_1) { double arg1 ; zval **args[1]; OpenBabel::matrix3x3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_double_ex(args[0]); arg1 = (double) Z_DVAL_PP(args[0]); ;
  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__matrix3x3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_matrix3x3__SWIG_2) { OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 *tmp1 ; OpenBabel::vector3 *tmp2 ; OpenBabel::vector3 *tmp3 ; zval **args[3];
  OpenBabel::matrix3x3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_matrix3x3. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg1 = *tmp1; }  { if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_matrix3x3. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  { if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_matrix3x3. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg3 = *tmp3; }  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__matrix3x3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_matrix3x3__SWIG_3) { double (*arg1)[3] ; zval **args[1]; OpenBabel::matrix3x3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_a_3__double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_matrix3x3. Expected SWIGTYPE_p_a_3__double"); }  } 
  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3((double (*)[3])arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__matrix3x3, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_matrix3x3) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_matrix3x3__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_a_3__double, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_matrix3x3__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_matrix3x3__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_matrix3x3__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_matrix3x3'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_matrix3x3(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::matrix3x3 *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__matrix3x3 TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::matrix3x3 resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_GetArray) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_GetArray. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of matrix3x3_GetArray. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->GetArray(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_inverse) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; zval **args[1];
  OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_inverse. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::matrix3x3 const *)arg1)->inverse(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_transpose) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; zval **args[1];
  OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_transpose. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::matrix3x3 const *)arg1)->transpose(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_randomRotation) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::OBRandom *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_randomRotation. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBRandom, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of matrix3x3_randomRotation. Expected SWIGTYPE_p_OpenBabel__OBRandom"); }
     }  (arg1)->randomRotation(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_determinant) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_determinant. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::matrix3x3 const *)arg1)->determinant(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_isSymmetric) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_isSymmetric. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isSymmetric(); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_isOrthogonal) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_isOrthogonal. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isOrthogonal(); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_isDiagonal) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_isDiagonal. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isDiagonal();
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_isUnitMatrix) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_isUnitMatrix. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isUnitMatrix(); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_Get) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; int arg2 ; int arg3 ;
  zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_Get. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (double)((OpenBabel::matrix3x3 const *)arg1)->Get(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_Set) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; int arg2 ; int arg3 ;
  double arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_Set. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_double_ex(args[3]);
  arg4 = (double) Z_DVAL_PP(args[3]); ; (arg1)->Set(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_SetColumn) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; int arg2 ;
  OpenBabel::vector3 *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_SetColumn. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of matrix3x3_SetColumn. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  (arg1)->SetColumn(arg2,(OpenBabel::vector3 const &)*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_SetRow) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; int arg2 ;
  OpenBabel::vector3 *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_SetRow. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of matrix3x3_SetRow. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  (arg1)->SetRow(arg2,(OpenBabel::vector3 const &)*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_GetColumn) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; unsigned int arg2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_GetColumn. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = ((OpenBabel::matrix3x3 const *)arg1)->GetColumn(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_GetRow) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; unsigned int arg2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_GetRow. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = ((OpenBabel::matrix3x3 const *)arg1)->GetRow(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_SetupRotMat) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; double arg2 ;
  double arg3 ; double arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_SetupRotMat. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (arg1)->SetupRotMat(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_PlaneReflection) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_PlaneReflection. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of matrix3x3_PlaneReflection. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  (arg1)->PlaneReflection((OpenBabel::vector3 const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_RotAboutAxisByAngle) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; double arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_RotAboutAxisByAngle. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of matrix3x3_RotAboutAxisByAngle. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  (arg1)->RotAboutAxisByAngle((OpenBabel::vector3 const &)*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_FillOrth) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; double arg2 ;
  double arg3 ; double arg4 ; double arg5 ; double arg6 ; double arg7 ; zval **args[7]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_FillOrth. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;  convert_to_double_ex(args[3]);
  arg4 = (double) Z_DVAL_PP(args[3]); ;  convert_to_double_ex(args[4]); arg5 = (double) Z_DVAL_PP(args[4]); ; 
  convert_to_double_ex(args[5]); arg6 = (double) Z_DVAL_PP(args[5]); ;  convert_to_double_ex(args[6]);
  arg7 = (double) Z_DVAL_PP(args[6]); ; (arg1)->FillOrth(arg2,arg3,arg4,arg5,arg6,arg7); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_findEigenvectorsIfSymmetric) { OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of matrix3x3_findEigenvectorsIfSymmetric. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of matrix3x3_findEigenvectorsIfSymmetric. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = ((OpenBabel::matrix3x3 const *)arg1)->findEigenvectorsIfSymmetric(*arg2); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_matrix3x3_jacobi) { unsigned int arg1 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (unsigned int) Z_LVAL_PP(args[0]); ; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of matrix3x3_jacobi. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of matrix3x3_jacobi. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of matrix3x3_jacobi. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::matrix3x3::jacobi(arg1,arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_transform3d__SWIG_0) { OpenBabel::transform3d *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::transform3d *)new OpenBabel::transform3d();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__transform3d, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_transform3d__SWIG_1) { OpenBabel::matrix3x3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ;
  zval **args[2]; OpenBabel::transform3d *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_transform3d. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_transform3d. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (OpenBabel::transform3d *)new OpenBabel::transform3d((OpenBabel::matrix3x3 const &)*arg1,(OpenBabel::vector3 const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__transform3d, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_transform3d__SWIG_2) { double arg1 ; zval **args[1]; OpenBabel::transform3d *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_double_ex(args[0]); arg1 = (double) Z_DVAL_PP(args[0]); ;
  result = (OpenBabel::transform3d *)new OpenBabel::transform3d(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__transform3d, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_transform3d__SWIG_3) { OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ; OpenBabel::vector3 arg4 ; OpenBabel::vector3 *tmp1 ; OpenBabel::vector3 *tmp2 ;
  OpenBabel::vector3 *tmp3 ; OpenBabel::vector3 *tmp4 ; zval **args[4]; OpenBabel::transform3d *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_transform3d. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg1 = *tmp1; }  { if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_transform3d. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  { if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_transform3d. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg3 = *tmp3; }  { if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_transform3d. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg4 = *tmp4; }  result = (OpenBabel::transform3d *)new OpenBabel::transform3d(arg1,arg2,arg3,arg4);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__transform3d, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_transform3d__SWIG_4) { double (*arg1)[3] ; double *arg2 ; zval **args[2];
  OpenBabel::transform3d *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_a_3__double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_transform3d. Expected SWIGTYPE_p_a_3__double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_transform3d. Expected SWIGTYPE_p_double"); }  } 
  result = (OpenBabel::transform3d *)new OpenBabel::transform3d((double (*)[3])arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__transform3d, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_transform3d) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_transform3d__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_transform3d__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__matrix3x3, 0) >= 0); } }  if (!_v) goto check_3; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_3; _wrap_new_transform3d__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_new_transform3d__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_new_transform3d__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_transform3d'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_transform3d_DescribeAsString) { OpenBabel::transform3d *arg1 = (OpenBabel::transform3d *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__transform3d, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of transform3d_DescribeAsString. Expected SWIGTYPE_p_OpenBabel__transform3d"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::transform3d const *)arg1)->DescribeAsString();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_transform3d_DescribeAsValues) { OpenBabel::transform3d *arg1 = (OpenBabel::transform3d *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__transform3d, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of transform3d_DescribeAsValues. Expected SWIGTYPE_p_OpenBabel__transform3d"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::transform3d const *)arg1)->DescribeAsValues();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_transform3d_Normalize) { OpenBabel::transform3d *arg1 = (OpenBabel::transform3d *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__transform3d, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of transform3d_Normalize. Expected SWIGTYPE_p_OpenBabel__transform3d"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Normalize(); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_transform3d(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::transform3d *arg1 = (OpenBabel::transform3d *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::transform3d *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__transform3d TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::transform3d resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_SpaceGroup) { OpenBabel::SpaceGroup *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::SpaceGroup *)new OpenBabel::SpaceGroup();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__SpaceGroup, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_SpaceGroup(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::SpaceGroup *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__SpaceGroup TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::SpaceGroup resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_SetHMName__SWIG_0) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_SetHMName. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetHMName((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_SetHMName__SWIG_1) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_SetHMName. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetHMName((std::string const &)*arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_SetHMName) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_SpaceGroup_SetHMName__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_SpaceGroup_SetHMName__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'SpaceGroup_SetHMName'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_SetHallName__SWIG_0) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_SetHallName. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetHallName((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_SetHallName__SWIG_1) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_SetHallName. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetHallName((std::string const &)*arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_SetHallName) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_SpaceGroup_SetHallName__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_SpaceGroup_SetHallName__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'SpaceGroup_SetHallName'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_SetId) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_SetId. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_AddTransform) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_AddTransform. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->AddTransform((std::string const &)*arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_GetHMName) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; zval **args[1];
  std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_GetHMName. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) &((OpenBabel::SpaceGroup const *)arg1)->GetHMName();
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_GetHallName) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; zval **args[1];
  std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_GetHallName. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) &((OpenBabel::SpaceGroup const *)arg1)->GetHallName();
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_GetId) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_GetId. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::SpaceGroup const *)arg1)->GetId(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_GetOriginAlternative) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_GetOriginAlternative. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::SpaceGroup const *)arg1)->GetOriginAlternative(); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_Transform) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SwigValueWrapper< std::list< OpenBabel::vector3 > > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_Transform. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SpaceGroup_Transform. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = ((OpenBabel::SpaceGroup const *)arg1)->Transform((OpenBabel::vector3 const &)*arg2); {
    std::list< OpenBabel::vector3 > * resultobj = new std::list< OpenBabel::vector3 >((const std::list< OpenBabel::vector3 > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__listT_OpenBabel__vector3_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_BeginTransform) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  OpenBabel::transform3dIterator *arg2 = 0 ; zval **args[2]; OpenBabel::transform3d *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_BeginTransform. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__listT_OpenBabel__transform3d_p_t__const_iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SpaceGroup_BeginTransform. Expected SWIGTYPE_p_std__listT_OpenBabel__transform3d_p_t__const_iterator"); }
     }  result = (OpenBabel::transform3d *)((OpenBabel::SpaceGroup const *)arg1)->BeginTransform(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__transform3d, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_NextTransform) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ;
  OpenBabel::transform3dIterator *arg2 = 0 ; zval **args[2]; OpenBabel::transform3d *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_NextTransform. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__listT_OpenBabel__transform3d_p_t__const_iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SpaceGroup_NextTransform. Expected SWIGTYPE_p_std__listT_OpenBabel__transform3d_p_t__const_iterator"); }
     }  result = (OpenBabel::transform3d *)((OpenBabel::SpaceGroup const *)arg1)->NextTransform(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__transform3d, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_GetSpaceGroup__SWIG_0) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::SpaceGroup *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::SpaceGroup *)OpenBabel::SpaceGroup::GetSpaceGroup((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__SpaceGroup, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_GetSpaceGroup__SWIG_1) { std::string *arg1 = 0 ; std::string temp1 ; zval **args[1];
  OpenBabel::SpaceGroup *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  result = (OpenBabel::SpaceGroup *)OpenBabel::SpaceGroup::GetSpaceGroup((std::string const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__SpaceGroup, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_GetSpaceGroup__SWIG_2) { unsigned int arg1 ; zval **args[1];
  OpenBabel::SpaceGroup *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (unsigned int) Z_LVAL_PP(args[0]); ;
  result = (OpenBabel::SpaceGroup *)OpenBabel::SpaceGroup::GetSpaceGroup(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__SpaceGroup, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_GetSpaceGroup) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { int _v = 0; { _v = (Z_TYPE_PP(argv[0]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_SpaceGroup_GetSpaceGroup__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 1) { int _v = 0; { _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_2;
    _wrap_SpaceGroup_GetSpaceGroup__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_SpaceGroup_GetSpaceGroup__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'SpaceGroup_GetSpaceGroup'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_Find) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; zval **args[1];
  OpenBabel::SpaceGroup *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_Find. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }  } 
  result = (OpenBabel::SpaceGroup *)OpenBabel::SpaceGroup::Find(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__SpaceGroup, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SpaceGroup_IsValid) { OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpaceGroup_IsValid. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::SpaceGroup const *)arg1)->IsValid(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReleaseVersion) { std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = OpenBabel::OBReleaseVersion();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGenericData__SWIG_0) { std::string arg1 ; unsigned int arg2 ; OpenBabel::DataOrigin arg3 ;
  zval **args[3]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[2]); ;
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGenericData__SWIG_1) { std::string arg1 ; unsigned int arg2 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGenericData__SWIG_2) { std::string arg1 ; zval **args[1]; OpenBabel::OBGenericData *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGenericData__SWIG_3) { OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGenericData) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBGenericData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBGenericData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBGenericData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_OBGenericData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBGenericData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGenericData_c_Clone) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGenericData_c_Clone. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGenericData_c_Clone. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBGenericData const *)arg1)->Clone(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBGenericData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBGenericData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBGenericData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBGenericData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGenericData_SetAttribute) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGenericData_SetAttribute. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetAttribute((std::string const &)*arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGenericData_SetOrigin) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::DataOrigin arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGenericData_SetOrigin. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; (arg1)->SetOrigin(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGenericData_GetAttribute) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGenericData_GetAttribute. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) &((OpenBabel::OBGenericData const *)arg1)->GetAttribute();
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGenericData_GetDataType) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGenericData_GetDataType. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBGenericData const *)arg1)->GetDataType(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGenericData_GetValue) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGenericData_GetValue. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) &((OpenBabel::OBGenericData const *)arg1)->GetValue();
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGenericData_GetOrigin) { OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  zval **args[1]; OpenBabel::DataOrigin result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGenericData_GetOrigin. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::DataOrigin)((OpenBabel::OBGenericData const *)arg1)->GetOrigin(); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBBase(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBBase *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBBase TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBBase resource already free'd"); delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_Clear) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_Clear. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_DoTransformations) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBase_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBBase_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_ClassDescription) { char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (char *)OpenBabel::OBBase::ClassDescription(); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetTitle__SWIG_0) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; bool arg2 ;
  zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (char *)((OpenBabel::OBBase const *)arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }  else {
      ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetTitle__SWIG_1) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)((OpenBabel::OBBase const *)arg1)->GetTitle(); {
    if(!result) { ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBase_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBBase_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBase_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_SetTitle) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; char *arg2 = (char *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetTitle((char const *)arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_HasData__SWIG_0) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_HasData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_HasData__SWIG_1) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_HasData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_HasData__SWIG_2) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; unsigned int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_HasData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBBase_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBBase_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBBase_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBase_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_DeleteData__SWIG_0) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_DeleteData__SWIG_1) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBase_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_DeleteData__SWIG_2) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBase_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_DeleteData__SWIG_3) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBBase_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; { {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBBase_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBBase_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBBase_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBase_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_CloneData) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_CloneData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBase_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }  }
   (arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_DataSize) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; zval **args[1]; size_t result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_DataSize. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBBase const *)arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetData__SWIG_0) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; unsigned int arg2 ;
  zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_GetData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetData__SWIG_1) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_GetData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetData__SWIG_2) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_GetData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetAllData) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; unsigned int arg2 ;
  zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetData__SWIG_3) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_GetData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetData__SWIG_4) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::DataOrigin arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_GetData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBase_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBBase_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBBase_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBBase_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBBase_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBase_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_BeginData) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_BeginData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBase_EndData) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBase_EndData. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBBase) { OpenBabel::OBBase *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::OBBase *)new OpenBabel::OBBase();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBCommentData__SWIG_0) { OpenBabel::OBCommentData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBCommentData *)new OpenBabel::OBCommentData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBCommentData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBCommentData__SWIG_1) { OpenBabel::OBCommentData *arg1 = 0 ; zval **args[1];
  OpenBabel::OBCommentData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBCommentData, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBCommentData. Expected SWIGTYPE_p_OpenBabel__OBCommentData"); }
     }  result = (OpenBabel::OBCommentData *)new OpenBabel::OBCommentData((OpenBabel::OBCommentData const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBCommentData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBCommentData) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBCommentData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBCommentData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBCommentData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBCommentData_SetData__SWIG_0) { OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBCommentData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBCommentData_SetData. Expected SWIGTYPE_p_OpenBabel__OBCommentData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetData((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBCommentData_SetData__SWIG_1) { OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBCommentData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBCommentData_SetData. Expected SWIGTYPE_p_OpenBabel__OBCommentData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetData((char const *)arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBCommentData_SetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; } 
    if (!_v) goto check_1; _wrap_OBCommentData_SetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBCommentData_SetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBCommentData_SetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBCommentData_GetData) { OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBCommentData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBCommentData_GetData. Expected SWIGTYPE_p_OpenBabel__OBCommentData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) &((OpenBabel::OBCommentData const *)arg1)->GetData();
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBCommentData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBCommentData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBCommentData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBCommentData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBExternalBond__SWIG_0) { OpenBabel::OBExternalBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBExternalBond, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBExternalBond__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; int arg3 ; zval **args[3]; OpenBabel::OBExternalBond *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBExternalBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBExternalBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBExternalBond, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBExternalBond__SWIG_2) { OpenBabel::OBExternalBond *arg1 = 0 ; zval **args[1];
  OpenBabel::OBExternalBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBond, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBExternalBond. Expected SWIGTYPE_p_OpenBabel__OBExternalBond"); }
     }  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond((OpenBabel::OBExternalBond const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBExternalBond, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBExternalBond) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBExternalBond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBExternalBond__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_OBExternalBond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBExternalBond'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBExternalBond(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBExternalBond *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBExternalBond TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBExternalBond resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBExternalBond_GetIdx) { OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBExternalBond_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBExternalBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBExternalBond const *)arg1)->GetIdx(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBExternalBond_GetAtom) { OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBExternalBond_GetAtom. Expected SWIGTYPE_p_OpenBabel__OBExternalBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBExternalBond const *)arg1)->GetAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBExternalBond_GetBond) { OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  zval **args[1]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBExternalBond_GetBond. Expected SWIGTYPE_p_OpenBabel__OBExternalBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBBond *)((OpenBabel::OBExternalBond const *)arg1)->GetBond();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBExternalBond_SetIdx) { OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBExternalBond_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBExternalBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBExternalBond_SetAtom) { OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBExternalBond_SetAtom. Expected SWIGTYPE_p_OpenBabel__OBExternalBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBExternalBond_SetAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   (arg1)->SetAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBExternalBond_SetBond) { OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBExternalBond_SetBond. Expected SWIGTYPE_p_OpenBabel__OBExternalBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBExternalBond_SetBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }
   (arg1)->SetBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBExternalBondData) { OpenBabel::OBExternalBondData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (OpenBabel::OBExternalBondData *)new OpenBabel::OBExternalBondData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBExternalBondData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBExternalBondData_SetData) {
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; int arg4 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBondData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBExternalBondData_SetData. Expected SWIGTYPE_p_OpenBabel__OBExternalBondData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBExternalBondData_SetData. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBExternalBondData_SetData. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }   convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->SetData(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBExternalBondData_GetData) {
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBExternalBond > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBExternalBondData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBExternalBondData_GetData. Expected SWIGTYPE_p_OpenBabel__OBExternalBondData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBExternalBond > *)(arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBExternalBond_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBExternalBondData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBExternalBondData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBExternalBondData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBExternalBondData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBPairData) { OpenBabel::OBPairData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBPairData *)new OpenBabel::OBPairData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBPairData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPairData_SetValue__SWIG_0) { OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPairData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPairData_SetValue. Expected SWIGTYPE_p_OpenBabel__OBPairData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetValue((char const *)arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPairData_SetValue__SWIG_1) { OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPairData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPairData_SetValue. Expected SWIGTYPE_p_OpenBabel__OBPairData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetValue((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPairData_SetValue) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBPairData_SetValue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBPairData_SetValue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBPairData_SetValue'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBPairData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBPairData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBPairData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBPairData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSetData) { OpenBabel::OBSetData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBSetData *)new OpenBabel::OBSetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSetData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_AddData) { OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSetData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSetData_AddData. Expected SWIGTYPE_p_OpenBabel__OBSetData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSetData_AddData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (arg1)->AddData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_SetData) { OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSetData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSetData_SetData. Expected SWIGTYPE_p_OpenBabel__OBSetData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSetData_SetData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (arg1)->SetData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_GetData__SWIG_0) { OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSetData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSetData_GetData. Expected SWIGTYPE_p_OpenBabel__OBSetData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_GetData__SWIG_1) { OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSetData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSetData_GetData. Expected SWIGTYPE_p_OpenBabel__OBSetData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_GetData__SWIG_2) { OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSetData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSetData_GetData. Expected SWIGTYPE_p_OpenBabel__OBSetData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &((OpenBabel::OBSetData const *)arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBSetData_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_2;
    _wrap_OBSetData_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBSetData_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSetData_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_GetBegin) { OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSetData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSetData_GetBegin. Expected SWIGTYPE_p_OpenBabel__OBSetData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetBegin(); {
    std::vector< OpenBabel::OBGenericData * >::iterator * resultobj = new std::vector< OpenBabel::OBGenericData * >::iterator((const std::vector< OpenBabel::OBGenericData * >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_GetEnd) { OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSetData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSetData_GetEnd. Expected SWIGTYPE_p_OpenBabel__OBSetData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetEnd(); {
    std::vector< OpenBabel::OBGenericData * >::iterator * resultobj = new std::vector< OpenBabel::OBGenericData * >::iterator((const std::vector< OpenBabel::OBGenericData * >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSetData_DeleteData) { OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSetData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSetData_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBSetData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSetData_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBSetData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBSetData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBSetData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBSetData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBVirtualBond__SWIG_0) { OpenBabel::OBVirtualBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBVirtualBond, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBVirtualBond__SWIG_1) { int arg1 ; int arg2 ; int arg3 ; int arg4 ; zval **args[4];
  OpenBabel::OBVirtualBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]);
  ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]); ; result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(arg1,arg2,arg3,arg4);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBVirtualBond, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBVirtualBond__SWIG_2) { int arg1 ; int arg2 ; int arg3 ; zval **args[3];
  OpenBabel::OBVirtualBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]);
  ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBVirtualBond, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBVirtualBond) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBVirtualBond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_OBVirtualBond__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_new_OBVirtualBond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBVirtualBond'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVirtualBond_GetBgn) { OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVirtualBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVirtualBond_GetBgn. Expected SWIGTYPE_p_OpenBabel__OBVirtualBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetBgn(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVirtualBond_GetEnd) { OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVirtualBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVirtualBond_GetEnd. Expected SWIGTYPE_p_OpenBabel__OBVirtualBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetEnd(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVirtualBond_GetOrder) { OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVirtualBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVirtualBond_GetOrder. Expected SWIGTYPE_p_OpenBabel__OBVirtualBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVirtualBond_GetStereo) { OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVirtualBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVirtualBond_GetStereo. Expected SWIGTYPE_p_OpenBabel__OBVirtualBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetStereo(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBVirtualBond(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBVirtualBond *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBVirtualBond TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBVirtualBond resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRingData__SWIG_0) { OpenBabel::OBRingData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRingData *)new OpenBabel::OBRingData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRingData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRingData__SWIG_1) { OpenBabel::OBRingData *arg1 = 0 ; zval **args[1];
  OpenBabel::OBRingData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingData, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBRingData. Expected SWIGTYPE_p_OpenBabel__OBRingData"); }  } 
  result = (OpenBabel::OBRingData *)new OpenBabel::OBRingData((OpenBabel::OBRingData const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRingData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRingData) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBRingData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBRingData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBRingData'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRingData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRingData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRingData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRingData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingData_SetData) { OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector< OpenBabel::OBRing * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingData_SetData. Expected SWIGTYPE_p_OpenBabel__OBRingData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRingData_SetData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t"); }
     }  (arg1)->SetData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingData_PushBack) { OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  OpenBabel::OBRing *arg2 = (OpenBabel::OBRing *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingData_PushBack. Expected SWIGTYPE_p_OpenBabel__OBRingData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRingData_PushBack. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  (arg1)->PushBack(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingData_GetData) { OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBRing * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingData_GetData. Expected SWIGTYPE_p_OpenBabel__OBRingData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBRing * > *) &(arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingData_BeginRings) { OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBRing * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingData_BeginRings. Expected SWIGTYPE_p_OpenBabel__OBRingData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginRings(); {
    std::vector< OpenBabel::OBRing * >::iterator * resultobj = new std::vector< OpenBabel::OBRing * >::iterator((const std::vector< OpenBabel::OBRing * >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingData_EndRings) { OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBRing * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingData_EndRings. Expected SWIGTYPE_p_OpenBabel__OBRingData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndRings(); {
    std::vector< OpenBabel::OBRing * >::iterator * resultobj = new std::vector< OpenBabel::OBRing * >::iterator((const std::vector< OpenBabel::OBRing * >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingData_BeginRing) { OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector< OpenBabel::OBRing * >::iterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBRing *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingData_BeginRing. Expected SWIGTYPE_p_OpenBabel__OBRingData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRingData_BeginRing. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator"); }
     }  result = (OpenBabel::OBRing *)(arg1)->BeginRing(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingData_NextRing) { OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector< OpenBabel::OBRing * >::iterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBRing *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingData_NextRing. Expected SWIGTYPE_p_OpenBabel__OBRingData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRingData_NextRing. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator"); }
     }  result = (OpenBabel::OBRing *)(arg1)->NextRing(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBUnitCell__SWIG_0) { OpenBabel::OBUnitCell *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBUnitCell *)new OpenBabel::OBUnitCell();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBUnitCell, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBUnitCell__SWIG_1) { OpenBabel::OBUnitCell *arg1 = 0 ; zval **args[1];
  OpenBabel::OBUnitCell *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBUnitCell. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  } 
  result = (OpenBabel::OBUnitCell *)new OpenBabel::OBUnitCell((OpenBabel::OBUnitCell const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBUnitCell, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBUnitCell) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBUnitCell__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBUnitCell__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBUnitCell'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBUnitCell(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBUnitCell *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBUnitCell TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBUnitCell resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetData__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; double arg6 ; double arg7 ; zval **args[7]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_SetData. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;  convert_to_double_ex(args[4]);
  arg5 = (double) Z_DVAL_PP(args[4]); ;  convert_to_double_ex(args[5]); arg6 = (double) Z_DVAL_PP(args[5]); ; 
  convert_to_double_ex(args[6]); arg7 = (double) Z_DVAL_PP(args[6]); ; (arg1)->SetData(arg2,arg3,arg4,arg5,arg6,arg7); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetData__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ; OpenBabel::vector3 arg4 ; OpenBabel::vector3 *tmp2 ;
  OpenBabel::vector3 *tmp3 ; OpenBabel::vector3 *tmp4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_SetData. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_SetData. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  { if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBUnitCell_SetData. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg3 = *tmp3; }  { if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBUnitCell_SetData. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg4 = *tmp4; }  (arg1)->SetData(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetData__SWIG_2) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::matrix3x3 arg2 ; OpenBabel::matrix3x3 *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_SetData. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_SetData. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); } 
    arg2 = *tmp2; }  (arg1)->SetData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetData) { int argc; zval **argv[7]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBUnitCell_SetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBUnitCell_SetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 7) {
    _wrap_OBUnitCell_SetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_SetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetOffset) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_SetOffset. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_SetOffset. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  (arg1)->SetOffset(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetSpaceGroup__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::SpaceGroup *arg2 = (OpenBabel::SpaceGroup *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_SetSpaceGroup. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_SetSpaceGroup. Expected SWIGTYPE_p_OpenBabel__SpaceGroup"); }
     }  (arg1)->SetSpaceGroup((OpenBabel::SpaceGroup const *)arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetSpaceGroup__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_SetSpaceGroup. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (arg1)->SetSpaceGroup(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetSpaceGroup__SWIG_2) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_SetSpaceGroup. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetSpaceGroup(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetSpaceGroup) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__SpaceGroup, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBUnitCell_SetSpaceGroup__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBUnitCell_SetSpaceGroup__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBUnitCell_SetSpaceGroup__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_SetSpaceGroup'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_SetLatticeType) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::OBUnitCell::LatticeType arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_SetLatticeType. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBUnitCell::LatticeType) Z_LVAL_PP(args[1]); ; (arg1)->SetLatticeType(arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_FillUnitCell) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_FillUnitCell. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_FillUnitCell. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   (arg1)->FillUnitCell(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetA__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetA. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetA(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetA__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetA. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBUnitCell const *)arg1)->GetA(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetA) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetA__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetA__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetA'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetB__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetB. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetB(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetB__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetB. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBUnitCell const *)arg1)->GetB(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetB) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetB__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetB__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetB'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetC__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetC. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetC(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetC__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetC. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBUnitCell const *)arg1)->GetC(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetC) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetC__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetC__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetC'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetAlpha__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetAlpha. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetAlpha(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetAlpha__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetAlpha. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBUnitCell const *)arg1)->GetAlpha(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetAlpha) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetAlpha__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetAlpha__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetAlpha'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetBeta__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetBeta. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetBeta(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetBeta__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetBeta. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBUnitCell const *)arg1)->GetBeta();
  { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetBeta) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetBeta__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetBeta__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetBeta'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetGamma__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetGamma. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetGamma(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetGamma__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetGamma. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBUnitCell const *)arg1)->GetGamma(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetGamma) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetGamma__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetGamma__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetGamma'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOffset__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetOffset. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetOffset(); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOffset__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetOffset. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBUnitCell const *)arg1)->GetOffset();
  { OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOffset) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetOffset__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetOffset__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetOffset'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroup__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::SpaceGroup *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetSpaceGroup. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::SpaceGroup *)(arg1)->GetSpaceGroup();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__SpaceGroup, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroup__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::SpaceGroup *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetSpaceGroup. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::SpaceGroup *)((OpenBabel::OBUnitCell const *)arg1)->GetSpaceGroup();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__SpaceGroup, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroup) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetSpaceGroup__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetSpaceGroup__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetSpaceGroup'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroupName__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetSpaceGroupName. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetSpaceGroupName();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroupName__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetSpaceGroupName. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBUnitCell const *)arg1)->GetSpaceGroupName();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroupName) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetSpaceGroupName__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetSpaceGroupName__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetSpaceGroupName'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetLatticeType__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  int arg2 ; zval **args[2]; OpenBabel::OBUnitCell::LatticeType result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetLatticeType. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBUnitCell::LatticeType)(arg1)->GetLatticeType(arg2); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetLatticeType__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  int arg2 ; zval **args[2]; OpenBabel::OBUnitCell::LatticeType result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetLatticeType. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBUnitCell::LatticeType)((OpenBabel::OBUnitCell const *)arg1)->GetLatticeType(arg2); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetLatticeType__SWIG_2) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::OBUnitCell::LatticeType result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetLatticeType. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBUnitCell::LatticeType)(arg1)->GetLatticeType(); { ZVAL_LONG(return_value, (long)result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetLatticeType__SWIG_3) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::OBUnitCell::LatticeType result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetLatticeType. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBUnitCell::LatticeType)((OpenBabel::OBUnitCell const *)arg1)->GetLatticeType(); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetLatticeType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetLatticeType__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetLatticeType__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBUnitCell_GetLatticeType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBUnitCell_GetLatticeType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetLatticeType'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellVectors__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; std::vector< OpenBabel::vector3 > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetCellVectors. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetCellVectors(); {
    std::vector< OpenBabel::vector3 > * resultobj = new std::vector< OpenBabel::vector3 >((const std::vector< OpenBabel::vector3 > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellVectors__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; std::vector< OpenBabel::vector3 > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetCellVectors. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBUnitCell const *)arg1)->GetCellVectors(); {
    std::vector< OpenBabel::vector3 > * resultobj = new std::vector< OpenBabel::vector3 >((const std::vector< OpenBabel::vector3 > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellVectors) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetCellVectors__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetCellVectors__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetCellVectors'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellMatrix__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetCellMatrix. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetCellMatrix(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellMatrix__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetCellMatrix. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBUnitCell const *)arg1)->GetCellMatrix(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellMatrix) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetCellMatrix__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetCellMatrix__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetCellMatrix'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOrthoMatrix__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetOrthoMatrix. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetOrthoMatrix(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOrthoMatrix__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetOrthoMatrix. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBUnitCell const *)arg1)->GetOrthoMatrix(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOrthoMatrix) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetOrthoMatrix__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetOrthoMatrix__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetOrthoMatrix'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOrientationMatrix__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetOrientationMatrix. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetOrientationMatrix(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOrientationMatrix__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetOrientationMatrix. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBUnitCell const *)arg1)->GetOrientationMatrix(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetOrientationMatrix) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetOrientationMatrix__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetOrientationMatrix__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetOrientationMatrix'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetFractionalMatrix__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetFractionalMatrix. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetFractionalMatrix(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetFractionalMatrix__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetFractionalMatrix. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBUnitCell const *)arg1)->GetFractionalMatrix(); {
    OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetFractionalMatrix) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetFractionalMatrix__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetFractionalMatrix__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetFractionalMatrix'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_FractionalToCartesian__SWIG_0) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_FractionalToCartesian. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_FractionalToCartesian. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     arg2 = *tmp2; }  result = (arg1)->FractionalToCartesian(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_FractionalToCartesian__SWIG_1) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_FractionalToCartesian. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_FractionalToCartesian. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     arg2 = *tmp2; }  result = ((OpenBabel::OBUnitCell const *)arg1)->FractionalToCartesian(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_FractionalToCartesian) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBUnitCell_FractionalToCartesian__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBUnitCell_FractionalToCartesian__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_FractionalToCartesian'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_CartesianToFractional__SWIG_0) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_CartesianToFractional. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_CartesianToFractional. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     arg2 = *tmp2; }  result = (arg1)->CartesianToFractional(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_CartesianToFractional__SWIG_1) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_CartesianToFractional. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_CartesianToFractional. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     arg2 = *tmp2; }  result = ((OpenBabel::OBUnitCell const *)arg1)->CartesianToFractional(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_CartesianToFractional) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBUnitCell_CartesianToFractional__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBUnitCell_CartesianToFractional__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_CartesianToFractional'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_WrapCartesianCoordinate__SWIG_0) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_WrapCartesianCoordinate. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_WrapCartesianCoordinate. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     arg2 = *tmp2; }  result = (arg1)->WrapCartesianCoordinate(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_WrapCartesianCoordinate__SWIG_1) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_WrapCartesianCoordinate. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_WrapCartesianCoordinate. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     arg2 = *tmp2; }  result = ((OpenBabel::OBUnitCell const *)arg1)->WrapCartesianCoordinate(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_WrapCartesianCoordinate) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBUnitCell_WrapCartesianCoordinate__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBUnitCell_WrapCartesianCoordinate__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_WrapCartesianCoordinate'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_WrapFractionalCoordinate__SWIG_0) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_WrapFractionalCoordinate. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_WrapFractionalCoordinate. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     arg2 = *tmp2; }  result = (arg1)->WrapFractionalCoordinate(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_WrapFractionalCoordinate__SWIG_1) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ;
  zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_WrapFractionalCoordinate. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBUnitCell_WrapFractionalCoordinate. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     arg2 = *tmp2; }  result = ((OpenBabel::OBUnitCell const *)arg1)->WrapFractionalCoordinate(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_WrapFractionalCoordinate) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBUnitCell_WrapFractionalCoordinate__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBUnitCell_WrapFractionalCoordinate__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_WrapFractionalCoordinate'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroupNumber__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string arg2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetSpaceGroupNumber. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); result = (int)(arg1)->GetSpaceGroupNumber(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroupNumber__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetSpaceGroupNumber. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetSpaceGroupNumber(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroupNumber__SWIG_2) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string arg2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetSpaceGroupNumber. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  result = (int)((OpenBabel::OBUnitCell const *)arg1)->GetSpaceGroupNumber(arg2); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroupNumber__SWIG_3) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetSpaceGroupNumber. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBUnitCell const *)arg1)->GetSpaceGroupNumber(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetSpaceGroupNumber) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetSpaceGroupNumber__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetSpaceGroupNumber__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBUnitCell_GetSpaceGroupNumber__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBUnitCell_GetSpaceGroupNumber__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetSpaceGroupNumber'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellVolume__SWIG_0) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetCellVolume. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetCellVolume(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellVolume__SWIG_1) { OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBUnitCell, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBUnitCell_GetCellVolume. Expected SWIGTYPE_p_OpenBabel__OBUnitCell"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBUnitCell const *)arg1)->GetCellVolume(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBUnitCell_GetCellVolume) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBUnitCell_GetCellVolume__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBUnitCell_GetCellVolume__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBUnitCell_GetCellVolume'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConformerData__SWIG_0) { OpenBabel::OBConformerData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBConformerData *)new OpenBabel::OBConformerData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConformerData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConformerData__SWIG_1) { OpenBabel::OBConformerData *arg1 = 0 ; zval **args[1];
  OpenBabel::OBConformerData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBConformerData. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  result = (OpenBabel::OBConformerData *)new OpenBabel::OBConformerData((OpenBabel::OBConformerData const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConformerData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConformerData) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBConformerData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBConformerData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBConformerData'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBConformerData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBConformerData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBConformerData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBConformerData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_SetDimension) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper< std::vector< unsigned short > > arg2 ; std::vector< unsigned short > *tmp2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_SetDimension. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConformerData_SetDimension. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t"); }
     arg2 = *tmp2; }  (arg1)->SetDimension(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_SetEnergies) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector< double > arg2 ; std::vector< double > *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_SetEnergies. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConformerData_SetEnergies. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     arg2 = *tmp2; }  (arg1)->SetEnergies(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_SetForces) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > arg2 ; std::vector< std::vector< OpenBabel::vector3 > > *tmp2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_SetForces. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConformerData_SetForces. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     arg2 = *tmp2; }  (arg1)->SetForces(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_SetVelocities) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > arg2 ; std::vector< std::vector< OpenBabel::vector3 > > *tmp2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_SetVelocities. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConformerData_SetVelocities. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     arg2 = *tmp2; }  (arg1)->SetVelocities(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_SetDisplacements) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; std::vector< std::vector< OpenBabel::vector3 > > arg2 ;
  std::vector< std::vector< OpenBabel::vector3 > > *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_SetDisplacements. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConformerData_SetDisplacements. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     arg2 = *tmp2; }  (arg1)->SetDisplacements(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_SetData) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector< std::string > arg2 ; std::vector< std::string > *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_SetData. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConformerData_SetData. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     arg2 = *tmp2; }  (arg1)->SetData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_GetDimension) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< unsigned short > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_GetDimension. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetDimension(); {
    std::vector< unsigned short > * resultobj = new std::vector< unsigned short >((const std::vector< unsigned short > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_short_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_GetEnergies) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  zval **args[1]; std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_GetEnergies. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetEnergies(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_GetForces) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  zval **args[1]; std::vector< std::vector< OpenBabel::vector3 > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_GetForces. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetForces(); {
    std::vector< std::vector< OpenBabel::vector3 > > * resultobj = new std::vector< std::vector< OpenBabel::vector3 > >((const std::vector< std::vector< OpenBabel::vector3 > > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_GetVelocities) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  zval **args[1]; std::vector< std::vector< OpenBabel::vector3 > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_GetVelocities. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetVelocities(); {
    std::vector< std::vector< OpenBabel::vector3 > > * resultobj = new std::vector< std::vector< OpenBabel::vector3 > >((const std::vector< std::vector< OpenBabel::vector3 > > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_GetDisplacements) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; zval **args[1];
  std::vector< std::vector< OpenBabel::vector3 > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_GetDisplacements. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetDisplacements(); {
    std::vector< std::vector< OpenBabel::vector3 > > * resultobj = new std::vector< std::vector< OpenBabel::vector3 > >((const std::vector< std::vector< OpenBabel::vector3 > > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConformerData_GetData) { OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  zval **args[1]; std::vector< std::string > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConformerData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConformerData_GetData. Expected SWIGTYPE_p_OpenBabel__OBConformerData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetData(); {
    std::vector< std::string > * resultobj = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__string_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSymmetryData__SWIG_0) { OpenBabel::OBSymmetryData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBSymmetryData *)new OpenBabel::OBSymmetryData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSymmetryData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSymmetryData__SWIG_1) { OpenBabel::OBSymmetryData *arg1 = 0 ; zval **args[1];
  OpenBabel::OBSymmetryData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSymmetryData, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBSymmetryData. Expected SWIGTYPE_p_OpenBabel__OBSymmetryData"); }
     }  result = (OpenBabel::OBSymmetryData *)new OpenBabel::OBSymmetryData((OpenBabel::OBSymmetryData const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSymmetryData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSymmetryData) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBSymmetryData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBSymmetryData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBSymmetryData'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBSymmetryData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBSymmetryData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBSymmetryData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBSymmetryData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSymmetryData_SetData__SWIG_0) { OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ; std::string arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSymmetryData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSymmetryData_SetData. Expected SWIGTYPE_p_OpenBabel__OBSymmetryData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); (arg1)->SetData(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSymmetryData_SetData__SWIG_1) { OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSymmetryData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSymmetryData_SetData. Expected SWIGTYPE_p_OpenBabel__OBSymmetryData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (arg1)->SetData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSymmetryData_SetData) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBSymmetryData_SetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBSymmetryData_SetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSymmetryData_SetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSymmetryData_SetPointGroup) { OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSymmetryData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSymmetryData_SetPointGroup. Expected SWIGTYPE_p_OpenBabel__OBSymmetryData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (arg1)->SetPointGroup(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSymmetryData_SetSpaceGroup) { OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSymmetryData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSymmetryData_SetSpaceGroup. Expected SWIGTYPE_p_OpenBabel__OBSymmetryData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (arg1)->SetSpaceGroup(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSymmetryData_GetPointGroup) { OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSymmetryData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSymmetryData_GetPointGroup. Expected SWIGTYPE_p_OpenBabel__OBSymmetryData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetPointGroup();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSymmetryData_GetSpaceGroup) { OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSymmetryData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSymmetryData_GetSpaceGroup. Expected SWIGTYPE_p_OpenBabel__OBSymmetryData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetSpaceGroup();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBTorsion__SWIG_2) { OpenBabel::OBTorsion *arg1 = 0 ; zval **args[1];
  OpenBabel::OBTorsion *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBTorsion. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  result = (OpenBabel::OBTorsion *)new OpenBabel::OBTorsion((OpenBabel::OBTorsion const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBTorsion, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBTorsion) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_new_OBTorsion__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBTorsion'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBTorsion(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBTorsion *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBTorsion TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBTorsion resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_Clear) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_Clear. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_c_Empty) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_c_Empty. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->Empty(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_AddTorsion__SWIG_0) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ; zval **args[5];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_AddTorsion. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBTorsion_AddTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBTorsion_AddTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBTorsion_AddTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBTorsion_AddTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->AddTorsion(arg2,arg3,arg4,arg5); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_AddTorsion__SWIG_1) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::quad< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *arg2 = 0 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_AddTorsion. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBTorsion_AddTorsion. Expected SWIGTYPE_p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t"); }
     }  result = (bool)(arg1)->AddTorsion(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_AddTorsion) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBTorsion_AddTorsion__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBTorsion_AddTorsion__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBTorsion_AddTorsion'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_SetAngle__SWIG_0) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; double arg2 ;
  unsigned int arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_SetAngle. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->SetAngle(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_SetAngle__SWIG_1) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; double arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_SetAngle. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; result = (bool)(arg1)->SetAngle(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_SetAngle) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBTorsion_SetAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBTorsion_SetAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBTorsion_SetAngle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_SetData) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_SetData. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBTorsion_SetData. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  result = (bool)(arg1)->SetData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_GetAngle__SWIG_0) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double *arg2 = 0 ; unsigned int arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBTorsion_GetAngle. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->GetAngle(*arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_GetAngle__SWIG_1) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBTorsion_GetAngle. Expected SWIGTYPE_p_double"); }  } 
  result = (bool)(arg1)->GetAngle(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_GetAngle) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBTorsion_GetAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBTorsion_GetAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBTorsion_GetAngle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_GetBondIdx) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_GetBondIdx. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetBondIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_GetSize) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; zval **args[1];
  size_t result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_GetSize. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBTorsion const *)arg1)->GetSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_GetBC) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; zval **args[1];
  SwigValueWrapper< std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_GetBC. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetBC(); {
    std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * > * resultobj = new std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * >((const std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_GetADs) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_GetADs. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetADs(); {
    std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > * resultobj = new std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > >((const std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t, 1); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsion_IsProtonRotor) { OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsion_IsProtonRotor. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsProtonRotor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsionData_Clear) { OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsionData_Clear. Expected SWIGTYPE_p_OpenBabel__OBTorsionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsionData_GetData) { OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBTorsion > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsionData_GetData. Expected SWIGTYPE_p_OpenBabel__OBTorsionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBTorsionData const *)arg1)->GetData();
  {
    std::vector< OpenBabel::OBTorsion > * resultobj = new std::vector< OpenBabel::OBTorsion >((const std::vector< OpenBabel::OBTorsion > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBTorsion_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsionData_GetSize) { OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsionData_GetSize. Expected SWIGTYPE_p_OpenBabel__OBTorsionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBTorsionData const *)arg1)->GetSize();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsionData_SetData) { OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  OpenBabel::OBTorsion *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsionData_SetData. Expected SWIGTYPE_p_OpenBabel__OBTorsionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBTorsion, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBTorsionData_SetData. Expected SWIGTYPE_p_OpenBabel__OBTorsion"); }
     }  (arg1)->SetData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBTorsionData_FillTorsionArray) { OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  std::vector< std::vector< unsigned int > > *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTorsionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBTorsionData_FillTorsionArray. Expected SWIGTYPE_p_OpenBabel__OBTorsionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBTorsionData_FillTorsionArray. Expected SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t"); }
     }  result = (bool)(arg1)->FillTorsionArray(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBTorsionData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBTorsionData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBTorsionData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBTorsionData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAngle__SWIG_2) { OpenBabel::OBAngle *arg1 = 0 ; zval **args[1]; OpenBabel::OBAngle *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngle, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBAngle. Expected SWIGTYPE_p_OpenBabel__OBAngle"); }  } 
  result = (OpenBabel::OBAngle *)new OpenBabel::OBAngle((OpenBabel::OBAngle const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAngle, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAngle) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { _wrap_new_OBAngle__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}
   SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBAngle'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAngle(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAngle *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAngle TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAngle resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngle_Clear) { OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngle, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngle_Clear. Expected SWIGTYPE_p_OpenBabel__OBAngle"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngle_GetAngle) { OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngle, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngle_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAngle"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBAngle const *)arg1)->GetAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngle_SetAngle) { OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; double arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngle, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngle_SetAngle. Expected SWIGTYPE_p_OpenBabel__OBAngle"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; (arg1)->SetAngle(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngle_SetAtoms__SWIG_0) { OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngle, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngle_SetAtoms. Expected SWIGTYPE_p_OpenBabel__OBAngle"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAngle_SetAtoms. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAngle_SetAtoms. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBAngle_SetAtoms. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->SetAtoms(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngle_SetAtoms__SWIG_1) { OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngle, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngle_SetAtoms. Expected SWIGTYPE_p_OpenBabel__OBAngle"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAngle_SetAtoms. Expected SWIGTYPE_p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t"); }
     }  (arg1)->SetAtoms(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngle_SetAtoms) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBAngle_SetAtoms__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBAngle_SetAtoms__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAngle_SetAtoms'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngleData_Clear) { OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngleData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngleData_Clear. Expected SWIGTYPE_p_OpenBabel__OBAngleData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngleData_FillAngleArray__SWIG_0) { OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  int **arg2 = (int **) 0 ; unsigned int *arg3 = 0 ; zval **args[3]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngleData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngleData_FillAngleArray. Expected SWIGTYPE_p_OpenBabel__OBAngleData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAngleData_FillAngleArray. Expected SWIGTYPE_p_p_int"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_unsigned_int, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAngleData_FillAngleArray. Expected SWIGTYPE_p_unsigned_int"); }  } 
  result = (unsigned int)(arg1)->FillAngleArray(arg2,*arg3); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngleData_FillAngleArray__SWIG_1) { OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  std::vector< std::vector< unsigned int > > *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngleData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngleData_FillAngleArray. Expected SWIGTYPE_p_OpenBabel__OBAngleData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAngleData_FillAngleArray. Expected SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t"); }
     }  result = (bool)(arg1)->FillAngleArray(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngleData_FillAngleArray) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBAngleData_FillAngleArray__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBAngleData_FillAngleArray__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAngleData_FillAngleArray'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngleData_SetData) { OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  OpenBabel::OBAngle *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngleData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngleData_SetData. Expected SWIGTYPE_p_OpenBabel__OBAngleData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAngle, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAngleData_SetData. Expected SWIGTYPE_p_OpenBabel__OBAngle"); }  } 
  (arg1)->SetData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAngleData_GetSize) { OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ; zval **args[1];
  size_t result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAngleData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAngleData_GetSize. Expected SWIGTYPE_p_OpenBabel__OBAngleData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBAngleData const *)arg1)->GetSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAngleData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAngleData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAngleData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAngleData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBChiralData__SWIG_0) { OpenBabel::OBChiralData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBChiralData *)new OpenBabel::OBChiralData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBChiralData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBChiralData__SWIG_1) { OpenBabel::OBChiralData *arg1 = 0 ; zval **args[1];
  OpenBabel::OBChiralData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChiralData, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBChiralData. Expected SWIGTYPE_p_OpenBabel__OBChiralData"); }  }
   result = (OpenBabel::OBChiralData *)new OpenBabel::OBChiralData((OpenBabel::OBChiralData const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBChiralData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBChiralData) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBChiralData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBChiralData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBChiralData'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBChiralData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBChiralData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBChiralData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBChiralData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChiralData_Clear) { OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChiralData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChiralData_Clear. Expected SWIGTYPE_p_OpenBabel__OBChiralData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChiralData_GetAtom4Refs) { OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  OpenBabel::atomreftype arg2 ; zval **args[2]; std::vector< unsigned int > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChiralData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChiralData_GetAtom4Refs. Expected SWIGTYPE_p_OpenBabel__OBChiralData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::atomreftype) Z_LVAL_PP(args[1]); ; result = ((OpenBabel::OBChiralData const *)arg1)->GetAtom4Refs(arg2); {
    std::vector< unsigned int > * resultobj = new std::vector< unsigned int >((const std::vector< unsigned int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChiralData_GetAtomRef) { OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ; int arg2 ;
  OpenBabel::atomreftype arg3 ; zval **args[3]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChiralData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChiralData_GetAtomRef. Expected SWIGTYPE_p_OpenBabel__OBChiralData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (OpenBabel::atomreftype) Z_LVAL_PP(args[2]); ;
  result = (unsigned int)(arg1)->GetAtomRef(arg2,arg3); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChiralData_SetAtom4Refs) { OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  std::vector< unsigned int > arg2 ; OpenBabel::atomreftype arg3 ; std::vector< unsigned int > *tmp2 ; zval **args[3];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChiralData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChiralData_SetAtom4Refs. Expected SWIGTYPE_p_OpenBabel__OBChiralData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBChiralData_SetAtom4Refs. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     arg2 = *tmp2; }   convert_to_long_ex(args[2]); arg3 = (OpenBabel::atomreftype) Z_LVAL_PP(args[2]); ;
  result = (bool)(arg1)->SetAtom4Refs(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChiralData_AddAtomRef) { OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  unsigned int arg2 ; OpenBabel::atomreftype arg3 ; zval **args[3]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChiralData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChiralData_AddAtomRef. Expected SWIGTYPE_p_OpenBabel__OBChiralData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (OpenBabel::atomreftype) Z_LVAL_PP(args[2]);
  ; result = (int)(arg1)->AddAtomRef(arg2,arg3); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChiralData_GetSize) { OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  OpenBabel::atomreftype arg2 ; zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChiralData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChiralData_GetSize. Expected SWIGTYPE_p_OpenBabel__OBChiralData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::atomreftype) Z_LVAL_PP(args[1]); ;
  result = (unsigned int)((OpenBabel::OBChiralData const *)arg1)->GetSize(arg2); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSerialNums__SWIG_0) { OpenBabel::OBSerialNums *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBSerialNums *)new OpenBabel::OBSerialNums();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSerialNums, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSerialNums__SWIG_1) { OpenBabel::OBSerialNums *arg1 = 0 ; zval **args[1];
  OpenBabel::OBSerialNums *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSerialNums, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBSerialNums. Expected SWIGTYPE_p_OpenBabel__OBSerialNums"); }  }
   result = (OpenBabel::OBSerialNums *)new OpenBabel::OBSerialNums((OpenBabel::OBSerialNums const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSerialNums, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSerialNums) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBSerialNums__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBSerialNums__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBSerialNums'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSerialNums_GetData) { OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  zval **args[1]; std::map< int,OpenBabel::OBAtom * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSerialNums, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSerialNums_GetData. Expected SWIGTYPE_p_OpenBabel__OBSerialNums"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::map< int,OpenBabel::OBAtom * > *) &(arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__mapT_int_OpenBabel__OBAtom_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSerialNums_SetData) { OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  std::map< int,OpenBabel::OBAtom * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSerialNums, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSerialNums_SetData. Expected SWIGTYPE_p_OpenBabel__OBSerialNums"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_int_OpenBabel__OBAtom_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSerialNums_SetData. Expected SWIGTYPE_p_std__mapT_int_OpenBabel__OBAtom_p_t"); }
     }  (arg1)->SetData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBSerialNums(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBSerialNums *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBSerialNums TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBSerialNums resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBVibrationData) { OpenBabel::OBVibrationData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBVibrationData *)new OpenBabel::OBVibrationData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBVibrationData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBVibrationData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBVibrationData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBVibrationData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBVibrationData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVibrationData_SetData__SWIG_0) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > *arg2 = 0 ; std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVibrationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVibrationData_SetData. Expected SWIGTYPE_p_OpenBabel__OBVibrationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBVibrationData_SetData. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBVibrationData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBVibrationData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     } 
  (arg1)->SetData((std::vector< std::vector< OpenBabel::vector3 > > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVibrationData_SetData__SWIG_1) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > *arg2 = 0 ; std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ; std::vector< double > *arg5 = 0 ; zval **args[5]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVibrationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVibrationData_SetData. Expected SWIGTYPE_p_OpenBabel__OBVibrationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBVibrationData_SetData. Expected SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBVibrationData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBVibrationData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBVibrationData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     } 
  (arg1)->SetData((std::vector< std::vector< OpenBabel::vector3 > > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4,(std::vector< double > const &)*arg5);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVibrationData_SetData) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 4) {
    _wrap_OBVibrationData_SetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBVibrationData_SetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBVibrationData_SetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVibrationData_GetLx) { OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ;
  zval **args[1]; std::vector< std::vector< OpenBabel::vector3 > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVibrationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVibrationData_GetLx. Expected SWIGTYPE_p_OpenBabel__OBVibrationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBVibrationData const *)arg1)->GetLx();
  {
    std::vector< std::vector< OpenBabel::vector3 > > * resultobj = new std::vector< std::vector< OpenBabel::vector3 > >((const std::vector< std::vector< OpenBabel::vector3 > > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVibrationData_GetFrequencies) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; zval **args[1]; std::vector< double > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVibrationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVibrationData_GetFrequencies. Expected SWIGTYPE_p_OpenBabel__OBVibrationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBVibrationData const *)arg1)->GetFrequencies(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVibrationData_GetIntensities) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; zval **args[1]; std::vector< double > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVibrationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVibrationData_GetIntensities. Expected SWIGTYPE_p_OpenBabel__OBVibrationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBVibrationData const *)arg1)->GetIntensities(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVibrationData_GetRamanActivities) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; zval **args[1]; std::vector< double > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVibrationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVibrationData_GetRamanActivities. Expected SWIGTYPE_p_OpenBabel__OBVibrationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBVibrationData const *)arg1)->GetRamanActivities(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVibrationData_GetNumberOfFrequencies) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVibrationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVibrationData_GetNumberOfFrequencies. Expected SWIGTYPE_p_OpenBabel__OBVibrationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBVibrationData const *)arg1)->GetNumberOfFrequencies(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBDOSData) { OpenBabel::OBDOSData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBDOSData *)new OpenBabel::OBDOSData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBDOSData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBDOSData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBDOSData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBDOSData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBDOSData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDOSData_SetData) { OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; double arg2 ;
  std::vector< double > *arg3 = 0 ; std::vector< double > *arg4 = 0 ; std::vector< double > *arg5 = 0 ; zval **args[5];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDOSData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDOSData_SetData. Expected SWIGTYPE_p_OpenBabel__OBDOSData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBDOSData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }  } 
  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBDOSData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }  } 
  { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBDOSData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }  } 
  (arg1)->SetData(arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4,(std::vector< double > const &)*arg5);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDOSData_GetFermiEnergy) { OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDOSData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDOSData_GetFermiEnergy. Expected SWIGTYPE_p_OpenBabel__OBDOSData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBDOSData const *)arg1)->GetFermiEnergy(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDOSData_GetEnergies) { OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDOSData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDOSData_GetEnergies. Expected SWIGTYPE_p_OpenBabel__OBDOSData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBDOSData const *)arg1)->GetEnergies();
  { std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDOSData_GetDensities) { OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDOSData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDOSData_GetDensities. Expected SWIGTYPE_p_OpenBabel__OBDOSData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBDOSData const *)arg1)->GetDensities(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDOSData_GetIntegration) { OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDOSData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDOSData_GetIntegration. Expected SWIGTYPE_p_OpenBabel__OBDOSData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBDOSData const *)arg1)->GetIntegration(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbital_SetData__SWIG_0) { OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; double arg2 ;
  double arg3 ; std::string arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbital, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbital_SetData. Expected SWIGTYPE_p_OpenBabel__OBOrbital"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3])); (arg1)->SetData(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbital_SetData__SWIG_1) { OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; double arg2 ;
  double arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbital, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbital_SetData. Expected SWIGTYPE_p_OpenBabel__OBOrbital"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; (arg1)->SetData(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbital_SetData__SWIG_2) { OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; double arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbital, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbital_SetData. Expected SWIGTYPE_p_OpenBabel__OBOrbital"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; (arg1)->SetData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbital_SetData) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBOrbital_SetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBOrbital_SetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBOrbital_SetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBOrbital_SetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbital_GetEnergy) { OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbital, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbital_GetEnergy. Expected SWIGTYPE_p_OpenBabel__OBOrbital"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBOrbital const *)arg1)->GetEnergy(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbital_GetOccupation) { OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbital, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbital_GetOccupation. Expected SWIGTYPE_p_OpenBabel__OBOrbital"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBOrbital const *)arg1)->GetOccupation(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbital_GetSymbol) { OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbital, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbital_GetSymbol. Expected SWIGTYPE_p_OpenBabel__OBOrbital"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBOrbital const *)arg1)->GetSymbol();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBOrbital) { OpenBabel::OBOrbital *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBOrbital *)new OpenBabel::OBOrbital();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBOrbital, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBOrbital(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBOrbital *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBOrbital TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBOrbital resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBOrbitalData) { OpenBabel::OBOrbitalData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBOrbitalData *)new OpenBabel::OBOrbitalData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBOrbitalData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBOrbitalData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBOrbitalData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBOrbitalData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBOrbitalData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_SetAlphaOrbitals) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBOrbital > > arg2 ; std::vector< OpenBabel::OBOrbital > *tmp2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_SetAlphaOrbitals. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOrbitalData_SetAlphaOrbitals. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t"); }
     arg2 = *tmp2; }  (arg1)->SetAlphaOrbitals(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_SetBetaOrbitals) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBOrbital > > arg2 ; std::vector< OpenBabel::OBOrbital > *tmp2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_SetBetaOrbitals. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOrbitalData_SetBetaOrbitals. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t"); }
     arg2 = *tmp2; }  (arg1)->SetBetaOrbitals(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_SetHOMO__SWIG_0) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  int arg2 ; int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_SetHOMO. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  (arg1)->SetHOMO(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_SetHOMO__SWIG_1) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_SetHOMO. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetHOMO(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_SetHOMO) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBOrbitalData_SetHOMO__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBOrbitalData_SetHOMO__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBOrbitalData_SetHOMO'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_SetOpenShell) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_SetOpenShell. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetOpenShell(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_IsOpenShell) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_IsOpenShell. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsOpenShell(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_GetAlphaHOMO) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_GetAlphaHOMO. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetAlphaHOMO(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_GetBetaHOMO) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_GetBetaHOMO. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetBetaHOMO(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_GetAlphaOrbitals) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBOrbital > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_GetAlphaOrbitals. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetAlphaOrbitals(); {
    std::vector< OpenBabel::OBOrbital > * resultobj = new std::vector< OpenBabel::OBOrbital >((const std::vector< OpenBabel::OBOrbital > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_GetBetaOrbitals) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBOrbital > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_GetBetaOrbitals. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetBetaOrbitals(); {
    std::vector< OpenBabel::OBOrbital > * resultobj = new std::vector< OpenBabel::OBOrbital >((const std::vector< OpenBabel::OBOrbital > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_LoadClosedShellOrbitals) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; std::vector< double > arg2 ;
  std::vector< std::string > arg3 ; int arg4 ; std::vector< double > *tmp2 ; std::vector< std::string > *tmp3 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_LoadClosedShellOrbitals. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOrbitalData_LoadClosedShellOrbitals. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     arg2 = *tmp2; }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBOrbitalData_LoadClosedShellOrbitals. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     arg3 = *tmp3; }   convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;
  (arg1)->LoadClosedShellOrbitals(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_LoadAlphaOrbitals) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  std::vector< double > arg2 ; std::vector< std::string > arg3 ; int arg4 ; std::vector< double > *tmp2 ;
  std::vector< std::string > *tmp3 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_LoadAlphaOrbitals. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOrbitalData_LoadAlphaOrbitals. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     arg2 = *tmp2; }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBOrbitalData_LoadAlphaOrbitals. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     arg3 = *tmp3; }   convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;
  (arg1)->LoadAlphaOrbitals(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOrbitalData_LoadBetaOrbitals) { OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  std::vector< double > arg2 ; std::vector< std::string > arg3 ; int arg4 ; std::vector< double > *tmp2 ;
  std::vector< std::string > *tmp3 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOrbitalData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOrbitalData_LoadBetaOrbitals. Expected SWIGTYPE_p_OpenBabel__OBOrbitalData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOrbitalData_LoadBetaOrbitals. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     arg2 = *tmp2; }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBOrbitalData_LoadBetaOrbitals. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     arg3 = *tmp3; }   convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->LoadBetaOrbitals(arg2,arg3,arg4);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBElectronicTransitionData) { OpenBabel::OBElectronicTransitionData *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (OpenBabel::OBElectronicTransitionData *)new OpenBabel::OBElectronicTransitionData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBElectronicTransitionData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; efree(value);
  if (! newobject) return; 
  arg1 = (OpenBabel::OBElectronicTransitionData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBElectronicTransitionData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBElectronicTransitionData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_SetData) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_SetData. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBElectronicTransitionData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBElectronicTransitionData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  (arg1)->SetData((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_SetEDipole) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; std::vector< double > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_SetEDipole. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBElectronicTransitionData_SetEDipole. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  (arg1)->SetEDipole((std::vector< double > const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_SetRotatoryStrengthsVelocity) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; std::vector< double > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_SetRotatoryStrengthsVelocity. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBElectronicTransitionData_SetRotatoryStrengthsVelocity. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  (arg1)->SetRotatoryStrengthsVelocity((std::vector< double > const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_SetRotatoryStrengthsLength) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; std::vector< double > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_SetRotatoryStrengthsLength. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBElectronicTransitionData_SetRotatoryStrengthsLength. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  (arg1)->SetRotatoryStrengthsLength((std::vector< double > const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_GetWavelengths) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_GetWavelengths. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetWavelengths(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_GetForces) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_GetForces. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetForces(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_GetEDipole) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_GetEDipole. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetEDipole(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_GetRotatoryStrengthsVelocity) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_GetRotatoryStrengthsVelocity. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetRotatoryStrengthsVelocity(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBElectronicTransitionData_GetRotatoryStrengthsLength) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBElectronicTransitionData_GetRotatoryStrengthsLength. Expected SWIGTYPE_p_OpenBabel__OBElectronicTransitionData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetRotatoryStrengthsLength(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRotationData) { OpenBabel::OBRotationData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRotationData *)new OpenBabel::OBRotationData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotationData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRotationData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRotationData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRotationData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRotationData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotationData_SetData) { OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ;
  OpenBabel::OBRotationData::RType arg2 ; std::vector< double > arg3 ; int arg4 ; std::vector< double > *tmp3 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotationData_SetData. Expected SWIGTYPE_p_OpenBabel__OBRotationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBRotationData::RType) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRotationData_SetData. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     arg3 = *tmp3; }   convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->SetData(arg2,arg3,arg4); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotationData_GetRotConsts) { OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ;
  zval **args[1]; std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotationData_GetRotConsts. Expected SWIGTYPE_p_OpenBabel__OBRotationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBRotationData const *)arg1)->GetRotConsts(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotationData_GetSymmetryNumber) {
  OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotationData_GetSymmetryNumber. Expected SWIGTYPE_p_OpenBabel__OBRotationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBRotationData const *)arg1)->GetSymmetryNumber(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotationData_GetRotorType) { OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ;
  zval **args[1]; OpenBabel::OBRotationData::RType result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotationData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotationData_GetRotorType. Expected SWIGTYPE_p_OpenBabel__OBRotationData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBRotationData::RType)((OpenBabel::OBRotationData const *)arg1)->GetRotorType(); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBVectorData) { OpenBabel::OBVectorData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBVectorData *)new OpenBabel::OBVectorData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBVectorData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBVectorData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBVectorData *arg1 = (OpenBabel::OBVectorData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBVectorData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBVectorData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBVectorData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVectorData_SetData__SWIG_0) { OpenBabel::OBVectorData *arg1 = (OpenBabel::OBVectorData *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVectorData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVectorData_SetData. Expected SWIGTYPE_p_OpenBabel__OBVectorData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (arg1)->SetData(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVectorData_SetData__SWIG_1) { OpenBabel::OBVectorData *arg1 = (OpenBabel::OBVectorData *) 0 ;
  OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVectorData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVectorData_SetData. Expected SWIGTYPE_p_OpenBabel__OBVectorData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBVectorData_SetData. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  (arg1)->SetData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVectorData_SetData) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBVectorData_SetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBVectorData_SetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBVectorData_SetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBVectorData_GetData) { OpenBabel::OBVectorData *arg1 = (OpenBabel::OBVectorData *) 0 ;
  zval **args[1]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBVectorData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBVectorData_GetData. Expected SWIGTYPE_p_OpenBabel__OBVectorData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBVectorData const *)arg1)->GetData();
  { OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMatrixData) { OpenBabel::OBMatrixData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMatrixData *)new OpenBabel::OBMatrixData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMatrixData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMatrixData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMatrixData *arg1 = (OpenBabel::OBMatrixData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMatrixData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMatrixData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMatrixData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMatrixData_SetData) { OpenBabel::OBMatrixData *arg1 = (OpenBabel::OBMatrixData *) 0 ;
  OpenBabel::matrix3x3 arg2 ; OpenBabel::matrix3x3 *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMatrixData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMatrixData_SetData. Expected SWIGTYPE_p_OpenBabel__OBMatrixData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__matrix3x3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMatrixData_SetData. Expected SWIGTYPE_p_OpenBabel__matrix3x3"); } 
    arg2 = *tmp2; }  (arg1)->SetData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMatrixData_GetData) { OpenBabel::OBMatrixData *arg1 = (OpenBabel::OBMatrixData *) 0 ;
  zval **args[1]; OpenBabel::matrix3x3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMatrixData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMatrixData_GetData. Expected SWIGTYPE_p_OpenBabel__OBMatrixData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBMatrixData const *)arg1)->GetData();
  { OpenBabel::matrix3x3 * resultobj = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__matrix3x3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFreeGridPoint__SWIG_0) { OpenBabel::OBFreeGridPoint *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFreeGridPoint *)new OpenBabel::OBFreeGridPoint();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFreeGridPoint__SWIG_1) { double arg1 ; double arg2 ; double arg3 ; double arg4 ; zval **args[4];
  OpenBabel::OBFreeGridPoint *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_double_ex(args[0]); arg1 = (double) Z_DVAL_PP(args[0]); ;  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;
  result = (OpenBabel::OBFreeGridPoint *)new OpenBabel::OBFreeGridPoint(arg1,arg2,arg3,arg4);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFreeGridPoint) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBFreeGridPoint__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_new_OBFreeGridPoint__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBFreeGridPoint'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFreeGridPoint(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFreeGridPoint *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFreeGridPoint TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFreeGridPoint resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGridPoint_GetX) { OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGridPoint_GetX. Expected SWIGTYPE_p_OpenBabel__OBFreeGridPoint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetX(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGridPoint_GetY) { OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGridPoint_GetY. Expected SWIGTYPE_p_OpenBabel__OBFreeGridPoint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetY(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGridPoint_GetZ) { OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGridPoint_GetZ. Expected SWIGTYPE_p_OpenBabel__OBFreeGridPoint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetZ(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGridPoint_GetV) { OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGridPoint_GetV. Expected SWIGTYPE_p_OpenBabel__OBFreeGridPoint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetV(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGridPoint_SetX) { OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGridPoint_SetX. Expected SWIGTYPE_p_OpenBabel__OBFreeGridPoint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetX(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGridPoint_SetY) { OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGridPoint_SetY. Expected SWIGTYPE_p_OpenBabel__OBFreeGridPoint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetY(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGridPoint_SetZ) { OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGridPoint_SetZ. Expected SWIGTYPE_p_OpenBabel__OBFreeGridPoint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetZ(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGridPoint_SetV) { OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGridPoint_SetV. Expected SWIGTYPE_p_OpenBabel__OBFreeGridPoint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetV(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFreeGrid) { OpenBabel::OBFreeGrid *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFreeGrid *)new OpenBabel::OBFreeGrid();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFreeGrid, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFreeGrid(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFreeGrid *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFreeGrid TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFreeGrid resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGrid_NumPoints) { OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGrid, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGrid_NumPoints. Expected SWIGTYPE_p_OpenBabel__OBFreeGrid"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->NumPoints(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGrid_AddPoint) { OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; double arg2 ;
  double arg3 ; double arg4 ; double arg5 ; zval **args[5]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGrid, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGrid_AddPoint. Expected SWIGTYPE_p_OpenBabel__OBFreeGrid"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;  convert_to_double_ex(args[4]);
  arg5 = (double) Z_DVAL_PP(args[4]); ; (arg1)->AddPoint(arg2,arg3,arg4,arg5); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGrid_BeginPoints) { OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBFreeGridPoint * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGrid, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGrid_BeginPoints. Expected SWIGTYPE_p_OpenBabel__OBFreeGrid"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginPoints(); {
    OpenBabel::OBFreeGridPointIterator * resultobj = new OpenBabel::OBFreeGridPointIterator((const OpenBabel::OBFreeGridPointIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator, 1); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGrid_EndPoints) { OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBFreeGridPoint * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGrid, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGrid_EndPoints. Expected SWIGTYPE_p_OpenBabel__OBFreeGrid"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndPoints(); {
    OpenBabel::OBFreeGridPointIterator * resultobj = new OpenBabel::OBFreeGridPointIterator((const OpenBabel::OBFreeGridPointIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator, 1); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGrid_BeginPoint) { OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ;
  OpenBabel::OBFreeGridPointIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBFreeGridPoint *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGrid, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGrid_BeginPoint. Expected SWIGTYPE_p_OpenBabel__OBFreeGrid"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFreeGrid_BeginPoint. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator"); }
     }  result = (OpenBabel::OBFreeGridPoint *)(arg1)->BeginPoint(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFreeGrid_NextPoint) { OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ;
  OpenBabel::OBFreeGridPointIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBFreeGridPoint *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFreeGrid, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFreeGrid_NextPoint. Expected SWIGTYPE_p_OpenBabel__OBFreeGrid"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFreeGrid_NextPoint. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator"); }
     }  result = (OpenBabel::OBFreeGridPoint *)(arg1)->NextPoint(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFreeGridPoint, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGridData) { OpenBabel::OBGridData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBGridData *)new OpenBabel::OBGridData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGridData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBGridData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBGridData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBGridData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBGridData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetAxes__SWIG_0) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  double *arg2 ; double *arg3 ; double *arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetAxes. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_GetAxes. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBGridData_GetAxes. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBGridData_GetAxes. Expected SWIGTYPE_p_double"); }  } 
  ((OpenBabel::OBGridData const *)arg1)->GetAxes(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetXAxis) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; zval **args[1];
  OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetXAxis. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBGridData const *)arg1)->GetXAxis(); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetYAxis) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; zval **args[1];
  OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetYAxis. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBGridData const *)arg1)->GetYAxis(); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetZAxis) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; zval **args[1];
  OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetZAxis. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBGridData const *)arg1)->GetZAxis(); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetAxes__SWIG_1) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetAxes. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_GetAxes. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBGridData_GetAxes. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBGridData_GetAxes. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  ((OpenBabel::OBGridData const *)arg1)->GetAxes(*arg2,*arg3,*arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetAxes) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 4) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_double, 0) >= 0); } }  if (!_v) goto check_1; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_double, 0) >= 0); } }  if (!_v) goto check_1; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_double, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBGridData_GetAxes__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 4) {
    _wrap_OBGridData_GetAxes__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBGridData_GetAxes'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetNumberOfPoints__SWIG_0) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  int *arg2 = 0 ; int *arg3 = 0 ; int *arg4 = 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetNumberOfPoints. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_GetNumberOfPoints. Expected SWIGTYPE_p_int"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBGridData_GetNumberOfPoints. Expected SWIGTYPE_p_int"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_int, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBGridData_GetNumberOfPoints. Expected SWIGTYPE_p_int"); }  } 
  ((OpenBabel::OBGridData const *)arg1)->GetNumberOfPoints(*arg2,*arg3,*arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetNumberOfPoints__SWIG_1) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetNumberOfPoints. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBGridData const *)arg1)->GetNumberOfPoints(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetNumberOfPoints) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBGridData_GetNumberOfPoints__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBGridData_GetNumberOfPoints__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBGridData_GetNumberOfPoints'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetNumberOfSteps) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int *arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetNumberOfSteps. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_GetNumberOfSteps. Expected SWIGTYPE_p_int"); }  } 
  ((OpenBabel::OBGridData const *)arg1)->GetNumberOfSteps(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetValues) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetValues. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBGridData const *)arg1)->GetValues();
  { std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetValue__SWIG_0) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetValue. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ; result = (double)((OpenBabel::OBGridData const *)arg1)->GetValue(arg2,arg3,arg4); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetValue__SWIG_1) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  OpenBabel::vector3 arg2 ; OpenBabel::vector3 *tmp2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetValue. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_GetValue. Expected SWIGTYPE_p_OpenBabel__vector3"); } 
    arg2 = *tmp2; }  result = (double)((OpenBabel::OBGridData const *)arg1)->GetValue(arg2); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetValue) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBGridData_GetValue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBGridData_GetValue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBGridData_GetValue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetUnit) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; zval **args[1];
  OpenBabel::OBGridData::Unit result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetUnit. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBGridData::Unit)((OpenBabel::OBGridData const *)arg1)->GetUnit(); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetMinValue) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetMinValue. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBGridData const *)arg1)->GetMinValue(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetMaxValue) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetMaxValue. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBGridData const *)arg1)->GetMaxValue(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetOriginVector__SWIG_0) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  zval **args[1]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetOriginVector. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBGridData const *)arg1)->GetOriginVector(); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetOriginVector__SWIG_1) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  double *arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetOriginVector. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_GetOriginVector. Expected SWIGTYPE_p_double"); }  } 
  ((OpenBabel::OBGridData const *)arg1)->GetOriginVector(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetOriginVector) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBGridData_GetOriginVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBGridData_GetOriginVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBGridData_GetOriginVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetMaxVector) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; zval **args[1];
  OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetMaxVector. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBGridData const *)arg1)->GetMaxVector(); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetUnrestricted) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetUnrestricted. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::OBGridData const *)arg1)->GetUnrestricted(); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_GetNumSymmetries) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_GetNumSymmetries. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBGridData const *)arg1)->GetNumSymmetries(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetNumberOfPoints) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_SetNumberOfPoints. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->SetNumberOfPoints(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetLimits__SWIG_0) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; OpenBabel::vector3 *arg5 = 0 ;
  zval **args[5]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_SetLimits. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_SetLimits. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBGridData_SetLimits. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBGridData_SetLimits. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBGridData_SetLimits. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  (arg1)->SetLimits((OpenBabel::vector3 const &)*arg2,(OpenBabel::vector3 const &)*arg3,(OpenBabel::vector3 const &)*arg4,(OpenBabel::vector3 const &)*arg5);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetLimits__SWIG_1) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  double *arg2 ; double *arg3 ; double *arg4 ; double *arg5 ; zval **args[5]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_SetLimits. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_SetLimits. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBGridData_SetLimits. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBGridData_SetLimits. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBGridData_SetLimits. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->SetLimits((double const (*))arg2,(double const (*))arg3,(double const (*))arg4,(double const (*))arg5); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetLimits) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 5) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_1; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBGridData_SetLimits__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 5) { _wrap_OBGridData_SetLimits__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBGridData_SetLimits'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetValue) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; double arg5 ; zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_SetValue. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ;  convert_to_double_ex(args[4]); arg5 = (double) Z_DVAL_PP(args[4]); ; result = (bool)(arg1)->SetValue(arg2,arg3,arg4,arg5);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetValues) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  std::vector< double > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_SetValues. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGridData_SetValues. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  (arg1)->SetValues((std::vector< double > const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetUnit) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ;
  OpenBabel::OBGridData::Unit arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_SetUnit. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBGridData::Unit) Z_LVAL_PP(args[1]); ; (arg1)->SetUnit(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetUnrestricted) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; bool arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_SetUnrestricted. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetUnrestricted(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGridData_SetNumSymmetries) { OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGridData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGridData_SetNumSymmetries. Expected SWIGTYPE_p_OpenBabel__OBGridData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetNumSymmetries(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBChainsParser) { OpenBabel::OBChainsParser *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBChainsParser *)new OpenBabel::OBChainsParser();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBChainsParser, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBChainsParser(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBChainsParser *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBChainsParser TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBChainsParser resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChainsParser_PerceiveChains__SWIG_0) {
  OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; zval **args[3];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChainsParser, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChainsParser_PerceiveChains. Expected SWIGTYPE_p_OpenBabel__OBChainsParser"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBChainsParser_PerceiveChains. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->PerceiveChains(*arg2,arg3);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChainsParser_PerceiveChains__SWIG_1) {
  OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ; OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChainsParser, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChainsParser_PerceiveChains. Expected SWIGTYPE_p_OpenBabel__OBChainsParser"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBChainsParser_PerceiveChains. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->PerceiveChains(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChainsParser_PerceiveChains) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBChainsParser_PerceiveChains__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBChainsParser_PerceiveChains__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBChainsParser_PerceiveChains'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomTyper) { OpenBabel::OBAtomTyper *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBAtomTyper *)new OpenBabel::OBAtomTyper();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomTyper, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAtomTyper(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAtomTyper *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAtomTyper TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAtomTyper resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomTyper_AssignHyb) { OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomTyper_AssignHyb. Expected SWIGTYPE_p_OpenBabel__OBAtomTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomTyper_AssignHyb. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  (arg1)->AssignHyb(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomTyper_AssignTypes) { OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomTyper_AssignTypes. Expected SWIGTYPE_p_OpenBabel__OBAtomTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomTyper_AssignTypes. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   (arg1)->AssignTypes(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomTyper_AssignImplicitValence__SWIG_0) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomTyper_AssignImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtomTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomTyper_AssignImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; (arg1)->AssignImplicitValence(*arg2,arg3); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomTyper_AssignImplicitValence__SWIG_1) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomTyper_AssignImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtomTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomTyper_AssignImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->AssignImplicitValence(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomTyper_AssignImplicitValence) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBAtomTyper_AssignImplicitValence__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBAtomTyper_AssignImplicitValence__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomTyper_AssignImplicitValence'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomTyper_CorrectAromaticNitrogens) { OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomTyper_CorrectAromaticNitrogens. Expected SWIGTYPE_p_OpenBabel__OBAtomTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomTyper_CorrectAromaticNitrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->CorrectAromaticNitrogens(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAromaticTyper) { OpenBabel::OBAromaticTyper *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBAromaticTyper *)new OpenBabel::OBAromaticTyper();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAromaticTyper(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAromaticTyper *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAromaticTyper TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAromaticTyper resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAromaticTyper_AssignAromaticFlags) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAromaticTyper_AssignAromaticFlags. Expected SWIGTYPE_p_OpenBabel__OBAromaticTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAromaticTyper_AssignAromaticFlags. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->AssignAromaticFlags(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAromaticTyper_PropagatePotentialAromatic) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAromaticTyper_PropagatePotentialAromatic. Expected SWIGTYPE_p_OpenBabel__OBAromaticTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAromaticTyper_PropagatePotentialAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  (arg1)->PropagatePotentialAromatic(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAromaticTyper_SelectRootAtoms__SWIG_0) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAromaticTyper_SelectRootAtoms. Expected SWIGTYPE_p_OpenBabel__OBAromaticTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAromaticTyper_SelectRootAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; (arg1)->SelectRootAtoms(*arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAromaticTyper_SelectRootAtoms__SWIG_1) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAromaticTyper_SelectRootAtoms. Expected SWIGTYPE_p_OpenBabel__OBAromaticTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAromaticTyper_SelectRootAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->SelectRootAtoms(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAromaticTyper_SelectRootAtoms) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBAromaticTyper_SelectRootAtoms__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBAromaticTyper_SelectRootAtoms__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAromaticTyper_SelectRootAtoms'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAromaticTyper_ExcludeSmallRing) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAromaticTyper_ExcludeSmallRing. Expected SWIGTYPE_p_OpenBabel__OBAromaticTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAromaticTyper_ExcludeSmallRing. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->ExcludeSmallRing(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAromaticTyper_CheckAromaticity) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAromaticTyper_CheckAromaticity. Expected SWIGTYPE_p_OpenBabel__OBAromaticTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAromaticTyper_CheckAromaticity. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }   convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->CheckAromaticity(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAromaticTyper_TraverseCycle) { OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg4 = (OpenBabel::OBBond *) 0 ; std::pair< int,int > *arg5 = 0 ; int arg6 ; zval **args[6]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAromaticTyper_TraverseCycle. Expected SWIGTYPE_p_OpenBabel__OBAromaticTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAromaticTyper_TraverseCycle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAromaticTyper_TraverseCycle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBAromaticTyper_TraverseCycle. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_std__pairT_int_int_t, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBAromaticTyper_TraverseCycle. Expected SWIGTYPE_p_std__pairT_int_int_t"); }
     }   convert_to_long_ex(args[5]); arg6 = (int) Z_LVAL_PP(args[5]); ;
  result = (bool)(arg1)->TraverseCycle(arg2,arg3,arg4,*arg5,arg6); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRingTyper) { OpenBabel::OBRingTyper *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRingTyper *)new OpenBabel::OBRingTyper();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRingTyper, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRingTyper(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRingTyper *arg1 = (OpenBabel::OBRingTyper *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRingTyper *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRingTyper TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRingTyper resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingTyper_AssignTypes) { OpenBabel::OBRingTyper *arg1 = (OpenBabel::OBRingTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingTyper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingTyper_AssignTypes. Expected SWIGTYPE_p_OpenBabel__OBRingTyper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRingTyper_AssignTypes. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   (arg1)->AssignTypes(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_dummy) { std::binary_function< char const *,char const *,bool > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  result = (std::binary_function< char const *,char const *,bool > *)new std::binary_function< char const *,char const *,bool >();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__binary_functionT_char_const_p_char_const_p_bool_t, 1);
  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_dummy(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::binary_function< char const *,char const *,bool > *arg1 = (std::binary_function< char const *,char const *,bool > *) 0 ;
  efree(value); if (! newobject) return; 
  arg1 = (std::binary_function< char const *,char const *,bool > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__binary_functionT_char_const_p_char_const_p_bool_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::binary_function<(p.q(const).char,p.q(const).char,bool)> resource already free'd");
  delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_CharPtrLess) { OpenBabel::CharPtrLess *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::CharPtrLess *)new OpenBabel::CharPtrLess();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__CharPtrLess, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_CharPtrLess(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::CharPtrLess *arg1 = (OpenBabel::CharPtrLess *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::CharPtrLess *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__CharPtrLess TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::CharPtrLess resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBPlugin(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBPlugin *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBPlugin TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBPlugin resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_Description) { OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPlugin, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPlugin_Description. Expected SWIGTYPE_p_OpenBabel__OBPlugin"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(arg1)->Description(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_TypeID) { OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPlugin, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPlugin_TypeID. Expected SWIGTYPE_p_OpenBabel__OBPlugin"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(arg1)->TypeID(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_Display__SWIG_0) { OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ;
  std::string *arg2 = 0 ; char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; std::string temp2 ; zval **args[4]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPlugin, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPlugin_Display. Expected SWIGTYPE_p_OpenBabel__OBPlugin"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }
   else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0; }  else { convert_to_string_ex(args[3]); arg4 = (char *) Z_STRVAL_PP(args[3]); }  ;
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3,(char const *)arg4); { ZVAL_BOOL(return_value,(result)?1:0); } 
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_Display__SWIG_1) { OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ;
  std::string *arg2 = 0 ; char *arg3 = (char *) 0 ; std::string temp2 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPlugin, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPlugin_Display. Expected SWIGTYPE_p_OpenBabel__OBPlugin"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }
   else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3); { ZVAL_BOOL(return_value,(result)?1:0); } 
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_Display) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBPlugin_Display__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBPlugin_Display__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBPlugin_Display'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_MakeInstance) { OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ;
  std::vector< std::string > *arg2 = 0 ; zval **args[2]; OpenBabel::OBPlugin *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPlugin, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPlugin_MakeInstance. Expected SWIGTYPE_p_OpenBabel__OBPlugin"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBPlugin_MakeInstance. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     }  result = (OpenBabel::OBPlugin *)(arg1)->MakeInstance((std::vector< std::string > const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBPlugin, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_Init) { OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPlugin, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPlugin_Init. Expected SWIGTYPE_p_OpenBabel__OBPlugin"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Init(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_GetPlugin) { char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  OpenBabel::OBPlugin *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBPlugin *)OpenBabel::OBPlugin::GetPlugin((char const *)arg1,(char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBPlugin, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_GetID) { OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPlugin, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPlugin_GetID. Expected SWIGTYPE_p_OpenBabel__OBPlugin"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)((OpenBabel::OBPlugin const *)arg1)->GetID(); {
    if(!result) { ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_ListAsVector) { char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
  std::vector< std::string > *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBPlugin_ListAsVector. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     }  result = (bool)OpenBabel::OBPlugin::ListAsVector((char const *)arg1,(char const *)arg2,*arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_c_List__SWIG_0) { char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
  std::ostream *arg3 = (std::ostream *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBPlugin_c_List. Expected SWIGTYPE_p_std__ostream"); }  } 
  OpenBabel::OBPlugin::List((char const *)arg1,(char const *)arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_c_List__SWIG_1) { char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  OpenBabel::OBPlugin::List((char const *)arg1,(char const *)arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_c_List__SWIG_2) { char *arg1 = (char *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; OpenBabel::OBPlugin::List((char const *)arg1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_c_List) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBPlugin_c_List__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBPlugin_c_List__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBPlugin_c_List__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBPlugin_c_List'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_ListAsString__SWIG_0) { char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }   if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = OpenBabel::OBPlugin::ListAsString((char const *)arg1,(char const *)arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_ListAsString__SWIG_1) { char *arg1 = (char *) 0 ; zval **args[1]; std::string result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; result = OpenBabel::OBPlugin::ListAsString((char const *)arg1);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_ListAsString) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBPlugin_ListAsString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBPlugin_ListAsString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBPlugin_ListAsString'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_FirstLine) { char *arg1 = (char *) 0 ; zval **args[1]; std::string result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; result = OpenBabel::OBPlugin::FirstLine((char const *)arg1);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_Begin) { char *arg1 = (char *) 0 ; zval **args[1];
  SwigValueWrapper< std::map< char const *,OpenBabel::OBPlugin *,OpenBabel::CharPtrLess >::const_iterator > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; result = OpenBabel::OBPlugin::Begin((char const *)arg1); {
    OpenBabel::OBPlugin::PluginIterator * resultobj = new OpenBabel::OBPlugin::PluginIterator((const OpenBabel::OBPlugin::PluginIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator, 1); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_End) { char *arg1 = (char *) 0 ; zval **args[1];
  SwigValueWrapper< std::map< char const *,OpenBabel::OBPlugin *,OpenBabel::CharPtrLess >::const_iterator > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; result = OpenBabel::OBPlugin::End((char const *)arg1); {
    OpenBabel::OBPlugin::PluginIterator * resultobj = new OpenBabel::OBPlugin::PluginIterator((const OpenBabel::OBPlugin::PluginIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator, 1); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_GetMap) { OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; zval **args[1];
  OpenBabel::OBPlugin::PluginMapType *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBPlugin, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBPlugin_GetMap. Expected SWIGTYPE_p_OpenBabel__OBPlugin"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBPlugin::PluginMapType *) &((OpenBabel::OBPlugin const *)arg1)->GetMap();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t, 0);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBPlugin_LoadAllPlugins) { SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; } 
  OpenBabel::OBPlugin::LoadAllPlugins(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_stringbuf) { std::stringbuf *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (std::stringbuf *)new std::stringbuf();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__stringbuf, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_stringbuf(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  std::stringbuf *arg1 = (std::stringbuf *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (std::stringbuf *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__stringbuf TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::stringbuf resource already free'd"); delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBError__SWIG_0) { std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; OpenBabel::obMessageLevel arg6 ; std::string temp1 ; std::string temp2 ;
  std::string temp3 ; std::string temp4 ; std::string temp5 ; zval **args[6]; OpenBabel::OBError *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  convert_to_string_ex(args[3]); temp4.assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3])); arg4 = &temp4;
  convert_to_string_ex(args[4]); temp5.assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4])); arg5 = &temp5; 
  convert_to_long_ex(args[5]); arg6 = (OpenBabel::obMessageLevel) Z_LVAL_PP(args[5]); ;
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBError, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBError__SWIG_1) { std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; std::string temp1 ; std::string temp2 ; std::string temp3 ;
  std::string temp4 ; std::string temp5 ; zval **args[5]; OpenBabel::OBError *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  convert_to_string_ex(args[3]); temp4.assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3])); arg4 = &temp4;
  convert_to_string_ex(args[4]); temp5.assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4])); arg5 = &temp5;
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBError, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBError__SWIG_2) { std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string temp1 ; std::string temp2 ; std::string temp3 ; std::string temp4 ; zval **args[4];
  OpenBabel::OBError *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  convert_to_string_ex(args[3]); temp4.assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3])); arg4 = &temp4;
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBError, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBError__SWIG_3) { std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string temp1 ; std::string temp2 ; std::string temp3 ; zval **args[3]; OpenBabel::OBError *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBError, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBError__SWIG_4) { std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string temp1 ;
  std::string temp2 ; zval **args[2]; OpenBabel::OBError *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBError, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBError__SWIG_5) { std::string *arg1 = 0 ; std::string temp1 ; zval **args[1];
  OpenBabel::OBError *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBError, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBError__SWIG_6) { OpenBabel::OBError *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBError *)new OpenBabel::OBError();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBError, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBError) { int argc; zval **argv[6]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) { _wrap_new_OBError__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}
   if (argc == 1) { _wrap_new_OBError__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBError__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_OBError__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_new_OBError__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_new_OBError__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 6) {
    _wrap_new_OBError__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBError'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBError_message) { OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBError, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBError_message. Expected SWIGTYPE_p_OpenBabel__OBError"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBError const *)arg1)->message();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBError_GetMethod) { OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBError, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBError_GetMethod. Expected SWIGTYPE_p_OpenBabel__OBError"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBError const *)arg1)->GetMethod();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBError_GetError) { OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBError, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBError_GetError. Expected SWIGTYPE_p_OpenBabel__OBError"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBError const *)arg1)->GetError();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBError_GetExplanation) { OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBError, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBError_GetExplanation. Expected SWIGTYPE_p_OpenBabel__OBError"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBError const *)arg1)->GetExplanation();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBError_GetPossibleCause) { OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBError, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBError_GetPossibleCause. Expected SWIGTYPE_p_OpenBabel__OBError"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBError const *)arg1)->GetPossibleCause();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBError_GetSuggestedRemedy) { OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBError, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBError_GetSuggestedRemedy. Expected SWIGTYPE_p_OpenBabel__OBError"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBError const *)arg1)->GetSuggestedRemedy();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBError_GetLevel) { OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; zval **args[1];
  OpenBabel::obMessageLevel result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBError, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBError_GetLevel. Expected SWIGTYPE_p_OpenBabel__OBError"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::obMessageLevel)((OpenBabel::OBError const *)arg1)->GetLevel(); { ZVAL_LONG(return_value, (long)result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBError(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBError *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBError TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBError resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMessageHandler) { OpenBabel::OBMessageHandler *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMessageHandler *)new OpenBabel::OBMessageHandler();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMessageHandler, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMessageHandler(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMessageHandler *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMessageHandler TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMessageHandler resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_ThrowError__SWIG_0) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::OBError arg2 ;
  OpenBabel::errorQualifier arg3 ; OpenBabel::OBError *tmp2 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_ThrowError. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__OBError, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMessageHandler_ThrowError. Expected SWIGTYPE_p_OpenBabel__OBError"); }
     arg2 = *tmp2; }   convert_to_long_ex(args[2]); arg3 = (OpenBabel::errorQualifier) Z_LVAL_PP(args[2]); ;
  (arg1)->ThrowError(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_ThrowError__SWIG_1) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::OBError arg2 ; OpenBabel::OBError *tmp2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_ThrowError. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__OBError, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMessageHandler_ThrowError. Expected SWIGTYPE_p_OpenBabel__OBError"); }
     arg2 = *tmp2; }  (arg1)->ThrowError(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_ThrowError__SWIG_2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  OpenBabel::obMessageLevel arg4 ; OpenBabel::errorQualifier arg5 ; std::string temp2 ; std::string temp3 ; zval **args[5];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_ThrowError. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;  convert_to_long_ex(args[3]);
  arg4 = (OpenBabel::obMessageLevel) Z_LVAL_PP(args[3]); ;  convert_to_long_ex(args[4]);
  arg5 = (OpenBabel::errorQualifier) Z_LVAL_PP(args[4]); ;
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_ThrowError__SWIG_3) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  OpenBabel::obMessageLevel arg4 ; std::string temp2 ; std::string temp3 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_ThrowError. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;  convert_to_long_ex(args[3]);
  arg4 = (OpenBabel::obMessageLevel) Z_LVAL_PP(args[3]); ;
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_ThrowError__SWIG_4) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string temp2 ; std::string temp3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_ThrowError. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_ThrowError) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMessageHandler_ThrowError__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_OpenBabel__OBError, 0) >= 0); } } 
    if (!_v) goto check_2; { _v = (Z_TYPE_PP(argv[2]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBMessageHandler_ThrowError__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 3) {
    _wrap_OBMessageHandler_ThrowError__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBMessageHandler_ThrowError__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBMessageHandler_ThrowError__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMessageHandler_ThrowError'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetMessagesOfLevel) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::obMessageLevel arg2 ; zval **args[2];
  std::vector< std::string > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetMessagesOfLevel. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::obMessageLevel) Z_LVAL_PP(args[1]); ; result = (arg1)->GetMessagesOfLevel(arg2); {
    std::vector< std::string > * resultobj = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__string_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_StartLogging) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_StartLogging. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->StartLogging(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_StopLogging) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_StopLogging. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->StopLogging(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_SetMaxLogEntries) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_SetMaxLogEntries. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetMaxLogEntries(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetMaxLogEntries) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetMaxLogEntries. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetMaxLogEntries(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_ClearLog) { OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_ClearLog. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ClearLog(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_SetOutputLevel) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::obMessageLevel arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_SetOutputLevel. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::obMessageLevel) Z_LVAL_PP(args[1]); ; (arg1)->SetOutputLevel(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetOutputLevel) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; OpenBabel::obMessageLevel result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetOutputLevel. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::obMessageLevel)(arg1)->GetOutputLevel();
  { ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_SetOutputStream) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::ostream *arg2 = (std::ostream *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_SetOutputStream. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMessageHandler_SetOutputStream. Expected SWIGTYPE_p_std__ostream"); }
     }  (arg1)->SetOutputStream(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetOutputStream) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; std::ostream *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetOutputStream. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::ostream *)(arg1)->GetOutputStream();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__ostream, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_StartErrorWrap) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_StartErrorWrap. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->StartErrorWrap(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_StopErrorWrap) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_StopErrorWrap. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->StopErrorWrap(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetErrorMessageCount) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetErrorMessageCount. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetErrorMessageCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetWarningMessageCount) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetWarningMessageCount. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetWarningMessageCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetInfoMessageCount) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetInfoMessageCount. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetInfoMessageCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetAuditMessageCount) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetAuditMessageCount. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetAuditMessageCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetDebugMessageCount) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetDebugMessageCount. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetDebugMessageCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMessageHandler_GetMessageSummary) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; zval **args[1]; std::string result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMessageHandler_GetMessageSummary. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetMessageSummary();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_obErrorLog_set) { OpenBabel::OBMessageHandler *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of obErrorLog_set. Expected SWIGTYPE_p_OpenBabel__OBMessageHandler"); }
     }  OpenBabel::obErrorLog = *arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_obErrorLog_get) { OpenBabel::OBMessageHandler *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMessageHandler *) &OpenBabel::obErrorLog;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_obLogBuf(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::obLogBuf *arg1 = (OpenBabel::obLogBuf *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::obLogBuf *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__obLogBuf TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::obLogBuf resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_obLogBuf) { OpenBabel::obLogBuf *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::obLogBuf *)new OpenBabel::obLogBuf();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__obLogBuf, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_c_Default) { OpenBabel::OBFormat **result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFormat **) &OpenBabel::OBFormat::Default();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_FindType) { char *arg1 = (char *) 0 ; zval **args[1]; OpenBabel::OBFormat *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBFormat *)OpenBabel::OBFormat::FindType((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_ReadMolecule) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_ReadMolecule. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFormat_ReadMolecule. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBFormat_ReadMolecule. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (bool)(arg1)->ReadMolecule(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_ReadChemObject) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_ReadChemObject. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFormat_ReadChemObject. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (bool)(arg1)->ReadChemObject(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_WriteMolecule) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_WriteMolecule. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFormat_WriteMolecule. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBFormat_WriteMolecule. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (bool)(arg1)->WriteMolecule(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_WriteChemObject) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_WriteChemObject. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFormat_WriteChemObject. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (bool)(arg1)->WriteChemObject(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_TargetClassDescription) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_TargetClassDescription. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(arg1)->TargetClassDescription(); {
    if(!result) { ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_GetType) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; zval **args[1];
  std::type_info *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_GetType. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::type_info *) &(arg1)->GetType();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__type_info, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_SpecificationURL) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_SpecificationURL. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(arg1)->SpecificationURL(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_GetMIMEType) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_GetMIMEType. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(arg1)->GetMIMEType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_Flags) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_Flags. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->Flags(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_SkipObjects) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; int arg2 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_SkipObjects. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBFormat_SkipObjects. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (int)(arg1)->SkipObjects(arg2,arg3); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_MakeNewInstance) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; zval **args[1];
  OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_MakeNewInstance. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBFormat *)(arg1)->MakeNewInstance();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_RegisterFormat__SWIG_0) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *arg2 = (char *) 0 ; char *arg3 = (char *) 0 ; zval **args[3]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_RegisterFormat. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;
  result = (int)(arg1)->RegisterFormat((char const *)arg2,(char const *)arg3); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_RegisterFormat__SWIG_1) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_RegisterFormat. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (int)(arg1)->RegisterFormat((char const *)arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_RegisterFormat) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBFormat_RegisterFormat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBFormat_RegisterFormat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBFormat_RegisterFormat'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_Display__SWIG_0) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  std::string *arg2 = 0 ; char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; std::string temp2 ; zval **args[4]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_Display. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }
   else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0; }  else { convert_to_string_ex(args[3]); arg4 = (char *) Z_STRVAL_PP(args[3]); }  ;
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3,(char const *)arg4); { ZVAL_BOOL(return_value,(result)?1:0); } 
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_Display__SWIG_1) { OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  std::string *arg2 = 0 ; char *arg3 = (char *) 0 ; std::string temp2 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFormat_Display. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }
   else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3); { ZVAL_BOOL(return_value,(result)?1:0); } 
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_Display) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBFormat_Display__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBFormat_Display__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBFormat_Display'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFormat_FormatFromMIME) { char *arg1 = (char *) 0 ; zval **args[1]; OpenBabel::OBFormat *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBFormat *)OpenBabel::OBFormat::FormatFromMIME((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFormat(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFormat *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFormat TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFormat resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConversion__SWIG_0) { std::istream *arg1 = (std::istream *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ; zval **args[2]; OpenBabel::OBConversion *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__istream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBConversion. Expected SWIGTYPE_p_std__istream"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBConversion. Expected SWIGTYPE_p_std__ostream"); }  } 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConversion, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConversion__SWIG_1) { std::istream *arg1 = (std::istream *) 0 ; zval **args[1];
  OpenBabel::OBConversion *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__istream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBConversion. Expected SWIGTYPE_p_std__istream"); }  } 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConversion, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConversion__SWIG_2) { OpenBabel::OBConversion *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConversion, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConversion__SWIG_3) { std::string arg1 ; std::string arg2 ; zval **args[2];
  OpenBabel::OBConversion *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConversion, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConversion__SWIG_4) { std::string arg1 ; zval **args[1]; OpenBabel::OBConversion *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConversion, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConversion__SWIG_5) { OpenBabel::OBConversion *arg1 = 0 ; zval **args[1];
  OpenBabel::OBConversion *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBConversion. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }  }
   result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion((OpenBabel::OBConversion const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConversion, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBConversion) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBConversion__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_std__istream, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBConversion__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBConversion, 0) >= 0); } } 
    if (!_v) goto check_3; _wrap_new_OBConversion__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 1) {
    _wrap_new_OBConversion__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_std__istream, 0) >= 0); } }  if (!_v) goto check_5; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__ostream, 0) >= 0); } }  if (!_v) goto check_5;
    _wrap_new_OBConversion__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_5: if (argc == 2) {
    _wrap_new_OBConversion__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBConversion'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBConversion(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBConversion *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBConversion TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBConversion resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_RegisterFormat__SWIG_0) { char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; char *arg3 = (char *) 0 ; zval **args[3]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_RegisterFormat. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }   if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;
  result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2,(char const *)arg3); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_RegisterFormat__SWIG_1) { char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_RegisterFormat. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_RegisterFormat) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_RegisterFormat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_RegisterFormat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_RegisterFormat'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FindFormat__SWIG_0) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FindFormat((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FindFormat__SWIG_1) { std::string arg1 ; zval **args[1];
  OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FindFormat(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FindFormat) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { int _v = 0; { _v = (Z_TYPE_PP(argv[0]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBConversion_FindFormat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 1) { _wrap_OBConversion_FindFormat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_FindFormat'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FormatFromExt__SWIG_0) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FormatFromExt__SWIG_1) { char *arg1 = (char *) 0 ; bool *arg2 = 0 ; zval **args[2];
  OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bool, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_FormatFromExt. Expected SWIGTYPE_p_bool"); }  } 
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt((char const *)arg1,*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FormatFromExt__SWIG_2) { std::string arg1 ; zval **args[1];
  OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FormatFromExt__SWIG_3) { std::string arg1 ; bool *arg2 = 0 ; zval **args[2];
  OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bool, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_FormatFromExt. Expected SWIGTYPE_p_bool"); }  } 
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt(arg1,*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FormatFromExt) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { int _v = 0; { _v = (Z_TYPE_PP(argv[0]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBConversion_FormatFromExt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 1) { _wrap_OBConversion_FormatFromExt__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    int _v = 0; { _v = (Z_TYPE_PP(argv[0]) == IS_STRING); }  if (!_v) goto check_3;
    _wrap_OBConversion_FormatFromExt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBConversion_FormatFromExt__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_FormatFromExt'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FormatFromMIME) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromMIME((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Description) { char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (char *)OpenBabel::OBConversion::Description(); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetInStream) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; std::istream *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetInStream. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::istream *)((OpenBabel::OBConversion const *)arg1)->GetInStream();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__istream, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetOutStream) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; std::ostream *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetOutStream. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::ostream *)((OpenBabel::OBConversion const *)arg1)->GetOutStream();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__ostream, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInStream__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ; bool arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInStream. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__istream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetInStream. Expected SWIGTYPE_p_std__istream"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; (arg1)->SetInStream(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInStream__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInStream. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__istream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetInStream. Expected SWIGTYPE_p_std__istream"); }  } 
  (arg1)->SetInStream(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInStream) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_SetInStream__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_SetInStream__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_SetInStream'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutStream__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ; bool arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOutStream. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetOutStream. Expected SWIGTYPE_p_std__ostream"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; (arg1)->SetOutStream(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutStream__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOutStream. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetOutStream. Expected SWIGTYPE_p_std__ostream"); }  } 
  (arg1)->SetOutStream(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutStream) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_SetOutStream__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_SetOutStream__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_SetOutStream'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInAndOutFormats__SWIG_0) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ; char *arg3 = (char *) 0 ;
  bool arg4 ; bool arg5 ; zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ; 
  convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ;  convert_to_boolean_ex(args[4]);
  arg5 = (bool) Z_LVAL_PP(args[4]); ;
  result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3,arg4,arg5); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInAndOutFormats__SWIG_1) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ; char *arg3 = (char *) 0 ;
  bool arg4 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ; 
  convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ;
  result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3,arg4); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInAndOutFormats__SWIG_2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ; char *arg3 = (char *) 0 ;
  zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;
  result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInAndOutFormats__SWIG_3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ; bool arg4 ; bool arg5 ; zval **args[5]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }   convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ;  convert_to_boolean_ex(args[4]);
  arg5 = (bool) Z_LVAL_PP(args[4]); ; result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3,arg4,arg5); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInAndOutFormats__SWIG_4) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ; bool arg4 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }   convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ;
  result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInAndOutFormats__SWIG_5) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBConversion_SetInAndOutFormats. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInAndOutFormats) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBConversion_SetInAndOutFormats__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 3) { _wrap_OBConversion_SetInAndOutFormats__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    int _v = 0; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } } 
    if (!_v) goto check_3; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } }  if (!_v) goto check_3;
    _wrap_OBConversion_SetInAndOutFormats__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 4) {
    _wrap_OBConversion_SetInAndOutFormats__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } } 
    if (!_v) goto check_5; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } }  if (!_v) goto check_5;
    _wrap_OBConversion_SetInAndOutFormats__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_5: if (argc == 5) {
    _wrap_OBConversion_SetInAndOutFormats__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_SetInAndOutFormats'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInFormat__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->SetInFormat((char const *)arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInFormat__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(arg1)->SetInFormat((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInFormat__SWIG_2) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetInFormat. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->SetInFormat(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInFormat__SWIG_3) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetInFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetInFormat. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  result = (bool)(arg1)->SetInFormat(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetInFormat) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBConversion_SetInFormat__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBConversion_SetInFormat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } } 
    if (!_v) goto check_3; _wrap_OBConversion_SetInFormat__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3:
  if (argc == 3) { _wrap_OBConversion_SetInFormat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_SetInFormat'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutFormat__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOutFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->SetOutFormat((char const *)arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutFormat__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOutFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(arg1)->SetOutFormat((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutFormat__SWIG_2) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOutFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetOutFormat. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->SetOutFormat(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutFormat__SWIG_3) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOutFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetOutFormat. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  result = (bool)(arg1)->SetOutFormat(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutFormat) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBConversion_SetOutFormat__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBConversion_SetOutFormat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBFormat, 0) >= 0); } } 
    if (!_v) goto check_3; _wrap_OBConversion_SetOutFormat__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3:
  if (argc == 3) { _wrap_OBConversion_SetOutFormat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_SetOutFormat'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetInFormat) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetInFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetInFormat();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetOutFormat) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetOutFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetOutFormat();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetInGzipped) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetInGzipped. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::OBConversion const *)arg1)->GetInGzipped(); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetOutGzipped) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetOutGzipped. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::OBConversion const *)arg1)->GetOutGzipped(); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetInFilename) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetInFilename. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBConversion const *)arg1)->GetInFilename();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetOutFilename) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetOutFilename. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBConversion const *)arg1)->GetOutFilename();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetInPos) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; std::streampos result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetInPos. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBConversion const *)arg1)->GetInPos();
  { std::streampos * resultobj = new std::streampos((const std::streampos &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__streampos, 1); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetInLen) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetInLen. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBConversion const *)arg1)->GetInLen();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetTitle) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char *)((OpenBabel::OBConversion const *)arg1)->GetTitle(); { if(!result) { ZVAL_NULL(return_value); }  else {
      ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetAuxConv) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; OpenBabel::OBConversion *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetAuxConv. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBConversion *)((OpenBabel::OBConversion const *)arg1)->GetAuxConv();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBConversion, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetAuxConv) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetAuxConv. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_SetAuxConv. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  (arg1)->SetAuxConv(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_IsOption__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; OpenBabel::OBConversion::Option_type arg3 ; zval **args[3]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_IsOption. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  convert_to_long_ex(args[2]);
  arg3 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[2]); ;
  result = (char *)(arg1)->IsOption((char const *)arg2,arg3); { if(!result) { ZVAL_NULL(return_value); }  else {
      ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_IsOption__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_IsOption. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (char *)(arg1)->IsOption((char const *)arg2); { if(!result) { ZVAL_NULL(return_value); }  else {
      ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_IsOption) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_IsOption__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_IsOption__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_IsOption'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetOptions) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion::Option_type arg2 ; zval **args[2]; std::map< std::string,std::string > *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetOptions. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[1]); ;
  result = (std::map< std::string,std::string > *)(arg1)->GetOptions(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_AddOption__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; OpenBabel::OBConversion::Option_type arg3 ; char *arg4 = (char *) 0 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_AddOption. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  convert_to_long_ex(args[2]);
  arg3 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[2]); ;  if ((*args[3])->type==IS_NULL) { arg4 = (char *) 0; }
   else { convert_to_string_ex(args[3]); arg4 = (char *) Z_STRVAL_PP(args[3]); }  ;
  (arg1)->AddOption((char const *)arg2,arg3,(char const *)arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_AddOption__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; OpenBabel::OBConversion::Option_type arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_AddOption. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  convert_to_long_ex(args[2]);
  arg3 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[2]); ; (arg1)->AddOption((char const *)arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_AddOption__SWIG_2) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_AddOption. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->AddOption((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_AddOption) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_AddOption__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_AddOption__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBConversion_AddOption__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_AddOption'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_RemoveOption) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; OpenBabel::OBConversion::Option_type arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_RemoveOption. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  convert_to_long_ex(args[2]);
  arg3 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[2]); ;
  result = (bool)(arg1)->RemoveOption((char const *)arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOptions) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ; OpenBabel::OBConversion::Option_type arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOptions. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;  convert_to_long_ex(args[2]);
  arg3 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[2]); ; (arg1)->SetOptions((char const *)arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_RegisterOptionParam__SWIG_0) { std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; int arg3 ; OpenBabel::OBConversion::Option_type arg4 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_RegisterOptionParam. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }   convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]);
  arg4 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[3]); ;
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_RegisterOptionParam__SWIG_1) { std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_RegisterOptionParam. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }   convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_RegisterOptionParam__SWIG_2) { std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_RegisterOptionParam. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_RegisterOptionParam) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_RegisterOptionParam__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_RegisterOptionParam__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBConversion_RegisterOptionParam__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_RegisterOptionParam'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetOptionParams) { std::string arg1 ; OpenBabel::OBConversion::Option_type arg2 ;
  zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[1]); ;
  result = (int)OpenBabel::OBConversion::GetOptionParams(arg1,arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_CopyOptions__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBConversion::Option_type arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_CopyOptions. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_CopyOptions. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }   convert_to_long_ex(args[2]); arg3 = (OpenBabel::OBConversion::Option_type) Z_LVAL_PP(args[2]); ;
  (arg1)->CopyOptions(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_CopyOptions__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_CopyOptions. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_CopyOptions. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  (arg1)->CopyOptions(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_CopyOptions) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_CopyOptions__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_CopyOptions__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_CopyOptions'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetSupportedInputFormat) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; zval **args[1]; std::vector< std::string > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetSupportedInputFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetSupportedInputFormat(); {
    std::vector< std::string > * resultobj = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__string_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetSupportedOutputFormat) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; zval **args[1]; std::vector< std::string > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetSupportedOutputFormat. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetSupportedOutputFormat(); {
    std::vector< std::string > * resultobj = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__string_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Convert__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ; std::ostream *arg3 = (std::ostream *) 0 ; zval **args[3]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_Convert. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__istream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_Convert. Expected SWIGTYPE_p_std__istream"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBConversion_Convert. Expected SWIGTYPE_p_std__ostream"); }  } 
  result = (int)(arg1)->Convert(arg2,arg3); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Convert__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_Convert. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->Convert(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Convert) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBConversion_Convert__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_Convert__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_Convert'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_FullConvert) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::vector< std::string > *arg2 = 0 ; std::string *arg3 = 0 ; std::vector< std::string > *arg4 = 0 ; std::string temp3 ;
  zval **args[4]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_FullConvert. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_FullConvert. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     }  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3; {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBConversion_FullConvert. Expected SWIGTYPE_p_std__vectorT_std__string_t"); }
     }  result = (int)(arg1)->FullConvert(*arg2,*arg3,*arg4); { ZVAL_LONG(return_value,result); } 
  ZVAL_STRINGL(*(args[2]), const_cast<char*>(arg3->data()), arg3->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_AddChemObject) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_AddChemObject. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_AddChemObject. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  result = (int)(arg1)->AddChemObject(arg2); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetChemObject) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; OpenBabel::OBBase *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetChemObject. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBase *)(arg1)->GetChemObject();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_IsLast) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_IsLast. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsLast(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_IsFirstInput) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_IsFirstInput. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsFirstInput(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetFirstInput__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetFirstInput. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetFirstInput(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetFirstInput__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetFirstInput. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetFirstInput(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetFirstInput) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBConversion_SetFirstInput__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBConversion_SetFirstInput__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_SetFirstInput'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetOutputIndex) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetOutputIndex. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBConversion const *)arg1)->GetOutputIndex(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOutputIndex) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOutputIndex. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetOutputIndex(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetMoreFilesToCome) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetMoreFilesToCome. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetMoreFilesToCome(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOneObjectOnly__SWIG_0) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOneObjectOnly. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetOneObjectOnly(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOneObjectOnly__SWIG_1) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetOneObjectOnly. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetOneObjectOnly(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetOneObjectOnly) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBConversion_SetOneObjectOnly__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBConversion_SetOneObjectOnly__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_SetOneObjectOnly'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_SetLast) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_SetLast. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetLast(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_IsLastFile) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_IsLastFile. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsLastFile(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetCount) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_GetCount. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBConversion const *)arg1)->GetCount(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_GetDefaultFormat) { OpenBabel::OBFormat *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::GetDefaultFormat();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFormat, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Write__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::ostream *arg3 = (std::ostream *) 0 ; zval **args[3]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_Write. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_Write. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBConversion_Write. Expected SWIGTYPE_p_std__ostream"); }  } 
  result = (bool)(arg1)->Write(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Write__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_Write. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_Write. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  result = (bool)(arg1)->Write(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Write) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_Write__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_Write__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_Write'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_WriteString__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; bool arg3 ; zval **args[3]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_WriteString. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_WriteString. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (arg1)->WriteString(arg2,arg3);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_WriteString__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_WriteString. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_WriteString. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  result = (arg1)->WriteString(arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_WriteString) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_WriteString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_WriteString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_WriteString'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_WriteFile) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_WriteFile. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_WriteFile. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }
   convert_to_string_ex(args[2]); (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  result = (bool)(arg1)->WriteFile(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_CloseOutFile) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_CloseOutFile. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->CloseOutFile(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Read__SWIG_0) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::istream *arg3 = (std::istream *) 0 ; zval **args[3]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_Read. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_Read. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__istream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBConversion_Read. Expected SWIGTYPE_p_std__istream"); }  } 
  result = (bool)(arg1)->Read(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Read__SWIG_1) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_Read. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_Read. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  result = (bool)(arg1)->Read(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_Read) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_Read__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_Read__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_Read'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_ReadString) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_ReadString. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_ReadString. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }
   convert_to_string_ex(args[2]); (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  result = (bool)(arg1)->ReadString(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_ReadFile) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_ReadFile. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBConversion_ReadFile. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  convert_to_string_ex(args[2]); (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  result = (bool)(arg1)->ReadFile(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_OpenInAndOutFiles) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::string arg2 ; std::string arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_OpenInAndOutFiles. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); result = (bool)(arg1)->OpenInAndOutFiles(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_ReportNumberConverted__SWIG_0) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int arg2 ;
  OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_ReportNumberConverted. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBFormat, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBConversion_ReportNumberConverted. Expected SWIGTYPE_p_OpenBabel__OBFormat"); }
     }  (arg1)->ReportNumberConverted(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_ReportNumberConverted__SWIG_1) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_ReportNumberConverted. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->ReportNumberConverted(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_ReportNumberConverted) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBConversion_ReportNumberConverted__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBConversion_ReportNumberConverted__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBConversion_ReportNumberConverted'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBConversion_NumInputObjects) { OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBConversion_NumInputObjects. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->NumInputObjects(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidue__SWIG_0) { OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidue__SWIG_1) { OpenBabel::OBResidue *arg1 = 0 ; zval **args[1];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue((OpenBabel::OBResidue const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidue) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBResidue'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBResidue(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBResidue *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBResidue TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBResidue resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_AddAtom) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->AddAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_InsertAtom) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_InsertAtom. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_InsertAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->InsertAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_RemoveAtom) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_RemoveAtom. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_RemoveAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->RemoveAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetName) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetName. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetName((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetNum__SWIG_0) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetNum. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetNum__SWIG_1) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::string arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetNum. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (arg1)->SetNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetNum) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBResidue_SetNum__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBResidue_SetNum__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidue_SetNum'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetChain) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; char arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetChain. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]); ; (arg1)->SetChain(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetChainNum) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetChainNum. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetChainNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetIdx) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetInsertionCode) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; char arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetInsertionCode. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]); ; (arg1)->SetInsertionCode(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetAtomID) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; std::string *arg3 = 0 ; std::string temp3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetAtomID. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_SetAtomID. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  (arg1)->SetAtomID(arg2,(std::string const &)*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetHetAtom) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetHetAtom. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_SetHetAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; (arg1)->SetHetAtom(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_SetSerialNum) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; unsigned int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_SetSerialNum. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_SetSerialNum. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
    convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; (arg1)->SetSerialNum(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetName) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetName. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBResidue const *)arg1)->GetName();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetNum) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetNum. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetNumString) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetNumString. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetNumString();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetNumAtoms) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetNumAtoms. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetNumAtoms(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetChain) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  char result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetChain. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char)((OpenBabel::OBResidue const *)arg1)->GetChain(); {
    ZVAL_STRINGL(return_value,&result, 1, 1); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetChainNum) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetChainNum. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetChainNum(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetIdx) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetIdx(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetResKey) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetResKey. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetResKey(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetAtoms) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetAtoms. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBResidue const *)arg1)->GetAtoms(); {
    std::vector< OpenBabel::OBAtom * > * resultobj = new std::vector< OpenBabel::OBAtom * >((const std::vector< OpenBabel::OBAtom * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetBonds__SWIG_0) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; bool arg2 ;
  zval **args[2]; SwigValueWrapper< std::vector< OpenBabel::OBBond * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetBonds. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = ((OpenBabel::OBResidue const *)arg1)->GetBonds(arg2); {
    std::vector< OpenBabel::OBBond * > * resultobj = new std::vector< OpenBabel::OBBond * >((const std::vector< OpenBabel::OBBond * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetBonds__SWIG_1) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetBonds. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBResidue const *)arg1)->GetBonds(); {
    std::vector< OpenBabel::OBBond * > * resultobj = new std::vector< OpenBabel::OBBond * >((const std::vector< OpenBabel::OBBond * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetBonds) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidue_GetBonds__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBResidue_GetBonds__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidue_GetBonds'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetAtomID) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetAtomID. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_GetAtomID. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = ((OpenBabel::OBResidue const *)arg1)->GetAtomID(arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetSerialNum) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetSerialNum. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_GetSerialNum. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetSerialNum(arg2); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetInsertionCode) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  zval **args[1]; char result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetInsertionCode. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char)((OpenBabel::OBResidue const *)arg1)->GetInsertionCode(); { ZVAL_STRINGL(return_value,&result, 1, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetAminoAcidProperty) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetAminoAcidProperty. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAminoAcidProperty(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetAtomProperty) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; int arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetAtomProperty. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_GetAtomProperty. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }   convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAtomProperty(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_GetResidueProperty) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_GetResidueProperty. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)((OpenBabel::OBResidue const *)arg1)->GetResidueProperty(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_IsHetAtom) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->IsHetAtom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_IsResidueType) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_IsResidueType. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)((OpenBabel::OBResidue const *)arg1)->IsResidueType(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_BeginAtoms) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_BeginAtoms. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginAtoms(); {
    OpenBabel::OBAtomIterator * resultobj = new OpenBabel::OBAtomIterator((const OpenBabel::OBAtomIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_EndAtoms) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_EndAtoms. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndAtoms(); {
    OpenBabel::OBAtomIterator * resultobj = new OpenBabel::OBAtomIterator((const OpenBabel::OBAtomIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_BeginAtom) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::vector< OpenBabel::OBAtom * >::iterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_BeginAtom. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_BeginAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(arg1)->BeginAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidue_NextAtom) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::vector< OpenBabel::OBAtom * >::iterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidue_NextAtom. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidue_NextAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(arg1)->NextAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_Residue_set) { char (*arg1)[4] ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_a_4__char, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Residue_set. Expected SWIGTYPE_p_a_4__char"); }  }  {
    char (*inp)[4] = (char (*)[4])(arg1); char (*dest)[4] = (char (*)[4])(OpenBabel::Residue); size_t ii = 0;
    for (; ii < 100; ++ii) { char *ip = inp[ii]; char *dp = dest[ii]; size_t jj = 0; for (; jj < 4; ++jj) dp[jj] = ip[jj]; }  } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_Residue_get) { char (*result)[4] = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (char (*)[4])(char (*)[4])OpenBabel::Residue;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_a_4__char, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ElemDesc_set) { char (*arg1)[4] ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_a_4__char, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ElemDesc_set. Expected SWIGTYPE_p_a_4__char"); }  }  {
    char (*inp)[4] = (char (*)[4])(arg1); char (*dest)[4] = (char (*)[4])(OpenBabel::ElemDesc); size_t ii = 0;
    for (; ii < 1024; ++ii) { char *ip = inp[ii]; char *dp = dest[ii]; size_t jj = 0; for (; jj < 4; ++jj) dp[jj] = ip[jj]; }  }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ElemDesc_get) { char (*result)[4] = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (char (*)[4])(char (*)[4])OpenBabel::ElemDesc;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_a_4__char, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ResNo_set) { unsigned int arg1 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (unsigned int) Z_LVAL_PP(args[0]); ; OpenBabel::ResNo = arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ResNo_get) { unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (unsigned int)OpenBabel::ResNo; { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ElemNo_set) { unsigned int arg1 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (unsigned int) Z_LVAL_PP(args[0]); ; OpenBabel::ElemNo = arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ElemNo_get) { unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (unsigned int)OpenBabel::ElemNo; { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__a_set) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__a_set. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBInternalCoord__a_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if (arg1) (arg1)->_a = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__a_get) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__a_get. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->_a);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__b_set) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__b_set. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBInternalCoord__b_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if (arg1) (arg1)->_b = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__b_get) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__b_get. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->_b);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__c_set) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__c_set. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBInternalCoord__c_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if (arg1) (arg1)->_c = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__c_get) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__c_get. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->_c);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__dst_set) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__dst_set. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; if (arg1) (arg1)->_dst = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__dst_get) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__dst_get. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double) ((arg1)->_dst); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__ang_set) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__ang_set. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; if (arg1) (arg1)->_ang = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__ang_get) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__ang_get. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double) ((arg1)->_ang); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__tor_set) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__tor_set. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; if (arg1) (arg1)->_tor = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBInternalCoord__tor_get) { OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBInternalCoord__tor_get. Expected SWIGTYPE_p_OpenBabel__OBInternalCoord"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double) ((arg1)->_tor); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBInternalCoord__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double arg4 ;
  double arg5 ; double arg6 ; zval **args[6]; OpenBabel::OBInternalCoord *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;  convert_to_double_ex(args[4]);
  arg5 = (double) Z_DVAL_PP(args[4]); ;  convert_to_double_ex(args[5]); arg6 = (double) Z_DVAL_PP(args[5]); ;
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBInternalCoord__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double arg4 ;
  double arg5 ; zval **args[5]; OpenBabel::OBInternalCoord *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;  convert_to_double_ex(args[4]);
  arg5 = (double) Z_DVAL_PP(args[4]); ;
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3,arg4,arg5);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBInternalCoord__SWIG_2) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double arg4 ;
  zval **args[4]; OpenBabel::OBInternalCoord *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3,arg4);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBInternalCoord__SWIG_3) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3];
  OpenBabel::OBInternalCoord *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBInternalCoord__SWIG_4) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBInternalCoord *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBInternalCoord__SWIG_5) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::OBInternalCoord *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBInternalCoord__SWIG_6) { OpenBabel::OBInternalCoord *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBInternalCoord) { int argc; zval **argv[6]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBInternalCoord__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBInternalCoord__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBInternalCoord__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_OBInternalCoord__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_new_OBInternalCoord__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_new_OBInternalCoord__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 6) {
    _wrap_new_OBInternalCoord__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBInternalCoord'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBInternalCoord(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBInternalCoord *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBInternalCoord TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBInternalCoord resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_Visit_set) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; if (arg1) (arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_Visit_get) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtom) { OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::OBAtom *)new OpenBabel::OBAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAtom(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAtom *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAtom TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAtom resource already free'd"); delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_Duplicate) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->Duplicate(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetIdx) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetId) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned long arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetId. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetHyb) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetHyb. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetHyb(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetAtomicNum) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetAtomicNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetIsotope) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetIsotope. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetIsotope(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetImplicitValence) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetImplicitValence(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IncrementImplicitValence) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IncrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->IncrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_DecrementImplicitValence) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_DecrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->DecrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetFormalCharge) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetFormalCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetSpinMultiplicity) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; short arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]); ; (arg1)->SetSpinMultiplicity(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetType__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetType. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetType((char const *)arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetType__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetType. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetType((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBAtom_SetType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBAtom_SetType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_SetType'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetPartialCharge) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetPartialCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetVector__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetVector. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_SetVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  (arg1)->SetVector((OpenBabel::vector3 const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetVector__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double arg2 ;
  double arg3 ; double arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetVector. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;  convert_to_double_ex(args[3]);
  arg4 = (double) Z_DVAL_PP(args[3]); ; (arg1)->SetVector(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetCoordPtr) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double **arg2 = (double **) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_SetCoordPtr. Expected SWIGTYPE_p_p_double"); }  } 
  (arg1)->SetCoordPtr(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetVector__SWIG_2) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetVector. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetVector(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetVector) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtom_SetVector__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtom_SetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBAtom_SetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_SetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetResidue) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  (arg1)->SetResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetParent) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetParent. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  (arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetAromatic) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_UnsetAromatic) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetClockwiseStereo) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetAntiClockwiseStereo) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetAntiClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetAntiClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetPositiveStereo) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetPositiveStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetNegativeStereo) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetNegativeStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_UnsetStereo) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_UnsetStereo. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetStereo(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetInRing) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetChiral) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetChiral. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetChiral(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_ClearCoordPtr) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_ClearCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ClearCoordPtr(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetFormalCharge) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBAtom const *)arg1)->GetFormalCharge(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetAtomicNum) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetAtomicNum(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetIsotope) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned short result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetIsotope. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short)((OpenBabel::OBAtom const *)arg1)->GetIsotope(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetSpinMultiplicity) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBAtom const *)arg1)->GetSpinMultiplicity(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetAtomicMass) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetAtomicMass. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBAtom const *)arg1)->GetAtomicMass(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetExactMass) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBAtom const *)arg1)->GetExactMass();
  { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetIdx) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetIdx();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetIndex) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetIndex. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetIndex(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetId) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetId. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)((OpenBabel::OBAtom const *)arg1)->GetId();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetCoordinateIdx) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetCoordinateIdx. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCoordinateIdx(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetCIdx) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetCIdx. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCIdx(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetValence) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetValence. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetValence(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetHyb) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetHyb. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHyb();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetImplicitValence) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetImplicitValence(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetHvyValence) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetHvyValence. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHvyValence(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetHeteroValence) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetHeteroValence. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHeteroValence(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetType) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetType. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(arg1)->GetType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetX) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetX. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBAtom const *)arg1)->GetX(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetY) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetY. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBAtom const *)arg1)->GetY(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetZ) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetZ. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBAtom const *)arg1)->GetZ(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_x) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_x. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBAtom const *)arg1)->x(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_y) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_y. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBAtom const *)arg1)->y(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_z) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_z. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBAtom const *)arg1)->z(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetCoordinate) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetCoordinate. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(arg1)->GetCoordinate();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetVector__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetVector. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetVector__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetVector. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::vector3 *) &((OpenBabel::OBAtom const *)arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetVector) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtom_GetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBAtom_GetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_GetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetPartialCharge) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetPartialCharge(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetResidue__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBResidue *)(arg1)->GetResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetResidue__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool arg2 ;
  zval **args[2]; OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (OpenBabel::OBResidue *)(arg1)->GetResidue(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetResidue) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtom_GetResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtom_GetResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_GetResidue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetParent) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetParent. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetNewBondVector) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; double arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  result = (bool)(arg1)->GetNewBondVector(*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetNextAtom) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetNextAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(arg1)->GetNextAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_BeginBonds) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_BeginBonds. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_EndBonds) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_EndBonds. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_BeginBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_BeginBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_BeginBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(arg1)->BeginBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_NextBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_NextBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_NextBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(arg1)->NextBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_BeginNbrAtom) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_BeginNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_BeginNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(arg1)->BeginNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_NextNbrAtom) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_NextNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_NextNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(arg1)->NextNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetDistance__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (double)(arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetDistance__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (double)(arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetDistance__SWIG_2) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_GetDistance. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (double)(arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetDistance) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBAtom_GetDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBAtom_GetDistance__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { _wrap_OBAtom_GetDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_GetDistance'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetAngle__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; int arg3 ;
  zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; result = (double)(arg1)->GetAngle(arg2,arg3); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetAngle__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAtom_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (double)(arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_GetAngle) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBAtom_GetAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 3) {
    _wrap_OBAtom_GetAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_GetAngle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_NewResidue) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_NewResidue. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->NewResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_AddResidue) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  (arg1)->AddResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_DeleteResidue) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->DeleteResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_AddBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_AddBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_AddBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  (arg1)->AddBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_InsertBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_InsertBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAtom_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  (arg1)->InsertBond(*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_DeleteBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  result = (bool)(arg1)->DeleteBond(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_ClearBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_ClearBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ClearBond(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HtoMethyl) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HtoMethyl. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HtoMethyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SetHybAndGeom) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SetHybAndGeom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (bool)(arg1)->SetHybAndGeom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_ForceNoH) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_ForceNoH. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ForceNoH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasNoHForced) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasNoHForced. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasNoHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_ForceImplH) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_ForceImplH. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ForceImplH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasImplHForced) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasImplHForced. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasImplHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_CountFreeOxygens) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_CountFreeOxygens. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountFreeOxygens(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_CountFreeSulfurs) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_CountFreeSulfurs. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountFreeSulfurs(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_ImplicitHydrogenCount) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_ImplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ImplicitHydrogenCount(); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_ExplicitHydrogenCount__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool arg2 ; zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_ExplicitHydrogenCount__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount(); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_ExplicitHydrogenCount) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtom_ExplicitHydrogenCount__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtom_ExplicitHydrogenCount__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_ExplicitHydrogenCount'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_MemberOfRingCount) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_MemberOfRingCount. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingCount(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_MemberOfRingSize) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_MemberOfRingSize. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingSize(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_CountRingBonds) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_CountRingBonds. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountRingBonds(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_SmallestBondAngle) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_SmallestBondAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->SmallestBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_AverageBondAngle) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_AverageBondAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->AverageBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_BOSum) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_BOSum. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->BOSum();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_KBOSum) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_KBOSum. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->KBOSum();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_LewisAcidBaseCounts) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  SwigValueWrapper< std::pair< int,int > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_LewisAcidBaseCounts. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBAtom const *)arg1)->LewisAcidBaseCounts(); {
    std::pair< int,int > * resultobj = new std::pair< int,int >((const std::pair< int,int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__pairT_int_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasResidue) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasResidue. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasResidue(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHetAtom) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsHetAtom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHydrogen__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHydrogen__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBAtom const *)arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHydrogen) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtom_IsHydrogen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBAtom_IsHydrogen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_IsHydrogen'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsCarbon) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsCarbon. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsCarbon(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsNitrogen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsNitrogen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsOxygen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsSulfur) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsSulfur. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsSulfur(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsPhosphorus) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsPhosphorus. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsPhosphorus(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsAromatic) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBAtom const *)arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsInRing) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsInRingSize) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsInRingSize. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRingSize(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHeteroatom) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsHeteroatom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsHeteroatom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsNotCorH) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsNotCorH. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsNotCorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsConnected) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->IsConnected(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsOneThree) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->IsOneThree(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsOneFour) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtom_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->IsOneFour(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsCarboxylOxygen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsCarboxylOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsCarboxylOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsPhosphateOxygen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsPhosphateOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsPhosphateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsSulfateOxygen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsSulfateOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsSulfateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsNitroOxygen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsNitroOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsNitroOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsAmideNitrogen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsAmideNitrogen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsAmideNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsPolarHydrogen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsNonPolarHydrogen) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsNonPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsNonPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsAromaticNOxide) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsAromaticNOxide. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsAromaticNOxide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsChiral) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsChiral. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsChiral(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsAxial) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsAxial. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsAxial(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsClockwise) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsClockwise. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsAntiClockwise) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsAntiClockwise. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsAntiClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsPositiveStereo) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsPositiveStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsNegativeStereo) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsNegativeStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasChiralitySpecified) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasChiralitySpecified. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasChiralitySpecified(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasChiralVolume) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasChiralVolume. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasChiralVolume(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHbondAcceptor) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsHbondAcceptor. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsHbondAcceptor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHbondAcceptorSimple) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsHbondAcceptorSimple. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsHbondAcceptorSimple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHbondDonor) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsHbondDonor. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsHbondDonor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsHbondDonorH) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsHbondDonorH. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsHbondDonorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_IsMetal) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_IsMetal. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsMetal(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasAlphaBetaUnsat__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->HasAlphaBetaUnsat(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasAlphaBetaUnsat__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasAlphaBetaUnsat(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasAlphaBetaUnsat) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtom_HasAlphaBetaUnsat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtom_HasAlphaBetaUnsat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtom_HasAlphaBetaUnsat'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasBondOfOrder) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasBondOfOrder. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->HasBondOfOrder(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_CountBondsOfOrder) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int arg2 ;
  zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_CountBondsOfOrder. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (int)(arg1)->CountBondsOfOrder(arg2); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HighestBondOrder) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HighestBondOrder. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->HighestBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasNonSingleBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasNonSingleBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasNonSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasSingleBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasSingleBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasDoubleBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasDoubleBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasDoubleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_HasAromaticBond) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_HasAromaticBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasAromaticBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtom_MatchesSMARTS) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; char *arg2 = (char *) 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtom_MatchesSMARTS. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(arg1)->MatchesSMARTS((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_Visit_set) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; if (arg1) (arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_Visit_get) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBBond) { OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::OBBond *)new OpenBabel::OBBond();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBBond(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBBond *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBBond TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBBond resource already free'd"); delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetIdx) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetId) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; unsigned long arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetId. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetBO) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetBO. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetBO(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetBondOrder) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetBondOrder. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetBondOrder(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetBegin) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetBegin. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBond_SetBegin. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->SetBegin(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetEnd) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetEnd. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBond_SetEnd. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->SetEnd(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetParent) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetParent. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBond_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  (arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetLength__SWIG_0) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; double arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetLength. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBond_SetLength. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; (arg1)->SetLength(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetLength__SWIG_1) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; double arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetLength. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; (arg1)->SetLength(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetLength) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBBond_SetLength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBBond_SetLength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBond_SetLength'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_Set) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; int arg5 ; int arg6 ;
  zval **args[6]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_Set. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBBond_Set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBBond_Set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;  convert_to_long_ex(args[5]); arg6 = (int) Z_LVAL_PP(args[5]);
  ; (arg1)->Set(arg2,arg3,arg4,arg5,arg6); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetKSingle) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetKSingle. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetKSingle(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetKDouble) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetKDouble. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetKDouble(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetKTriple) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetKTriple. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetKTriple(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetAromatic) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetWedge) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetWedge. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetWedge(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetHash) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetHash. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetWedgeOrHash) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetWedgeOrHash. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetWedgeOrHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetUp) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetUp. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetUp(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetDown) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetDown. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetDown(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetInRing__SWIG_0) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; (arg1)->SetInRing(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetInRing__SWIG_1) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetInRing) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBond_SetInRing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBBond_SetInRing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBond_SetInRing'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_SetClosure) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_SetClosure. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetClosure(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_UnsetHash) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_UnsetHash. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_UnsetWedge) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_UnsetWedge. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetWedge(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_UnsetUp) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_UnsetUp. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetUp(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_UnsetDown) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_UnsetDown. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetDown(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_UnsetAromatic) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_UnsetKekule) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_UnsetKekule. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetKekule(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetIdx) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetIdx();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetId) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetId. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)((OpenBabel::OBBond const *)arg1)->GetId();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetBO) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetBO. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBO();
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetBondOrder) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetBondOrder. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBondOrder(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetFlags) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetFlags. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetFlags(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetBeginAtomIdx) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetBeginAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBeginAtomIdx(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetEndAtomIdx) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetEndAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetEndAtomIdx(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetBeginAtom__SWIG_0) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetBeginAtom__SWIG_1) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBBond const *)arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetBeginAtom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBond_GetBeginAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBBond_GetBeginAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBond_GetBeginAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetEndAtom__SWIG_0) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetEndAtom__SWIG_1) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBBond const *)arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetEndAtom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBond_GetEndAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBBond_GetEndAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBond_GetEndAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetNbrAtom) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBond_GetNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBAtom *)(arg1)->GetNbrAtom(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetParent) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetParent. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetEquibLength) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetEquibLength. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBBond const *)arg1)->GetEquibLength(); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetLength) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetLength. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBBond const *)arg1)->GetLength(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_GetNbrAtomIdx) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_GetNbrAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBond_GetNbrAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (unsigned int)(arg1)->GetNbrAtomIdx(arg2); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_FindSmallestRing) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  OpenBabel::OBRing *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_FindSmallestRing. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBRing *)((OpenBabel::OBBond const *)arg1)->FindSmallestRing();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsAromatic) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBBond const *)arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsInRing) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBBond const *)arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsRotor__SWIG_0) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsRotor. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (bool)(arg1)->IsRotor(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsRotor__SWIG_1) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsRotor. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsRotor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsRotor) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBond_IsRotor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBBond_IsRotor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBond_IsRotor'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsAmide) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsAmide. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsPrimaryAmide) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsPrimaryAmide. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsPrimaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsSecondaryAmide) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsSecondaryAmide. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsSecondaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsTertiaryAmide) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsTertiaryAmide. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsTertiaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsEster) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsEster. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsEster(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsCarbonyl) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsCarbonyl. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsCarbonyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsSingle) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsSingle. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsSingle(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsDouble) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsDouble. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsDouble(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsTriple) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsTriple. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsTriple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsKSingle) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsKSingle. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsKSingle(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsKDouble) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsKDouble. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsKDouble(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsKTriple) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsKTriple. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsKTriple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsClosure) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsClosure. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsClosure(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsUp) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsUp. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsUp(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsDown) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsDown. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsDown(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsWedge) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsWedge. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsWedge(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsHash) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsHash. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsHash(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsWedgeOrHash) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsWedgeOrHash. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBBond const *)arg1)->IsWedgeOrHash();
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsCisOrTrans) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsCisOrTrans. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBBond const *)arg1)->IsCisOrTrans(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBond_IsDoubleBondGeometry) { OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBond_IsDoubleBondGeometry. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsDoubleBondGeometry(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBReaction) { OpenBabel::OBReaction *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBReaction *)new OpenBabel::OBReaction();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBReaction, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_NumReactants) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_NumReactants. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBReaction const *)arg1)->NumReactants(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_NumProducts) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_NumProducts. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBReaction const *)arg1)->NumProducts(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_AddReactant) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > arg2 ; obsharedptr< OpenBabel::OBMol > *tmp2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_AddReactant. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBReaction_AddReactant. Expected SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t"); }
     arg2 = *tmp2; }  (arg1)->AddReactant(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_AddProduct) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > arg2 ; obsharedptr< OpenBabel::OBMol > *tmp2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_AddProduct. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBReaction_AddProduct. Expected SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t"); }
     arg2 = *tmp2; }  (arg1)->AddProduct(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_SetTransitionState) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > arg2 ; obsharedptr< OpenBabel::OBMol > *tmp2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_SetTransitionState. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBReaction_SetTransitionState. Expected SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t"); }
     arg2 = *tmp2; }  (arg1)->SetTransitionState(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_AddAgent) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > arg2 ; obsharedptr< OpenBabel::OBMol > *tmp2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_AddAgent. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBReaction_AddAgent. Expected SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t"); }
     arg2 = *tmp2; }  (arg1)->AddAgent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_GetReactant) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  unsigned int arg2 ; zval **args[2]; SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_GetReactant. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (arg1)->GetReactant(arg2); {
    obsharedptr< OpenBabel::OBMol > * resultobj = new obsharedptr< OpenBabel::OBMol >((const obsharedptr< OpenBabel::OBMol > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_GetProduct) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  unsigned int arg2 ; zval **args[2]; SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_GetProduct. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (arg1)->GetProduct(arg2); {
    obsharedptr< OpenBabel::OBMol > * resultobj = new obsharedptr< OpenBabel::OBMol >((const obsharedptr< OpenBabel::OBMol > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_GetTransitionState) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  zval **args[1]; SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_GetTransitionState. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBReaction const *)arg1)->GetTransitionState(); {
    obsharedptr< OpenBabel::OBMol > * resultobj = new obsharedptr< OpenBabel::OBMol >((const obsharedptr< OpenBabel::OBMol > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_GetAgent) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; zval **args[1];
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_GetAgent. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBReaction const *)arg1)->GetAgent(); {
    obsharedptr< OpenBabel::OBMol > * resultobj = new obsharedptr< OpenBabel::OBMol >((const obsharedptr< OpenBabel::OBMol > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_GetTitle) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBReaction const *)arg1)->GetTitle();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_GetComment) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_GetComment. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBReaction const *)arg1)->GetComment();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_SetTitle) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetTitle((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_SetComment) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_SetComment. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetComment((std::string const &)*arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_IsReversible) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_IsReversible. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::OBReaction const *)arg1)->IsReversible(); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_SetReversible__SWIG_0) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_SetReversible. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetReversible(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_SetReversible__SWIG_1) { OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBReaction, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBReaction_SetReversible. Expected SWIGTYPE_p_OpenBabel__OBReaction"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetReversible(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_SetReversible) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBReaction_SetReversible__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBReaction_SetReversible__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBReaction_SetReversible'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBReaction_ClassDescription) { char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (char *)OpenBabel::OBReaction::ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBReaction(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBReaction *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBReaction TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBReaction resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMol__SWIG_0) { OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMol *)new OpenBabel::OBMol();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMol__SWIG_1) { OpenBabel::OBMol *arg1 = 0 ; zval **args[1]; OpenBabel::OBMol *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMol. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMol *)new OpenBabel::OBMol((OpenBabel::OBMol const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMol) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) { _wrap_new_OBMol__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  if (argc == 1) { _wrap_new_OBMol__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMol'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMol(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMol *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMol TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMol resource already free'd"); delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_add) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  zval **args[2]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_add. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_add. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMol *) &(arg1)->operator +=((OpenBabel::OBMol const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ReserveAtoms) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_ReserveAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->ReserveAtoms(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_CreateAtom) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_CreateAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(arg1)->CreateAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_CreateBond) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_CreateBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBond *)(arg1)->CreateBond();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_CreateResidue) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_CreateResidue. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBResidue *)(arg1)->CreateResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DestroyAtom) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DestroyAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DestroyAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->DestroyAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DestroyBond) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DestroyBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DestroyBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  (arg1)->DestroyBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DestroyResidue) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DestroyResidue. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DestroyResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   (arg1)->DestroyResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddAtom__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->AddAtom(*arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddAtom__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->AddAtom(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddAtom) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMol_AddAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_AddAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_AddAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_InsertAtom) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_InsertAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_InsertAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->InsertAtom(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddBond__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; zval **args[6]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ;  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]); ; result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5,arg6); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddBond__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; int arg5 ; zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ;  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ; result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddBond__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ; result = (bool)(arg1)->AddBond(arg2,arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddBond__SWIG_3) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_AddBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  result = (bool)(arg1)->AddBond(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddBond) { int argc; zval **argv[6]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMol_AddBond__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBMol_AddBond__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBMol_AddBond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 6) {
    _wrap_OBMol_AddBond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_AddBond'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddResidue) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBResidue *arg2 = 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  } 
  result = (bool)(arg1)->AddResidue(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NewAtom__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NewAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(arg1)->NewAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NewAtom__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned long arg2 ;
  zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NewAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBAtom *)(arg1)->NewAtom(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NewAtom) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_NewAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_NewAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_NewAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NewBond__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NewBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBond *)(arg1)->NewBond();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NewBond__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned long arg2 ;
  zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NewBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBBond *)(arg1)->NewBond(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NewBond) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_NewBond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_NewBond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_NewBond'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NewResidue) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NewResidue. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBResidue *)(arg1)->NewResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteAtom__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DeleteAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->DeleteAtom(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteAtom__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DeleteAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->DeleteAtom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteAtom) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMol_DeleteAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_DeleteAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_DeleteAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteBond__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->DeleteBond(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteBond__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  result = (bool)(arg1)->DeleteBond(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteBond) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMol_DeleteBond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_DeleteBond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_DeleteBond'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteResidue__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
    convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->DeleteResidue(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteResidue__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }  }
   result = (bool)(arg1)->DeleteResidue(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteResidue) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMol_DeleteResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_DeleteResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_DeleteResidue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_BeginModify) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_BeginModify. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->BeginModify(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_EndModify__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_EndModify. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; (arg1)->EndModify(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_EndModify__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_EndModify. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->EndModify(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_EndModify) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_EndModify__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_EndModify__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_EndModify'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetMod) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetMod. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetMod(); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_IncrementMod) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_IncrementMod. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->IncrementMod(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DecrementMod) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DecrementMod. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->DecrementMod(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetFlags) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetFlags. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetFlags(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetTitle__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (char *)((OpenBabel::OBMol const *)arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }  else {
      ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetTitle__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)((OpenBabel::OBMol const *)arg1)->GetTitle(); {
    if(!result) { ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NumAtoms) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NumAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumAtoms(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NumBonds) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NumBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumBonds(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NumHvyAtoms) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NumHvyAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->NumHvyAtoms(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NumResidues) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NumResidues. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumResidues(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NumRotors__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NumRotors. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (unsigned int)(arg1)->NumRotors(arg2); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NumRotors__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NumRotors. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->NumRotors(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NumRotors) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_NumRotors__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_NumRotors__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_NumRotors'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetAtom) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMol const *)arg1)->GetAtom(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetAtomById) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned long arg2 ;
  zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetAtomById. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMol const *)arg1)->GetAtomById(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetFirstAtom) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetFirstAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMol const *)arg1)->GetFirstAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetBond__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBBond *)((OpenBabel::OBMol const *)arg1)->GetBond(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetBondById) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned long arg2 ;
  zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetBondById. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBBond *)((OpenBabel::OBMol const *)arg1)->GetBondById(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetBond__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ;
  zval **args[3]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (OpenBabel::OBBond *)((OpenBabel::OBMol const *)arg1)->GetBond(arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetBond__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3];
  OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetBond. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBBond *)((OpenBabel::OBMol const *)arg1)->GetBond(arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetBond) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMol_GetBond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_2; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMol_GetBond__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 3) {
    _wrap_OBMol_GetBond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_GetBond'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetResidue) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBResidue *)((OpenBabel::OBMol const *)arg1)->GetResidue(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetInternalCoord) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBInternalCoord * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetInternalCoord(); {
    std::vector< OpenBabel::OBInternalCoord * > * resultobj = new std::vector< OpenBabel::OBInternalCoord * >((const std::vector< OpenBabel::OBInternalCoord * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetTorsion__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; int arg5 ; zval **args[5]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetTorsion. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ;  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ; result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetTorsion__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ; zval **args[5];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetTorsion. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_GetTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_GetTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBMol_GetTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBMol_GetTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetTorsion) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 5) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_1; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); }
      }  if (!_v) goto check_1; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMol_GetTorsion__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 5) {
    _wrap_OBMol_GetTorsion__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_GetTorsion'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetAngle) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBMol_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (double)(arg1)->GetAngle(arg2,arg3,arg4); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AreInSameRing) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AreInSameRing. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_AreInSameRing. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_AreInSameRing. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (int)(arg1)->AreInSameRing(arg2,arg3); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetFormula) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetFormula. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetFormula();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetSpacedFormula__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  char *arg3 = (char *) 0 ; bool arg4 ; zval **args[4]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetSpacedFormula. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;  convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ;
  result = (arg1)->GetSpacedFormula(arg2,(char const *)arg3,arg4);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetSpacedFormula__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  char *arg3 = (char *) 0 ; zval **args[3]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetSpacedFormula. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]); }  ; result = (arg1)->GetSpacedFormula(arg2,(char const *)arg3);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetSpacedFormula__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetSpacedFormula. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (arg1)->GetSpacedFormula(arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetSpacedFormula__SWIG_3) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetSpacedFormula. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetSpacedFormula();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetSpacedFormula) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_GetSpacedFormula__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_GetSpacedFormula__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_GetSpacedFormula__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBMol_GetSpacedFormula__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_GetSpacedFormula'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetEnergy__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetEnergy. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)((OpenBabel::OBMol const *)arg1)->GetEnergy(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetMolWt__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetMolWt. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (double)(arg1)->GetMolWt(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetMolWt__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetMolWt. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetMolWt(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetMolWt) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_GetMolWt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_GetMolWt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_GetMolWt'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetExactMass__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (double)(arg1)->GetExactMass(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetExactMass__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetExactMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetExactMass) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_GetExactMass__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_GetExactMass__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_GetExactMass'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetTotalCharge) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetTotalCharge. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetTotalCharge(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetTotalSpinMultiplicity) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetTotalSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetTotalSpinMultiplicity(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetDimension) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  unsigned short result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetDimension. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short)((OpenBabel::OBMol const *)arg1)->GetDimension(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetCoordinates) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetCoordinates. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(arg1)->GetCoordinates();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetSSSR) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBRing * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetSSSR. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< OpenBabel::OBRing * > *) &(arg1)->GetSSSR();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetLSSR) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBRing * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetLSSR. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< OpenBabel::OBRing * > *) &(arg1)->GetLSSR();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AutomaticFormalCharge) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AutomaticFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->AutomaticFormalCharge(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AutomaticPartialCharge) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AutomaticPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->AutomaticPartialCharge(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetTitle__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; char *arg2 = (char *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetTitle((char const *)arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetTitle__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetTitle(*arg2);
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__string, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMol_SetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBMol_SetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_SetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetFormula) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::string arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetFormula. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (arg1)->SetFormula(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetEnergy) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetEnergy. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; (arg1)->SetEnergy(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetDimension) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned short arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetDimension. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]); ; (arg1)->SetDimension(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetTotalCharge) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetTotalCharge. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetTotalCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetTotalSpinMultiplicity) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetTotalSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetTotalSpinMultiplicity(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetInternalCoord) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBInternalCoord * > arg2 ; std::vector< OpenBabel::OBInternalCoord * > *tmp2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_SetInternalCoord. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t"); }
     arg2 = *tmp2; }  (arg1)->SetInternalCoord(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetAutomaticFormalCharge) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetAutomaticFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetAutomaticFormalCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetAutomaticPartialCharge) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetAutomaticPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetAutomaticPartialCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetAromaticPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetAromaticPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetAromaticPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetSSSRPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetSSSRPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetSSSRPerceived(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetLSSRPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetLSSRPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetLSSRPerceived(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetRingAtomsAndBondsPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetRingAtomsAndBondsPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetRingAtomsAndBondsPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetAtomTypesPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetAtomTypesPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetAtomTypesPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetRingTypesPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetRingTypesPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetRingTypesPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetChainsPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetChainsPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetChainsPerceived(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetChiralityPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetChiralityPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetChiralityPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetPartialChargesPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetPartialChargesPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetPartialChargesPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetHybridizationPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetHybridizationPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetHybridizationPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetImplicitValencePerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetImplicitValencePerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetImplicitValencePerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetKekulePerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetKekulePerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetKekulePerceived(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetClosureBondsPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetClosureBondsPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetClosureBondsPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetHydrogensAdded) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetHydrogensAdded. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetHydrogensAdded(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetCorrectedForPH) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetCorrectedForPH. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetCorrectedForPH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetAromaticCorrected) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetAromaticCorrected. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetAromaticCorrected(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetSpinMultiplicityAssigned) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetSpinMultiplicityAssigned. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetSpinMultiplicityAssigned(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetFlags) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetFlags. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetFlags(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_UnsetAromaticPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_UnsetAromaticPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetAromaticPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_UnsetSSSRPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_UnsetSSSRPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetSSSRPerceived(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_UnsetLSSRPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_UnsetLSSRPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetLSSRPerceived(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_UnsetRingTypesPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_UnsetRingTypesPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetRingTypesPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_UnsetPartialChargesPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_UnsetPartialChargesPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetPartialChargesPerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_UnsetImplicitValencePerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_UnsetImplicitValencePerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetImplicitValencePerceived(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_UnsetHydrogensAdded) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_UnsetHydrogensAdded. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetHydrogensAdded(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_UnsetFlag) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_UnsetFlag. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->UnsetFlag(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ClassDescription) { char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (char *)OpenBabel::OBMol::ClassDescription(); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_RenumberAtoms__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBAtom * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_RenumberAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_RenumberAtoms. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t"); }
     }  (arg1)->RenumberAtoms(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_RenumberAtoms__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< int > arg2 ; std::vector< int > *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_RenumberAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_RenumberAtoms. Expected SWIGTYPE_p_std__vectorT_int_t"); } 
    arg2 = *tmp2; }  (arg1)->RenumberAtoms(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_RenumberAtoms) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBMol_RenumberAtoms__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBMol_RenumberAtoms__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_RenumberAtoms'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetCoordinates) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetCoordinates. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_SetCoordinates. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->SetCoordinates(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ToInertialFrame__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  double *arg3 = (double *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_ToInertialFrame. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_ToInertialFrame. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->ToInertialFrame(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ToInertialFrame__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_ToInertialFrame. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ToInertialFrame(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ToInertialFrame) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_ToInertialFrame__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_ToInertialFrame__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_ToInertialFrame'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Translate__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Translate. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_Translate. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  (arg1)->Translate((OpenBabel::vector3 const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Translate__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Translate. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_Translate. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->Translate((OpenBabel::vector3 const &)*arg2,arg3);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Translate) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMol_Translate__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_Translate__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_Translate'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Rotate__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double (*arg2)[3] ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Rotate. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_a_3__double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_Rotate. Expected SWIGTYPE_p_a_3__double"); }  } 
  (arg1)->Rotate((double const (*)[3])arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Rotate__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Rotate. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_Rotate. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->Rotate((double const (*))arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Rotate__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 ; int arg3 ;
  zval **args[3]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Rotate. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_Rotate. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->Rotate((double const (*))arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Rotate) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_a_3__double, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMol_Rotate__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBMol_Rotate__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_Rotate__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_Rotate'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Center__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Center. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Center(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Kekulize) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Kekulize. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->Kekulize(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_PerceiveKekuleBonds) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_PerceiveKekuleBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->PerceiveKekuleBonds(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NewPerceiveKekuleBonds) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NewPerceiveKekuleBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->NewPerceiveKekuleBonds(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteHydrogens__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->DeleteHydrogens(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteHydrogens__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DeleteHydrogens. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->DeleteHydrogens(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteHydrogens) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_DeleteHydrogens__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_DeleteHydrogens__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_DeleteHydrogens'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeletePolarHydrogens) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeletePolarHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->DeletePolarHydrogens(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteNonPolarHydrogens) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteNonPolarHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->DeleteNonPolarHydrogens(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteHydrogen) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_DeleteHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->DeleteHydrogen(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddHydrogens__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  bool arg3 ; double arg4 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ;  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;  convert_to_double_ex(args[3]);
  arg4 = (double) Z_DVAL_PP(args[3]); ; result = (bool)(arg1)->AddHydrogens(arg2,arg3,arg4); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddHydrogens__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ;  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->AddHydrogens(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddHydrogens__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (bool)(arg1)->AddHydrogens(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddHydrogens__SWIG_3) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->AddHydrogens(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddHydrogens__SWIG_4) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_AddHydrogens. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->AddHydrogens(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddHydrogens) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_AddHydrogens__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_OBMol_AddHydrogens__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBMol_AddHydrogens__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_AddHydrogens__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBMol_AddHydrogens__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_AddHydrogens'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddPolarHydrogens) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddPolarHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->AddPolarHydrogens(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddNonPolarHydrogens) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddNonPolarHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->AddNonPolarHydrogens(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddNewHydrogens__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::HydrogenType arg2 ; bool arg3 ; double arg4 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddNewHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::HydrogenType) Z_LVAL_PP(args[1]); ;  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; result = (bool)(arg1)->AddNewHydrogens(arg2,arg3,arg4); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddNewHydrogens__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::HydrogenType arg2 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddNewHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::HydrogenType) Z_LVAL_PP(args[1]); ;  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = (bool)(arg1)->AddNewHydrogens(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddNewHydrogens__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::HydrogenType arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddNewHydrogens. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::HydrogenType) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->AddNewHydrogens(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddNewHydrogens) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMol_AddNewHydrogens__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMol_AddNewHydrogens__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBMol_AddNewHydrogens__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_AddNewHydrogens'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_StripSalts__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_StripSalts. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (bool)(arg1)->StripSalts(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_StripSalts__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_StripSalts. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->StripSalts(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_StripSalts) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_StripSalts__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_StripSalts__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_StripSalts'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Separate__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  std::vector< OpenBabel::OBMol > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Separate. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (arg1)->Separate(arg2); {
    std::vector< OpenBabel::OBMol > * resultobj = new std::vector< OpenBabel::OBMol >((const std::vector< OpenBabel::OBMol > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Separate__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBMol > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Separate. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->Separate(); {
    std::vector< OpenBabel::OBMol > * resultobj = new std::vector< OpenBabel::OBMol >((const std::vector< OpenBabel::OBMol > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Separate) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_Separate__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_Separate__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_Separate'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetNextFragment) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolAtomDFSIter *arg2 = 0 ; OpenBabel::OBMol *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetNextFragment. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_GetNextFragment. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_GetNextFragment. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (bool)(arg1)->GetNextFragment(*arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ConvertDativeBonds) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_ConvertDativeBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->ConvertDativeBonds(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_MakeDativeBonds) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_MakeDativeBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->MakeDativeBonds(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ConvertZeroBonds) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_ConvertZeroBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->ConvertZeroBonds(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_CorrectForPH__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_CorrectForPH. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; result = (bool)(arg1)->CorrectForPH(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_CorrectForPH__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_CorrectForPH. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->CorrectForPH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_CorrectForPH) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_CorrectForPH__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_CorrectForPH__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_CorrectForPH'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AssignSpinMultiplicity__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AssignSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->AssignSpinMultiplicity(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AssignSpinMultiplicity__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AssignSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->AssignSpinMultiplicity(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AssignSpinMultiplicity) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_AssignSpinMultiplicity__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_AssignSpinMultiplicity__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_AssignSpinMultiplicity'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AssignTotalChargeToAtoms) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AssignTotalChargeToAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->AssignTotalChargeToAtoms(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetIsPatternStructure) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetIsPatternStructure. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetIsPatternStructure(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Center__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Center. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (arg1)->Center(arg2); { OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Center) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_Center__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_Center__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_Center'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetTorsion__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ; double arg6 ;
  zval **args[6]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetTorsion. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_SetTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_SetTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBMol_SetTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBMol_SetTorsion. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_double_ex(args[5]); arg6 = (double) Z_DVAL_PP(args[5]); ; (arg1)->SetTorsion(arg2,arg3,arg4,arg5,arg6); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindSSSR) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindSSSR. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->FindSSSR(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindLSSR) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindLSSR. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->FindLSSR(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindRingAtomsAndBonds) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindRingAtomsAndBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->FindRingAtomsAndBonds(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindChiralCenters) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindChiralCenters. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->FindChiralCenters(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindChildren__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< int > *arg2 = 0 ; int arg3 ; int arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindChildren. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_FindChildren. Expected SWIGTYPE_p_std__vectorT_int_t"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ; (arg1)->FindChildren(*arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindChildren__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBAtom * > *arg2 = 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindChildren. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_FindChildren. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_FindChildren. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBMol_FindChildren. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (arg1)->FindChildren(*arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindChildren) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 4) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_int_t, 0) >= 0); } }  if (!_v) goto check_1; {
      _v = (Z_TYPE_PP(argv[2]) == IS_LONG); }  if (!_v) goto check_1; { _v = (Z_TYPE_PP(argv[3]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBMol_FindChildren__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 4) { _wrap_OBMol_FindChildren__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_FindChildren'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindLargestFragment) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindLargestFragment. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_FindLargestFragment. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->FindLargestFragment(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ContigFragList) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_ContigFragList. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_ContigFragList. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }  (arg1)->ContigFragList(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Align) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg4 = 0 ; OpenBabel::vector3 *arg5 = 0 ; zval **args[5]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Align. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_Align. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMol_Align. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBMol_Align. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBMol_Align. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  (arg1)->Align(arg2,arg3,*arg4,*arg5); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_ConnectTheDots) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_ConnectTheDots. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ConnectTheDots(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_PerceiveBondOrders) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_PerceiveBondOrders. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->PerceiveBondOrders(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindAngles) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindAngles. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->FindAngles(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_FindTorsions) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_FindTorsions. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->FindTorsions(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetGTDVector) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< int > *arg2 = 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetGTDVector. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_GetGTDVector. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  result = (bool)(arg1)->GetGTDVector(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetGIVector) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetGIVector. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_GetGIVector. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  (arg1)->GetGIVector(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetGIDVector) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetGIDVector. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_GetGIDVector. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  (arg1)->GetGIDVector(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Has2D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Has2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = (bool)(arg1)->Has2D(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Has2D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Has2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->Has2D(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Has2D) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { _wrap_OBMol_Has2D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}
   if (argc == 2) { _wrap_OBMol_Has2D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_Has2D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_Has3D) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_Has3D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->Has3D(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasNonZeroCoords) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasNonZeroCoords. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasNonZeroCoords(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasAromaticPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasAromaticPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasAromaticPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasSSSRPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasSSSRPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasSSSRPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasLSSRPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasLSSRPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasLSSRPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasRingAtomsAndBondsPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasRingAtomsAndBondsPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasRingAtomsAndBondsPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasAtomTypesPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasAtomTypesPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasAtomTypesPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasRingTypesPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasRingTypesPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasRingTypesPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasChiralityPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasChiralityPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasChiralityPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasPartialChargesPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasPartialChargesPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasPartialChargesPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasHybridizationPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasHybridizationPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasHybridizationPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasImplicitValencePerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasImplicitValencePerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasImplicitValencePerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasKekulePerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasKekulePerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasKekulePerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasClosureBondsPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasClosureBondsPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasClosureBondsPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasChainsPerceived) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasChainsPerceived. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasChainsPerceived(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasHydrogensAdded) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasHydrogensAdded. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasHydrogensAdded(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasAromaticCorrected) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasAromaticCorrected. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasAromaticCorrected(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_IsCorrectedForPH) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_IsCorrectedForPH. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsCorrectedForPH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_HasSpinMultiplicityAssigned) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_HasSpinMultiplicityAssigned. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasSpinMultiplicityAssigned(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_IsChiral) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_IsChiral. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsChiral(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_c_Empty) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_c_Empty. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->Empty(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NumConformers) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NumConformers. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->NumConformers(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetConformers) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< double * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetConformers. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_SetConformers. Expected SWIGTYPE_p_std__vectorT_double_p_t"); }
     }  (arg1)->SetConformers(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_AddConformer) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 = (double *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_AddConformer. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_AddConformer. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->AddConformer(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetConformer) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetConformer. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetConformer(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_CopyConformer) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 = (double *) 0 ;
  int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_CopyConformer. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_CopyConformer. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->CopyConformer(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_DeleteConformer) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_DeleteConformer. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->DeleteConformer(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetConformer) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; zval **args[2];
  double *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetConformer. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (double *)(arg1)->GetConformer(arg2); SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetEnergies) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< double > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetEnergies. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_SetEnergies. Expected SWIGTYPE_p_std__vectorT_double_t"); }  } 
  (arg1)->SetEnergies(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetEnergies) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetEnergies. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetEnergies(); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetEnergy__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetEnergy. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (double)(arg1)->GetEnergy(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetEnergy) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMol_GetEnergy__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMol_GetEnergy__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_GetEnergy'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_BeginConformer) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< double * >::iterator *arg2 = 0 ; zval **args[2]; double *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_BeginConformer. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_BeginConformer. Expected SWIGTYPE_p_std__vectorT_double_p_t__iterator"); }
     }  result = (double *)(arg1)->BeginConformer(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NextConformer) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< double * >::iterator *arg2 = 0 ; zval **args[2]; double *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NextConformer. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_NextConformer. Expected SWIGTYPE_p_std__vectorT_double_p_t__iterator"); }
     }  result = (double *)(arg1)->NextConformer(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_GetConformers) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  std::vector< double * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_GetConformers. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< double * > *) &(arg1)->GetConformers();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_p_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_BeginInternalCoord) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBInternalCoord * >::iterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBInternalCoord *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_BeginInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_BeginInternalCoord. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator"); }
     }  result = (OpenBabel::OBInternalCoord *)(arg1)->BeginInternalCoord(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_NextInternalCoord) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBInternalCoord * >::iterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBInternalCoord *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_NextInternalCoord. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMol_NextInternalCoord. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator"); }
     }  result = (OpenBabel::OBInternalCoord *)(arg1)->NextInternalCoord(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBInternalCoord, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetTorsion__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; int arg5 ; double arg6 ; zval **args[6]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMol_SetTorsion. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ; 
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ;  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;  convert_to_double_ex(args[5]);
  arg6 = (double) Z_DVAL_PP(args[5]); ; OpenBabel_OBMol_SetTorsion__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMol_SetTorsion) { int argc; zval **argv[6]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 6) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_1; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); }
      }  if (!_v) goto check_1; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMol_SetTorsion__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 6) {
    _wrap_OBMol_SetTorsion__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMol_SetTorsion'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ThrowError__SWIG_0) { char *arg1 = (char *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; OpenBabel::ThrowError(arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ThrowError__SWIG_1) { std::string *arg1 = 0 ; std::string temp1 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  OpenBabel::ThrowError(*arg1); ZVAL_STRINGL(*(args[0]), const_cast<char*>(arg1->data()), arg1->size(), 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ThrowError) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_std__string, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_ThrowError__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 1) {
    _wrap_ThrowError__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ThrowError'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CartesianToInternal) { std::vector< OpenBabel::OBInternalCoord * > *arg1 = 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CartesianToInternal. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CartesianToInternal. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  OpenBabel::CartesianToInternal(*arg1,*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_InternalToCartesian) { std::vector< OpenBabel::OBInternalCoord * > *arg1 = 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InternalToCartesian. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of InternalToCartesian. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  OpenBabel::InternalToCartesian(*arg1,*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_NewExtension) { std::string *arg1 = 0 ; char *arg2 = (char *) 0 ; std::string temp1 ; zval **args[2];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  arg1 = &temp1;  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else { convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; result = OpenBabel::NewExtension(*arg1,arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  ZVAL_STRINGL(*(args[0]), const_cast<char*>(arg1->data()), arg1->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_etab_set) { OpenBabel::OBElementTable *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBElementTable, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of etab_set. Expected SWIGTYPE_p_OpenBabel__OBElementTable"); }  } 
  OpenBabel::etab = *arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_etab_get) { OpenBabel::OBElementTable *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBElementTable *) &OpenBabel::etab;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBElementTable, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ttab_set) { OpenBabel::OBTypeTable *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ttab_set. Expected SWIGTYPE_p_OpenBabel__OBTypeTable"); }  } 
  OpenBabel::ttab = *arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ttab_get) { OpenBabel::OBTypeTable *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::OBTypeTable *) &OpenBabel::ttab;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBTypeTable, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_isotab_set) { OpenBabel::OBIsotopeTable *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsotopeTable, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of isotab_set. Expected SWIGTYPE_p_OpenBabel__OBIsotopeTable"); }  } 
  OpenBabel::isotab = *arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_isotab_get) { OpenBabel::OBIsotopeTable *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBIsotopeTable *) &OpenBabel::isotab;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBIsotopeTable, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_aromtyper_set) { OpenBabel::OBAromaticTyper *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of aromtyper_set. Expected SWIGTYPE_p_OpenBabel__OBAromaticTyper"); }  }
   OpenBabel::aromtyper = *arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_aromtyper_get) { OpenBabel::OBAromaticTyper *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBAromaticTyper *) &OpenBabel::aromtyper;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_atomtyper_set) { OpenBabel::OBAtomTyper *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomTyper, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of atomtyper_set. Expected SWIGTYPE_p_OpenBabel__OBAtomTyper"); }  } 
  OpenBabel::atomtyper = *arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_atomtyper_get) { OpenBabel::OBAtomTyper *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBAtomTyper *) &OpenBabel::atomtyper;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomTyper, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_chainsparser_set) { OpenBabel::OBChainsParser *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChainsParser, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of chainsparser_set. Expected SWIGTYPE_p_OpenBabel__OBChainsParser"); }
     }  OpenBabel::chainsparser = *arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_chainsparser_get) { OpenBabel::OBChainsParser *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBChainsParser *) &OpenBabel::chainsparser;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBChainsParser, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_resdat_set) { OpenBabel::OBResidueData *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueData, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of resdat_set. Expected SWIGTYPE_p_OpenBabel__OBResidueData"); }  } 
  OpenBabel::resdat = *arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_resdat_get) { OpenBabel::OBResidueData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBResidueData *) &OpenBabel::resdat;
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidueData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_NoId_get) { unsigned long result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (unsigned long)(unsigned long)OpenBabel::NoId; { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_get_rmat) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  int arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of get_rmat. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of get_rmat. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of get_rmat. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; OpenBabel::get_rmat(arg1,arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ob_make_rmat) { double (*arg1)[3] ; double *arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_a_3__double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ob_make_rmat. Expected SWIGTYPE_p_a_3__double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ob_make_rmat. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::ob_make_rmat((double (*)[3])arg1,arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_qtrfit) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; double (*arg4)[3] ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of qtrfit. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of qtrfit. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_a_3__double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of qtrfit. Expected SWIGTYPE_p_a_3__double"); }  } 
  OpenBabel::qtrfit(arg1,arg2,arg3,(double (*)[3])arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_superimpose) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; zval **args[3];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of superimpose. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of superimpose. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; result = (double)OpenBabel::superimpose(arg1,arg2,arg3); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_ring_id_set) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_ring_id_set. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  if (arg1) (arg1)->ring_id = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_ring_id_get) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_ring_id_get. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->ring_id); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing__path_set) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; std::vector< int > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing__path_set. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRing__path_set. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  if (arg1) (arg1)->_path = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing__path_get) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1];
  std::vector< int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing__path_get. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< int > *) & ((arg1)->_path);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing__pathset_set) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing__pathset_set. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRing__pathset_set. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if (arg1) (arg1)->_pathset = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing__pathset_get) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1];
  OpenBabel::OBBitVec *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing__pathset_get. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBitVec *) & ((arg1)->_pathset);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRing__SWIG_0) { OpenBabel::OBRing *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRing *)new OpenBabel::OBRing();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRing__SWIG_1) { std::vector< int > *arg1 = 0 ; int arg2 ; zval **args[2];
  OpenBabel::OBRing *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBRing. Expected SWIGTYPE_p_std__vectorT_int_t"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing(*arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRing__SWIG_2) { std::vector< int > *arg1 = 0 ; OpenBabel::OBBitVec arg2 ;
  OpenBabel::OBBitVec *tmp2 ; zval **args[2]; OpenBabel::OBRing *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBRing. Expected SWIGTYPE_p_std__vectorT_int_t"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBRing. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); } 
    arg2 = *tmp2; }  result = (OpenBabel::OBRing *)new OpenBabel::OBRing(*arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRing__SWIG_3) { OpenBabel::OBRing *arg1 = 0 ; zval **args[1]; OpenBabel::OBRing *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBRing. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing((OpenBabel::OBRing const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRing) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) { _wrap_new_OBRing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}
   if (argc == 1) { _wrap_new_OBRing__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_OpenBabel__OBBitVec, 0) >= 0); } } 
    if (!_v) goto check_3; _wrap_new_OBRing__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_new_OBRing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBRing'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_Size) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1]; size_t result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_Size. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBRing const *)arg1)->Size(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_PathSize) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1]; size_t result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_PathSize. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBRing const *)arg1)->PathSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_IsAromatic) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_SetType__SWIG_0) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_SetType. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetType(arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_SetType__SWIG_1) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_SetType. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetType(*arg2);
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_SetType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__string, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBRing_SetType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBRing_SetType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRing_SetType'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_GetType) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1];
  char *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_GetType. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(arg1)->GetType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_GetRootAtom) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_GetRootAtom. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetRootAtom(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_IsMember__SWIG_0) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_IsMember. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRing_IsMember. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)(arg1)->IsMember(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_IsMember__SWIG_1) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_IsMember. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRing_IsMember. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  result = (bool)(arg1)->IsMember(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_IsMember) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBRing_IsMember__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBRing_IsMember__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRing_IsMember'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_IsInRing) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; int arg2 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (bool)(arg1)->IsInRing(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_SetParent) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_SetParent. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRing_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  (arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_GetParent) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; zval **args[1];
  OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_GetParent. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRing_findCenterAndNormal) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; zval **args[4]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRing_findCenterAndNormal. Expected SWIGTYPE_p_OpenBabel__OBRing"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRing_findCenterAndNormal. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRing_findCenterAndNormal. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBRing_findCenterAndNormal. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (bool)(arg1)->findCenterAndNormal(*arg2,*arg3,*arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRing(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRing *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRing TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRing resource already free'd"); delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CompareRingSize) { OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBRing *arg2 = (OpenBabel::OBRing *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CompareRingSize. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBRing, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CompareRingSize. Expected SWIGTYPE_p_OpenBabel__OBRing"); }  } 
  result = (bool)OpenBabel::CompareRingSize((OpenBabel::OBRing const *)arg1,(OpenBabel::OBRing const *)arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRingSearch) { OpenBabel::OBRingSearch *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRingSearch *)new OpenBabel::OBRingSearch();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRingSearch, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRingSearch(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRingSearch *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRingSearch TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRingSearch resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingSearch_SortRings) { OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingSearch_SortRings. Expected SWIGTYPE_p_OpenBabel__OBRingSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SortRings(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingSearch_RemoveRedundant) { OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingSearch_RemoveRedundant. Expected SWIGTYPE_p_OpenBabel__OBRingSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->RemoveRedundant(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingSearch_AddRingFromClosure) { OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingSearch_AddRingFromClosure. Expected SWIGTYPE_p_OpenBabel__OBRingSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRingSearch_AddRingFromClosure. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRingSearch_AddRingFromClosure. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (arg1)->AddRingFromClosure(*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingSearch_SaveUniqueRing) { OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  std::deque< int > *arg2 = 0 ; std::deque< int > *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingSearch_SaveUniqueRing. Expected SWIGTYPE_p_OpenBabel__OBRingSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__dequeT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRingSearch_SaveUniqueRing. Expected SWIGTYPE_p_std__dequeT_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__dequeT_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRingSearch_SaveUniqueRing. Expected SWIGTYPE_p_std__dequeT_int_t"); }
     }  result = (bool)(arg1)->SaveUniqueRing(*arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingSearch_WriteRings) { OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingSearch_WriteRings. Expected SWIGTYPE_p_OpenBabel__OBRingSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->WriteRings(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingSearch_BeginRings) { OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBRing * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingSearch_BeginRings. Expected SWIGTYPE_p_OpenBabel__OBRingSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginRings(); {
    std::vector< OpenBabel::OBRing * >::iterator * resultobj = new std::vector< OpenBabel::OBRing * >::iterator((const std::vector< OpenBabel::OBRing * >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRingSearch_EndRings) { OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBRing * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRingSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRingSearch_EndRings. Expected SWIGTYPE_p_OpenBabel__OBRingSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndRings(); {
    std::vector< OpenBabel::OBRing * >::iterator * resultobj = new std::vector< OpenBabel::OBRing * >::iterator((const std::vector< OpenBabel::OBRing * >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRTree) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBRTree *arg2 = (OpenBabel::OBRTree *) 0 ; zval **args[2]; OpenBabel::OBRTree *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBRTree. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBRTree, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBRTree. Expected SWIGTYPE_p_OpenBabel__OBRTree"); }  } 
  result = (OpenBabel::OBRTree *)new OpenBabel::OBRTree(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRTree, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRTree(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRTree *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRTree TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRTree resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRTree_GetAtomIdx) { OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRTree, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRTree_GetAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBRTree"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetAtomIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRTree_PathToRoot) { OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ;
  std::vector< OpenBabel::OBAtom * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRTree, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRTree_PathToRoot. Expected SWIGTYPE_p_OpenBabel__OBRTree"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRTree_PathToRoot. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t"); }
     }  (arg1)->PathToRoot(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSmartsPattern__SWIG_0) { OpenBabel::OBSmartsPattern *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBSmartsPattern *)new OpenBabel::OBSmartsPattern();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBSmartsPattern(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBSmartsPattern *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBSmartsPattern TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBSmartsPattern resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSmartsPattern__SWIG_1) { OpenBabel::OBSmartsPattern *arg1 = 0 ; zval **args[1];
  OpenBabel::OBSmartsPattern *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBSmartsPattern. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  result = (OpenBabel::OBSmartsPattern *)new OpenBabel::OBSmartsPattern((OpenBabel::OBSmartsPattern const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSmartsPattern) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBSmartsPattern__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBSmartsPattern__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBSmartsPattern'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_Init__SWIG_0) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_Init. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(arg1)->Init((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_Init__SWIG_1) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_Init. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(arg1)->Init((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_Init) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBSmartsPattern_Init__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBSmartsPattern_Init__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSmartsPattern_Init'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_GetSMARTS) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_GetSMARTS. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) &((OpenBabel::OBSmartsPattern const *)arg1)->GetSMARTS();
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_c_Empty) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_c_Empty. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->Empty(); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_IsValid) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_IsValid. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->IsValid(); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_NumAtoms) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_NumAtoms. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumAtoms(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_NumBonds) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_NumBonds. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumBonds(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_GetBond) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int *arg2 = 0 ; int *arg3 = 0 ; int *arg4 = 0 ; int arg5 ; zval **args[5]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_GetBond. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_GetBond. Expected SWIGTYPE_p_int"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsPattern_GetBond. Expected SWIGTYPE_p_int"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_int, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBSmartsPattern_GetBond. Expected SWIGTYPE_p_int"); }  }  
  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ; (arg1)->GetBond(*arg2,*arg3,*arg4,arg5); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_GetAtomicNum) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int arg2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)(arg1)->GetAtomicNum(arg2); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_GetCharge) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int arg2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_GetCharge. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)(arg1)->GetCharge(arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_GetVectorBinding) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_GetVectorBinding. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)((OpenBabel::OBSmartsPattern const *)arg1)->GetVectorBinding(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_Match__SWIG_0) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_Match. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_Match. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->Match(*arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_Match__SWIG_1) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_Match. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_Match. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (bool)(arg1)->Match(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_Match__SWIG_2) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; std::vector< std::vector< int > > *arg3 = 0 ; OpenBabel::OBSmartsPattern::MatchType arg4 ;
  zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_Match. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_Match. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsPattern_Match. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }   convert_to_long_ex(args[3]); arg4 = (OpenBabel::OBSmartsPattern::MatchType) Z_LVAL_PP(args[3]); ;
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->Match(*arg2,*arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_Match__SWIG_3) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; std::vector< std::vector< int > > *arg3 = 0 ; zval **args[3]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_Match. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_Match. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsPattern_Match. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->Match(*arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_Match) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBSmartsPattern_Match__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBSmartsPattern_Match__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 3) { _wrap_OBSmartsPattern_Match__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBSmartsPattern_Match__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSmartsPattern_Match'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_HasMatch) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_HasMatch. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_HasMatch. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->HasMatch(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_RestrictedMatch__SWIG_0) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  std::vector< std::pair< int,int > > *arg3 = 0 ; bool arg4 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t"); }
     }   convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ;
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_RestrictedMatch__SWIG_1) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  std::vector< std::pair< int,int > > *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t"); }
     }  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_RestrictedMatch__SWIG_2) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ; bool arg4 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }   convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ;
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_RestrictedMatch__SWIG_3) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsPattern_RestrictedMatch. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_RestrictedMatch) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBSmartsPattern_RestrictedMatch__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 3) { _wrap_OBSmartsPattern_RestrictedMatch__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    int _v = 0; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBBitVec, 0) >= 0); } } 
    if (!_v) goto check_3; _wrap_OBSmartsPattern_RestrictedMatch__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3:
  if (argc == 4) { _wrap_OBSmartsPattern_RestrictedMatch__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBSmartsPattern_RestrictedMatch'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_NumMatches) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_NumMatches. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumMatches(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_GetMapList) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; std::vector< std::vector< int > > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_GetMapList. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< std::vector< int > > *) &(arg1)->GetMapList();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_BeginMList) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< std::vector< int > >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_BeginMList. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginMList(); {
    std::vector< std::vector< int > >::iterator * resultobj = new std::vector< std::vector< int > >::iterator((const std::vector< std::vector< int > >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_EndMList) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< std::vector< int > >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_EndMList. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndMList(); {
    std::vector< std::vector< int > >::iterator * resultobj = new std::vector< std::vector< int > >::iterator((const std::vector< std::vector< int > >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_GetUMapList) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  zval **args[1]; std::vector< std::vector< int > > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_GetUMapList. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< std::vector< int > > *) &(arg1)->GetUMapList();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsPattern_WriteMapList) { OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::ostream *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsPattern_WriteMapList. Expected SWIGTYPE_p_OpenBabel__OBSmartsPattern"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsPattern_WriteMapList. Expected SWIGTYPE_p_std__ostream"); }  }
   (arg1)->WriteMapList(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSmartsMatcher) { OpenBabel::OBSmartsMatcher *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBSmartsMatcher *)new OpenBabel::OBSmartsMatcher();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSmartsMatcher, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBSmartsMatcher(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBSmartsMatcher *arg1 = (OpenBabel::OBSmartsMatcher *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBSmartsMatcher *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBSmartsMatcher TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBSmartsMatcher resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsMatcher_match__SWIG_0) { OpenBabel::OBSmartsMatcher *arg1 = (OpenBabel::OBSmartsMatcher *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; OpenBabel::Pattern *arg3 = (OpenBabel::Pattern *) 0 ;
  std::vector< std::vector< int > > *arg4 = 0 ; bool arg5 ; zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsMatcher, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsMatcher_match. Expected SWIGTYPE_p_OpenBabel__OBSmartsMatcher"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsMatcher_match. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__Pattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsMatcher_match. Expected SWIGTYPE_p_OpenBabel__Pattern"); }  }
   { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBSmartsMatcher_match. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }   convert_to_boolean_ex(args[4]); arg5 = (bool) Z_LVAL_PP(args[4]); ;
  result = (bool)(arg1)->match(*arg2,(OpenBabel::Pattern const *)arg3,*arg4,arg5); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsMatcher_match__SWIG_1) { OpenBabel::OBSmartsMatcher *arg1 = (OpenBabel::OBSmartsMatcher *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; OpenBabel::Pattern *arg3 = (OpenBabel::Pattern *) 0 ;
  std::vector< std::vector< int > > *arg4 = 0 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSmartsMatcher, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSmartsMatcher_match. Expected SWIGTYPE_p_OpenBabel__OBSmartsMatcher"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSmartsMatcher_match. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__Pattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBSmartsMatcher_match. Expected SWIGTYPE_p_OpenBabel__Pattern"); }  }
   { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBSmartsMatcher_match. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }  result = (bool)(arg1)->match(*arg2,(OpenBabel::Pattern const *)arg3,*arg4); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSmartsMatcher_match) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 4) {
    _wrap_OBSmartsMatcher_match__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBSmartsMatcher_match__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSmartsMatcher_match'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSSMatch) { OpenBabel::OBMol *arg1 = 0 ; OpenBabel::Pattern *arg2 = (OpenBabel::Pattern *) 0 ;
  zval **args[2]; OpenBabel::OBSSMatch *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBSSMatch. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__Pattern, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBSSMatch. Expected SWIGTYPE_p_OpenBabel__Pattern"); }  } 
  result = (OpenBabel::OBSSMatch *)new OpenBabel::OBSSMatch(*arg1,(OpenBabel::Pattern const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSSMatch, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBSSMatch(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBSSMatch *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBSSMatch TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBSSMatch resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSSMatch_Match__SWIG_0) { OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ; int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSSMatch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSSMatch_Match. Expected SWIGTYPE_p_OpenBabel__OBSSMatch"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSSMatch_Match. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }   convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->Match(*arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSSMatch_Match__SWIG_1) { OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSSMatch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSSMatch_Match. Expected SWIGTYPE_p_OpenBabel__OBSSMatch"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSSMatch_Match. Expected SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t"); }
     }  (arg1)->Match(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSSMatch_Match) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBSSMatch_Match__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBSSMatch_Match__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSSMatch_Match'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_SmartsLexReplace) { std::string *arg1 = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg2 = 0 ; std::string temp1 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of SmartsLexReplace. Expected SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t"); }
     }  OpenBabel::SmartsLexReplace(*arg1,*arg2); ZVAL_STRINGL(*(args[0]), const_cast<char*>(arg1->data()), arg1->size(), 1);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasDataType_get) { unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (unsigned int)(unsigned int)OpenBabel::AliasDataType; { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_AliasData) { OpenBabel::AliasData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::AliasData *)new OpenBabel::AliasData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__AliasData, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_SetAlias__SWIG_0) { OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__AliasData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_SetAlias. Expected SWIGTYPE_p_OpenBabel__AliasData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetAlias((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_SetAlias__SWIG_1) { OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__AliasData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_SetAlias. Expected SWIGTYPE_p_OpenBabel__AliasData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }  else {
    convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->SetAlias((char const *)arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_SetAlias) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; } 
    if (!_v) goto check_1; _wrap_AliasData_SetAlias__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_AliasData_SetAlias__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'AliasData_SetAlias'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_GetAlias__SWIG_0) { OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; bool arg2 ;
  zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__AliasData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_GetAlias. Expected SWIGTYPE_p_OpenBabel__AliasData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]);
  ; result = ((OpenBabel::AliasData const *)arg1)->GetAlias(arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_GetAlias__SWIG_1) { OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__AliasData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_GetAlias. Expected SWIGTYPE_p_OpenBabel__AliasData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::AliasData const *)arg1)->GetAlias();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_GetAlias) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_AliasData_GetAlias__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_AliasData_GetAlias__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'AliasData_GetAlias'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_GetColor) { OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__AliasData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_GetColor. Expected SWIGTYPE_p_OpenBabel__AliasData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::AliasData const *)arg1)->GetColor();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_SetColor) { OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; std::string arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__AliasData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_SetColor. Expected SWIGTYPE_p_OpenBabel__AliasData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (arg1)->SetColor(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_IsExpanded) { OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__AliasData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_IsExpanded. Expected SWIGTYPE_p_OpenBabel__AliasData"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::AliasData const *)arg1)->IsExpanded();
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_RevertToAliasForm) { OpenBabel::OBMol *arg1 = 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_RevertToAliasForm. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  OpenBabel::AliasData::RevertToAliasForm(*arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_AliasData_Expand) { OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; unsigned int arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__AliasData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AliasData_Expand. Expected SWIGTYPE_p_OpenBabel__AliasData"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of AliasData_Expand. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->Expand(*arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_AliasData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::AliasData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__AliasData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::AliasData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomClassData) { OpenBabel::OBAtomClassData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBAtomClassData *)new OpenBabel::OBAtomClassData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomClassData, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomClassData_Clear) { OpenBabel::OBAtomClassData *arg1 = (OpenBabel::OBAtomClassData *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomClassData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomClassData_Clear. Expected SWIGTYPE_p_OpenBabel__OBAtomClassData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomClassData_Add) { OpenBabel::OBAtomClassData *arg1 = (OpenBabel::OBAtomClassData *) 0 ;
  int arg2 ; int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomClassData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomClassData_Add. Expected SWIGTYPE_p_OpenBabel__OBAtomClassData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->Add(arg2,arg3);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomClassData_HasClass) { OpenBabel::OBAtomClassData *arg1 = (OpenBabel::OBAtomClassData *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomClassData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomClassData_HasClass. Expected SWIGTYPE_p_OpenBabel__OBAtomClassData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)((OpenBabel::OBAtomClassData const *)arg1)->HasClass(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomClassData_GetClass) { OpenBabel::OBAtomClassData *arg1 = (OpenBabel::OBAtomClassData *) 0 ;
  int arg2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomClassData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomClassData_GetClass. Expected SWIGTYPE_p_OpenBabel__OBAtomClassData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)((OpenBabel::OBAtomClassData const *)arg1)->GetClass(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomClassData_GetClassString) {
  OpenBabel::OBAtomClassData *arg1 = (OpenBabel::OBAtomClassData *) 0 ; int arg2 ; zval **args[2]; std::string result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomClassData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomClassData_GetClassString. Expected SWIGTYPE_p_OpenBabel__OBAtomClassData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (arg1)->GetClassString(arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomClassData_size) { OpenBabel::OBAtomClassData *arg1 = (OpenBabel::OBAtomClassData *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomClassData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomClassData_size. Expected SWIGTYPE_p_OpenBabel__OBAtomClassData"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->size(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAtomClassData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAtomClassData *arg1 = (OpenBabel::OBAtomClassData *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAtomClassData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAtomClassData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAtomClassData resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_c_Default) { OpenBabel::OBFingerprint **result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFingerprint **) &OpenBabel::OBFingerprint::Default();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_OpenBabel__OBFingerprint, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_FindType) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBFingerprint *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBFingerprint *)OpenBabel::OBFingerprint::FindType((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFingerprint, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFingerprint(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFingerprint *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFingerprint TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFingerprint resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_SetBit) { OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; unsigned int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_SetBit. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_SetBit. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }   convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; (arg1)->SetBit(*arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_GetBit) { OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; unsigned int arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_GetBit. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_GetBit. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }   convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  result = (bool)(arg1)->GetBit((std::vector< unsigned int > const &)*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_Fold) { OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; unsigned int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_Fold. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_Fold. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }   convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; (arg1)->Fold(*arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_GetFingerprint__SWIG_0) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::vector< unsigned int > *arg3 = 0 ; int arg4 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_GetFingerprint. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_GetFingerprint. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBFingerprint_GetFingerprint. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }   convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; result = (bool)(arg1)->GetFingerprint(arg2,*arg3,arg4);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_GetFingerprint__SWIG_1) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::vector< unsigned int > *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_GetFingerprint. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_GetFingerprint. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBFingerprint_GetFingerprint. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  result = (bool)(arg1)->GetFingerprint(arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_GetFingerprint) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBFingerprint_GetFingerprint__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBFingerprint_GetFingerprint__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBFingerprint_GetFingerprint'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_Flags) { OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_Flags. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->Flags(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_SetFlags) { OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_SetFlags. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetFlags(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_DescribeBits__SWIG_0) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; std::vector< unsigned int > arg2 ; bool arg3 ;
  std::vector< unsigned int > *tmp2 ; zval **args[3]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_DescribeBits. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_DescribeBits. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     arg2 = *tmp2; }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = (arg1)->DescribeBits(arg2,arg3);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_DescribeBits__SWIG_1) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; std::vector< unsigned int > arg2 ;
  std::vector< unsigned int > *tmp2 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFingerprint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_DescribeBits. Expected SWIGTYPE_p_OpenBabel__OBFingerprint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_DescribeBits. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     arg2 = *tmp2; }  result = (arg1)->DescribeBits(arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_DescribeBits) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBFingerprint_DescribeBits__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBFingerprint_DescribeBits__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBFingerprint_DescribeBits'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_Tanimoto__SWIG_0) { std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *arg2 = 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_Tanimoto. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_Tanimoto. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     } 
  result = (double)OpenBabel::OBFingerprint::Tanimoto((std::vector< unsigned int > const &)*arg1,(std::vector< unsigned int > const &)*arg2);
  { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_Tanimoto__SWIG_1) { std::vector< unsigned int > *arg1 = 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFingerprint_Tanimoto. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_unsigned_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFingerprint_Tanimoto. Expected SWIGTYPE_p_unsigned_int"); }  } 
  result = (double)OpenBabel::OBFingerprint::Tanimoto((std::vector< unsigned int > const &)*arg1,(unsigned int const *)arg2); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_Tanimoto) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBFingerprint_Tanimoto__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBFingerprint_Tanimoto__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBFingerprint_Tanimoto'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_Getbitsperint) { unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (unsigned int)OpenBabel::OBFingerprint::Getbitsperint(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFingerprint_FindFingerprint) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBFingerprint *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBFingerprint *)OpenBabel::OBFingerprint::FindFingerprint((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFingerprint, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_headerlength_set) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_headerlength_set. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->headerlength = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_headerlength_get) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_headerlength_get. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int) ((arg1)->headerlength); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_nEntries_set) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_nEntries_set. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->nEntries = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_nEntries_get) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_nEntries_get. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int) ((arg1)->nEntries); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_words_set) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_words_set. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->words = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_words_get) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_words_get. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int) ((arg1)->words); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_fpid_set) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  char *arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_fpid_set. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); { convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]); }  { if(arg2) { strncpy((char*)arg1->fpid, (const char *)arg2, 16-1);
      arg1->fpid[16-1] = 0; }  else { arg1->fpid[0] = 0; }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_fpid_get) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_fpid_get. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(char *) ((arg1)->fpid); { int len = 0;
    while (len < 16 && result[len]) ++len; RETVAL_STRINGL(result, len, 1); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_datafilename_set) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  char *arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_datafilename_set. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); { convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]); }  { if(arg2) { strncpy((char*)arg1->datafilename, (const char *)arg2, 256-1);
      arg1->datafilename[256-1] = 0; }  else { arg1->datafilename[0] = 0; }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FptIndexHeader_datafilename_get) { OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FptIndexHeader_datafilename_get. Expected SWIGTYPE_p_OpenBabel__FptIndexHeader"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(char *) ((arg1)->datafilename); {
    int len = 0; while (len < 256 && result[len]) ++len; RETVAL_STRINGL(result, len, 1); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_FptIndexHeader) { OpenBabel::FptIndexHeader *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::FptIndexHeader *)new OpenBabel::FptIndexHeader();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__FptIndexHeader, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_FptIndexHeader(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::FptIndexHeader *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__FptIndexHeader TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::FptIndexHeader resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_ReadIndexFile) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  std::string arg2 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_ReadIndexFile. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); result = (arg1)->ReadIndexFile(arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_ReadIndex) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_ReadIndex. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__istream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FastSearch_ReadIndex. Expected SWIGTYPE_p_std__istream"); }  } 
  result = (arg1)->ReadIndex(arg2); ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_FastSearch(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::FastSearch *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__FastSearch TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::FastSearch resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_Find) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::vector< unsigned int > *arg3 = 0 ; unsigned int arg4 ;
  zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_Find. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FastSearch_Find. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FastSearch_Find. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }   convert_to_long_ex(args[3]); arg4 = (unsigned int) Z_LVAL_PP(args[3]); ; result = (bool)(arg1)->Find(arg2,*arg3,arg4);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_FindMatch) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::vector< unsigned int > *arg3 = 0 ; unsigned int arg4 ;
  zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_FindMatch. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FastSearch_FindMatch. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FastSearch_FindMatch. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }   convert_to_long_ex(args[3]); arg4 = (unsigned int) Z_LVAL_PP(args[3]); ;
  result = (bool)(arg1)->FindMatch(arg2,*arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_FindSimilar__SWIG_0) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::multimap< double,unsigned int > *arg3 = 0 ; double arg4 ;
  double arg5 ; zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_FindSimilar. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FastSearch_FindSimilar. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__multimapT_double_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FastSearch_FindSimilar. Expected SWIGTYPE_p_std__multimapT_double_unsigned_int_t"); }
     }   convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;  convert_to_double_ex(args[4]);
  arg5 = (double) Z_DVAL_PP(args[4]); ; result = (bool)(arg1)->FindSimilar(arg2,*arg3,arg4,arg5); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_FindSimilar__SWIG_1) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::multimap< double,unsigned int > *arg3 = 0 ; double arg4 ;
  zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_FindSimilar. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FastSearch_FindSimilar. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__multimapT_double_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FastSearch_FindSimilar. Expected SWIGTYPE_p_std__multimapT_double_unsigned_int_t"); }
     }   convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;
  result = (bool)(arg1)->FindSimilar(arg2,*arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_FindSimilar__SWIG_2) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::multimap< double,unsigned int > *arg3 = 0 ; int arg4 ;
  zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_FindSimilar. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FastSearch_FindSimilar. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__multimapT_double_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FastSearch_FindSimilar. Expected SWIGTYPE_p_std__multimapT_double_unsigned_int_t"); }
     }   convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; result = (bool)(arg1)->FindSimilar(arg2,*arg3,arg4); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_FindSimilar__SWIG_3) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::multimap< double,unsigned int > *arg3 = 0 ; zval **args[3];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_FindSimilar. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FastSearch_FindSimilar. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__multimapT_double_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FastSearch_FindSimilar. Expected SWIGTYPE_p_std__multimapT_double_unsigned_int_t"); }
     }  result = (bool)(arg1)->FindSimilar(arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_FindSimilar) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_FastSearch_FindSimilar__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[3]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_FastSearch_FindSimilar__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 4) {
    _wrap_FastSearch_FindSimilar__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_FastSearch_FindSimilar__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FastSearch_FindSimilar'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_GetFingerprint) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  zval **args[1]; OpenBabel::OBFingerprint *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_GetFingerprint. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBFingerprint *)((OpenBabel::FastSearch const *)arg1)->GetFingerprint();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFingerprint, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearch_GetIndexHeader) { OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  zval **args[1]; OpenBabel::FptIndexHeader *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearch, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearch_GetIndexHeader. Expected SWIGTYPE_p_OpenBabel__FastSearch"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::FptIndexHeader *) &((OpenBabel::FastSearch const *)arg1)->GetIndexHeader();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__FptIndexHeader, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_FastSearch) { OpenBabel::FastSearch *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::FastSearch *)new OpenBabel::FastSearch();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__FastSearch, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_FastSearchIndexer__SWIG_0) { std::string *arg1 = 0 ; std::ostream *arg2 = (std::ostream *) 0 ;
  std::string *arg3 = 0 ; int arg4 ; int arg5 ; std::string temp1 ; std::string temp3 ; zval **args[5];
  OpenBabel::FastSearchIndexer *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_FastSearchIndexer. Expected SWIGTYPE_p_std__ostream"); }  } 
  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]);
  ; result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(*arg1,arg2,*arg3,arg4,arg5);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__FastSearchIndexer, 1);
  ZVAL_STRINGL(*(args[0]), const_cast<char*>(arg1->data()), arg1->size(), 1);
  ZVAL_STRINGL(*(args[2]), const_cast<char*>(arg3->data()), arg3->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_FastSearchIndexer__SWIG_1) { std::string *arg1 = 0 ; std::ostream *arg2 = (std::ostream *) 0 ;
  std::string *arg3 = 0 ; int arg4 ; std::string temp1 ; std::string temp3 ; zval **args[4];
  OpenBabel::FastSearchIndexer *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_FastSearchIndexer. Expected SWIGTYPE_p_std__ostream"); }  } 
  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(*arg1,arg2,*arg3,arg4);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__FastSearchIndexer, 1);
  ZVAL_STRINGL(*(args[0]), const_cast<char*>(arg1->data()), arg1->size(), 1);
  ZVAL_STRINGL(*(args[2]), const_cast<char*>(arg3->data()), arg3->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_FastSearchIndexer__SWIG_2) { std::string *arg1 = 0 ; std::ostream *arg2 = (std::ostream *) 0 ;
  std::string *arg3 = 0 ; std::string temp1 ; std::string temp3 ; zval **args[3]; OpenBabel::FastSearchIndexer *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_FastSearchIndexer. Expected SWIGTYPE_p_std__ostream"); }  } 
  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(*arg1,arg2,*arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__FastSearchIndexer, 1);
  ZVAL_STRINGL(*(args[0]), const_cast<char*>(arg1->data()), arg1->size(), 1);
  ZVAL_STRINGL(*(args[2]), const_cast<char*>(arg3->data()), arg3->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_FastSearchIndexer__SWIG_3) { OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ; int arg3 ; zval **args[3]; OpenBabel::FastSearchIndexer *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndex, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_FastSearchIndexer. Expected SWIGTYPE_p_OpenBabel__FptIndex"); }  }
   { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_FastSearchIndexer. Expected SWIGTYPE_p_std__ostream"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__FastSearchIndexer, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_FastSearchIndexer__SWIG_4) { OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ; zval **args[2]; OpenBabel::FastSearchIndexer *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FptIndex, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_FastSearchIndexer. Expected SWIGTYPE_p_OpenBabel__FptIndex"); }  }
   { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_FastSearchIndexer. Expected SWIGTYPE_p_std__ostream"); }  } 
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__FastSearchIndexer, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_FastSearchIndexer) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_new_FastSearchIndexer__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__FptIndex, 0) >= 0); } }  if (!_v) goto check_2; {
      _v = (Z_TYPE_PP(argv[2]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_new_FastSearchIndexer__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 3) {
    _wrap_new_FastSearchIndexer__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_new_FastSearchIndexer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_new_FastSearchIndexer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_FastSearchIndexer'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_FastSearchIndexer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::FastSearchIndexer *arg1 = (OpenBabel::FastSearchIndexer *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::FastSearchIndexer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__FastSearchIndexer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::FastSearchIndexer resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FastSearchIndexer_Add) { OpenBabel::FastSearchIndexer *arg1 = (OpenBabel::FastSearchIndexer *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::streampos arg3 ; std::streampos *tmp3 ; zval **args[3]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__FastSearchIndexer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FastSearchIndexer_Add. Expected SWIGTYPE_p_OpenBabel__FastSearchIndexer"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FastSearchIndexer_Add. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_std__streampos, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FastSearchIndexer_Add. Expected SWIGTYPE_p_std__streampos"); } 
    arg3 = *tmp3; }  result = (bool)(arg1)->Add(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_c_Default) { OpenBabel::OBDescriptor **result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBDescriptor **) &OpenBabel::OBDescriptor::Default();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_OpenBabel__OBDescriptor, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBDescriptor__SWIG_0) { char *arg1 = (char *) 0 ; bool arg2 ; zval **args[2];
  OpenBabel::OBDescriptor *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBDescriptor *)new OpenBabel::OBDescriptor((char const *)arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBDescriptor, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBDescriptor__SWIG_1) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBDescriptor *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBDescriptor *)new OpenBabel::OBDescriptor((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBDescriptor, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBDescriptor) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_new_OBDescriptor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBDescriptor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBDescriptor'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_FindType) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBDescriptor *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBDescriptor *)OpenBabel::OBDescriptor::FindType((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBDescriptor, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Predict__SWIG_0) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string *arg3 = (std::string *) 0 ; zval **args[3]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_Predict. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_Predict. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__string, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBDescriptor_Predict. Expected SWIGTYPE_p_std__string"); }  } 
  result = (double)(arg1)->Predict(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Predict__SWIG_1) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_Predict. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_Predict. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  result = (double)(arg1)->Predict(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Predict) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBDescriptor_Predict__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBDescriptor_Predict__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBDescriptor_Predict'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_PredictAndSave__SWIG_0) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string *arg3 = (std::string *) 0 ; zval **args[3]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_PredictAndSave. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_PredictAndSave. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__string, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBDescriptor_PredictAndSave. Expected SWIGTYPE_p_std__string"); }  } 
  result = (double)(arg1)->PredictAndSave(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_PredictAndSave__SWIG_1) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_PredictAndSave. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_PredictAndSave. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  result = (double)(arg1)->PredictAndSave(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_PredictAndSave) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBDescriptor_PredictAndSave__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBDescriptor_PredictAndSave__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBDescriptor_PredictAndSave'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_GetStringValue__SWIG_0) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string *arg3 = 0 ; std::string *arg4 = (std::string *) 0 ;
  std::string temp3 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_GetStringValue. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_GetStringValue. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3; {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__string, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBDescriptor_GetStringValue. Expected SWIGTYPE_p_std__string"); }  } 
  result = (double)(arg1)->GetStringValue(arg2,*arg3,arg4); { ZVAL_DOUBLE(return_value,result); } 
  ZVAL_STRINGL(*(args[2]), const_cast<char*>(arg3->data()), arg3->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_GetStringValue__SWIG_1) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string *arg3 = 0 ; std::string temp3 ; zval **args[3]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_GetStringValue. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_GetStringValue. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  result = (double)(arg1)->GetStringValue(arg2,*arg3); { ZVAL_DOUBLE(return_value,result); } 
  ZVAL_STRINGL(*(args[2]), const_cast<char*>(arg3->data()), arg3->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_GetStringValue) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBDescriptor_GetStringValue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBDescriptor_GetStringValue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBDescriptor_GetStringValue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Compare__SWIG_0) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::istream *arg3 = 0 ; bool arg4 ;
  std::string *arg5 = (std::string *) 0 ; zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_Compare. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_Compare. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBDescriptor_Compare. Expected SWIGTYPE_p_std__istream"); }  }  
  convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ; {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_std__string, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBDescriptor_Compare. Expected SWIGTYPE_p_std__string"); }  } 
  result = (bool)(arg1)->Compare(arg2,*arg3,arg4,arg5); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Compare__SWIG_1) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::istream *arg3 = 0 ; bool arg4 ; zval **args[4]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_Compare. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_Compare. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__istream, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBDescriptor_Compare. Expected SWIGTYPE_p_std__istream"); }  }  
  convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ; result = (bool)(arg1)->Compare(arg2,*arg3,arg4); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Compare) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 4) {
    _wrap_OBDescriptor_Compare__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBDescriptor_Compare__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBDescriptor_Compare'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Display__SWIG_0) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  std::string *arg2 = 0 ; char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; std::string temp2 ; zval **args[4]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_Display. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }
   else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0; }  else { convert_to_string_ex(args[3]); arg4 = (char *) Z_STRVAL_PP(args[3]); }  ;
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3,(char const *)arg4); { ZVAL_BOOL(return_value,(result)?1:0); } 
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Display__SWIG_1) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  std::string *arg2 = 0 ; char *arg3 = (char *) 0 ; std::string temp2 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_Display. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }
   else { convert_to_string_ex(args[2]); arg3 = (char *) Z_STRVAL_PP(args[2]); }  ;
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3); { ZVAL_BOOL(return_value,(result)?1:0); } 
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Display) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBDescriptor_Display__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBDescriptor_Display__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBDescriptor_Display'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Order__SWIG_0) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  double arg2 ; double arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_Order. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  result = (bool)(arg1)->Order(arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Order__SWIG_1) { OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  std::string arg2 ; std::string arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBDescriptor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_Order. Expected SWIGTYPE_p_OpenBabel__OBDescriptor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); result = (bool)(arg1)->Order(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_Order) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); } 
    if (!_v) goto check_1; { _v = (Z_TYPE_PP(argv[2]) == IS_DOUBLE); }  if (!_v) goto check_1;
    _wrap_OBDescriptor_Order__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 3) {
    _wrap_OBDescriptor_Order__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBDescriptor_Order'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_FilterCompare) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::istream *arg2 = 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_FilterCompare. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__istream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBDescriptor_FilterCompare. Expected SWIGTYPE_p_std__istream"); }  } 
   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = (bool)OpenBabel::OBDescriptor::FilterCompare(arg1,*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_AddProperties) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_AddProperties. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  OpenBabel::OBDescriptor::AddProperties(arg1,(std::string const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_DeleteProperties) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_DeleteProperties. Expected SWIGTYPE_p_OpenBabel__OBBase"); }
     }  convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  OpenBabel::OBDescriptor::DeleteProperties(arg1,(std::string const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_GetValues) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_GetValues. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }
   convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = OpenBabel::OBDescriptor::GetValues(arg1,(std::string const &)*arg2);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBDescriptor_GetIdentifier) { std::istream *arg1 = 0 ; zval **args[1];
  SwigValueWrapper< std::pair< std::string,std::string > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__istream, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBDescriptor_GetIdentifier. Expected SWIGTYPE_p_std__istream"); }  } 
  result = OpenBabel::OBDescriptor::GetIdentifier(*arg1); {
    std::pair< std::string,std::string > * resultobj = new std::pair< std::string,std::string >((const std::pair< std::string,std::string > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__pairT_std__string_std__string_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBDescriptor(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBDescriptor *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBDescriptor TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBDescriptor resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_LineSearchType) { OpenBabel::LineSearchType *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::LineSearchType *)new OpenBabel::LineSearchType();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__LineSearchType, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_LineSearchType(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::LineSearchType *arg1 = (OpenBabel::LineSearchType *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::LineSearchType *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__LineSearchType TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::LineSearchType resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_a_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_a_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->a = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_a_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_a_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->a); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_b_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_b_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->b = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_b_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_b_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->b); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_c_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_c_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->c = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_c_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_c_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->c); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_d_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_d_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->d = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_d_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_d_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->d); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__a_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__a_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; if (arg1) (arg1)->_a = *arg2; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__a_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__a_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::string *) & ((arg1)->_a);
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__b_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__b_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; if (arg1) (arg1)->_b = *arg2; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__b_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__b_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::string *) & ((arg1)->_b);
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__c_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__c_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; if (arg1) (arg1)->_c = *arg2; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__c_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__c_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::string *) & ((arg1)->_c);
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__d_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__d_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; if (arg1) (arg1)->_d = *arg2; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__d_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__d_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::string *) & ((arg1)->_d);
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__ipar_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::vector< int > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__ipar_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFParameter__ipar_set. Expected SWIGTYPE_p_std__vectorT_int_t"); }
     }  if (arg1) (arg1)->_ipar = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__ipar_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; std::vector< int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__ipar_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< int > *) & ((arg1)->_ipar);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__dpar_set) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::vector< double > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__dpar_set. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFParameter__dpar_set. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  if (arg1) (arg1)->_dpar = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter__dpar_get) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; std::vector< double > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter__dpar_get. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< double > *) & ((arg1)->_dpar);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFParameter_clear) { OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFParameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFParameter_clear. Expected SWIGTYPE_p_OpenBabel__OBFFParameter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFFParameter) { OpenBabel::OBFFParameter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFFParameter *)new OpenBabel::OBFFParameter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFFParameter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFFParameter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFFParameter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFFParameter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFFParameter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_energy_set) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_energy_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; if (arg1) (arg1)->energy = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_energy_get) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_energy_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double) ((arg1)->energy); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_a_set) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_a_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation2_a_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if (arg1) (arg1)->a = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_a_get) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_a_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->a);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_b_set) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_b_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation2_b_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if (arg1) (arg1)->b = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_b_get) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_b_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->b);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_idx_a_set) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_idx_a_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->idx_a = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_idx_a_get) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_idx_a_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->idx_a); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_idx_b_set) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_idx_b_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->idx_b = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_idx_b_get) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_idx_b_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->idx_b); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_pos_a_set) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_pos_a_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation2_pos_a_set. Expected SWIGTYPE_p_double"); }  } 
  if (arg1) (arg1)->pos_a = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_pos_a_get) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  zval **args[1]; double *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_pos_a_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) ((arg1)->pos_a);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_pos_b_set) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_pos_b_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation2_pos_b_set. Expected SWIGTYPE_p_double"); }  } 
  if (arg1) (arg1)->pos_b = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_pos_b_get) { OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ;
  zval **args[1]; double *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_pos_b_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) ((arg1)->pos_b);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_force_a_set) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_force_a_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation2_force_a_set. Expected SWIGTYPE_p_double"); }  }  {
    size_t ii; double *b = (double *) arg1->force_a; for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_force_a_get) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; zval **args[1]; double *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_force_a_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(double *) ((arg1)->force_a);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_force_b_set) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_force_b_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation2_force_b_set. Expected SWIGTYPE_p_double"); }  }  {
    size_t ii; double *b = (double *) arg1->force_b; for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_force_b_get) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; zval **args[1]; double *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_force_b_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(double *) ((arg1)->force_b);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFFCalculation2(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFFCalculation2 *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFFCalculation2 TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFFCalculation2 resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation2_SetupPointers) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation2_SetupPointers. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation2"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetupPointers(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFFCalculation2) { OpenBabel::OBFFCalculation2 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFFCalculation2 *)new OpenBabel::OBFFCalculation2();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFFCalculation2, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation3_c_set) { OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation3_c_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation3_c_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if (arg1) (arg1)->c = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation3_c_get) { OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation3_c_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->c);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation3_idx_c_set) { OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation3_idx_c_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->idx_c = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation3_idx_c_get) { OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation3_idx_c_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->idx_c); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation3_pos_c_set) { OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation3_pos_c_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation3_pos_c_set. Expected SWIGTYPE_p_double"); }  } 
  if (arg1) (arg1)->pos_c = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation3_pos_c_get) { OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ;
  zval **args[1]; double *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation3_pos_c_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) ((arg1)->pos_c);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation3_force_c_set) {
  OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; double *arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation3_force_c_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation3_force_c_set. Expected SWIGTYPE_p_double"); }  }  {
    size_t ii; double *b = (double *) arg1->force_c; for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation3_force_c_get) {
  OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; zval **args[1]; double *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation3_force_c_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation3"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(double *) ((arg1)->force_c);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFFCalculation3(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFFCalculation3 *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFFCalculation3 TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFFCalculation3 resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFFCalculation3) { OpenBabel::OBFFCalculation3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFFCalculation3 *)new OpenBabel::OBFFCalculation3();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFFCalculation3, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation4_d_set) { OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation4_d_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation4"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation4_d_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   if (arg1) (arg1)->d = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation4_d_get) { OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation4_d_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation4"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->d);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation4_idx_d_set) { OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation4_idx_d_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation4"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->idx_d = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation4_idx_d_get) { OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation4_idx_d_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation4"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->idx_d); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation4_pos_d_set) { OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation4_pos_d_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation4"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation4_pos_d_set. Expected SWIGTYPE_p_double"); }  } 
  if (arg1) (arg1)->pos_d = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation4_pos_d_get) { OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ;
  zval **args[1]; double *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation4_pos_d_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation4"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *) ((arg1)->pos_d);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation4_force_d_set) {
  OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; double *arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation4_force_d_set. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation4"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFCalculation4_force_d_set. Expected SWIGTYPE_p_double"); }  }  {
    size_t ii; double *b = (double *) arg1->force_d; for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFCalculation4_force_d_get) {
  OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; zval **args[1]; double *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFCalculation4_force_d_get. Expected SWIGTYPE_p_OpenBabel__OBFFCalculation4"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(double *) ((arg1)->force_d);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFFCalculation4(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFFCalculation4 *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFFCalculation4 TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFFCalculation4 resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFFCalculation4) { OpenBabel::OBFFCalculation4 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFFCalculation4 *)new OpenBabel::OBFFCalculation4();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFFCalculation4, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_factor_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_factor_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; if (arg1) (arg1)->factor = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_factor_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_factor_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double) ((arg1)->factor); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_constraint_value_set) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_constraint_value_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; if (arg1) (arg1)->constraint_value = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_constraint_value_get) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_constraint_value_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double) ((arg1)->constraint_value); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_rab0_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_rab0_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; if (arg1) (arg1)->rab0 = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_rab0_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_rab0_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double) ((arg1)->rab0); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_rbc0_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_rbc0_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; if (arg1) (arg1)->rbc0 = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_rbc0_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_rbc0_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double) ((arg1)->rbc0); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_type_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_type_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->type = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_type_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_type_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->type); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_ia_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_ia_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->ia = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_ia_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_ia_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->ia); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_ib_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_ib_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->ib = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_ib_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_ib_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->ib); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_ic_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_ic_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->ic = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_ic_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_ic_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->ic); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_id_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_id_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->id = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_id_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_id_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((arg1)->id); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_a_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_a_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraint_a_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if (arg1) (arg1)->a = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_a_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_a_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->a);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_b_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_b_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraint_b_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if (arg1) (arg1)->b = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_b_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_b_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->b);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_c_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_c_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraint_c_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if (arg1) (arg1)->c = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_c_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_c_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->c);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_d_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_d_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraint_d_set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  if (arg1) (arg1)->d = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_d_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_d_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *) ((arg1)->d);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_grada_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_grada_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraint_grada_set. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  if (arg1) (arg1)->grada = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_grada_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_grada_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) & ((arg1)->grada);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_gradb_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_gradb_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraint_gradb_set. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  if (arg1) (arg1)->gradb = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_gradb_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_gradb_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) & ((arg1)->gradb);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_gradc_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_gradc_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraint_gradc_set. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  if (arg1) (arg1)->gradc = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_gradc_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_gradc_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) & ((arg1)->gradc);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_gradd_set) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_gradd_set. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraint_gradd_set. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  if (arg1) (arg1)->gradd = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_gradd_get) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  zval **args[1]; OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_gradd_get. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) & ((arg1)->gradd);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFFConstraint) { OpenBabel::OBFFConstraint *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFFConstraint *)new OpenBabel::OBFFConstraint();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFFConstraint, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFFConstraint(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFFConstraint *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFFConstraint TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFFConstraint resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraint_GetGradient) { OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ;
  int arg2 ; zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraint, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraint_GetGradient. Expected SWIGTYPE_p_OpenBabel__OBFFConstraint"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (arg1)->GetGradient(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBFFConstraints) { OpenBabel::OBFFConstraints *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBFFConstraints *)new OpenBabel::OBFFConstraints();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFFConstraints, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBFFConstraints(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBFFConstraints *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBFFConstraints TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBFFConstraints resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_Clear) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_Clear. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetConstraintEnergy) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetConstraintEnergy. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetConstraintEnergy(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetGradient) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  int arg2 ; zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetGradient. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (arg1)->GetGradient(arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_Setup) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_Setup. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBFFConstraints_Setup. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  (arg1)->Setup(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_SetFactor) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_SetFactor. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetFactor(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_AddIgnore) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_AddIgnore. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->AddIgnore(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_AddAtomConstraint) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_AddAtomConstraint. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->AddAtomConstraint(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_AddAtomXConstraint) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_AddAtomXConstraint. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->AddAtomXConstraint(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_AddAtomYConstraint) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_AddAtomYConstraint. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->AddAtomYConstraint(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_AddAtomZConstraint) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_AddAtomZConstraint. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->AddAtomZConstraint(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_AddDistanceConstraint) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int arg3 ; double arg4 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_AddDistanceConstraint. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (arg1)->AddDistanceConstraint(arg2,arg3,arg4); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_AddAngleConstraint) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int arg3 ; int arg4 ; double arg5 ;
  zval **args[5]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_AddAngleConstraint. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;  convert_to_double_ex(args[4]);
  arg5 = (double) Z_DVAL_PP(args[4]); ; (arg1)->AddAngleConstraint(arg2,arg3,arg4,arg5); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_AddTorsionConstraint) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  double arg6 ; zval **args[6]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_AddTorsionConstraint. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]);
  ;  convert_to_double_ex(args[5]); arg6 = (double) Z_DVAL_PP(args[5]); ;
  (arg1)->AddTorsionConstraint(arg2,arg3,arg4,arg5,arg6); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_DeleteConstraint) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_DeleteConstraint. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->DeleteConstraint(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetFactor) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetFactor. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetFactor(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_Size) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_Size. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBFFConstraints const *)arg1)->Size(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetConstraintType) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetConstraintType. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintType(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetConstraintValue) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetConstraintValue. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintValue(arg2); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetConstraintAtomA) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetConstraintAtomA. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintAtomA(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetConstraintAtomB) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetConstraintAtomB. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintAtomB(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetConstraintAtomC) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetConstraintAtomC. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintAtomC(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetConstraintAtomD) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetConstraintAtomD. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintAtomD(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_IsIgnored) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_IsIgnored. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->IsIgnored(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_IsFixed) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_IsFixed. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->IsFixed(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_IsXFixed) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_IsXFixed. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->IsXFixed(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_IsYFixed) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_IsYFixed. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->IsYFixed(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_IsZFixed) { OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_IsZFixed. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->IsZFixed(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetIgnoredBitVec) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; zval **args[1]; OpenBabel::OBBitVec result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetIgnoredBitVec. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetIgnoredBitVec(); {
    OpenBabel::OBBitVec * resultobj = new OpenBabel::OBBitVec((const OpenBabel::OBBitVec &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__OBBitVec, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBFFConstraints_GetFixedBitVec) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; zval **args[1]; OpenBabel::OBBitVec result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBFFConstraints_GetFixedBitVec. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetFixedBitVec(); {
    OpenBabel::OBBitVec * resultobj = new OpenBabel::OBBitVec((const OpenBabel::OBBitVec &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__OBBitVec, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_c_Default) { OpenBabel::OBForceField **result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBForceField **) &OpenBabel::OBForceField::Default();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_OpenBabel__OBForceField, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_FindType) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBForceField *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBForceField *)OpenBabel::OBForceField::FindType((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBForceField, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_MakeNewInstance) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; OpenBabel::OBForceField *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_MakeNewInstance. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBForceField *)(arg1)->MakeNewInstance();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBForceField, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBForceField(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBForceField *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBForceField TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBForceField resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_FindForceField__SWIG_0) { std::string *arg1 = 0 ; std::string temp1 ; zval **args[1];
  OpenBabel::OBForceField *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  result = (OpenBabel::OBForceField *)OpenBabel::OBForceField::FindForceField((std::string const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBForceField, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_FindForceField__SWIG_1) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBForceField *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBForceField *)OpenBabel::OBForceField::FindForceField((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBForceField, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_FindForceField) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) { int _v = 0; { _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0; } 
    if (!_v) goto check_1; _wrap_OBForceField_FindForceField__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 1) { _wrap_OBForceField_FindForceField__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_FindForceField'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetParameterFile) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetParameterFile. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetParameterFile((std::string const &)*arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetUnit) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetUnit. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetUnit();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_HasAnalyticalGradients) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_HasAnalyticalGradients. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasAnalyticalGradients(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_Setup__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_Setup. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_Setup. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (bool)(arg1)->Setup(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_Setup__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; OpenBabel::OBFFConstraints *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_Setup. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_Setup. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_Setup. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  result = (bool)(arg1)->Setup(*arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_Setup) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBForceField_Setup__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_Setup__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_Setup'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ParseParamFile) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ParseParamFile. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->ParseParamFile(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetTypes) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetTypes. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->SetTypes(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetFormalCharges) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetFormalCharges. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->SetFormalCharges(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetPartialCharges) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetPartialCharges. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->SetPartialCharges(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetupCalculations) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetupCalculations. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->SetupCalculations(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetupPointers) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetupPointers. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->SetupPointers(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_IsSetupNeeded) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_IsSetupNeeded. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_IsSetupNeeded. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->IsSetupNeeded(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetAtomTypes) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetAtomTypes. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_GetAtomTypes. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->GetAtomTypes(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetPartialCharges) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetPartialCharges. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_GetPartialCharges. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->GetPartialCharges(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetCoordinates) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetCoordinates. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_GetCoordinates. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->GetCoordinates(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_UpdateCoordinates) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_UpdateCoordinates. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_UpdateCoordinates. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->UpdateCoordinates(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetConformers) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetConformers. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_GetConformers. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->GetConformers(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_UpdateConformers) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_UpdateConformers. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_UpdateConformers. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->UpdateConformers(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetCoordinates) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetCoordinates. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_SetCoordinates. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->SetCoordinates(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetConformers) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetConformers. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_SetConformers. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->SetConformers(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetGrid) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ;
  double arg3 ; char *arg4 = (char *) 0 ; double arg5 ; zval **args[5]; OpenBabel::OBGridData *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetGrid. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  if ((*args[3])->type==IS_NULL) { arg4 = (char *) 0; }  else { convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]); }  ;  convert_to_double_ex(args[4]); arg5 = (double) Z_DVAL_PP(args[4]); ;
  result = (OpenBabel::OBGridData *)(arg1)->GetGrid(arg2,arg3,(char const *)arg4,arg5);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGridData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_AddIntraGroup) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_AddIntraGroup. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_AddIntraGroup. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->AddIntraGroup(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_AddInterGroup) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_AddInterGroup. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_AddInterGroup. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->AddInterGroup(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_AddInterGroups) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; OpenBabel::OBBitVec *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_AddInterGroups. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_AddInterGroups. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_AddInterGroups. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->AddInterGroups(*arg2,*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ClearGroups) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ClearGroups. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ClearGroups(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_HasGroups) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_HasGroups. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasGroups(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_EnableCutOff) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_EnableCutOff. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->EnableCutOff(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_IsCutOffEnabled) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_IsCutOffEnabled. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsCutOffEnabled(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetVDWCutOff) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetVDWCutOff. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetVDWCutOff(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetVDWCutOff) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetVDWCutOff. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetVDWCutOff(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetElectrostaticCutOff) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetElectrostaticCutOff. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetElectrostaticCutOff(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetElectrostaticCutOff) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetElectrostaticCutOff. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetElectrostaticCutOff(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetUpdateFrequency) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetUpdateFrequency. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetUpdateFrequency(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetUpdateFrequency) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetUpdateFrequency. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetUpdateFrequency(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_UpdatePairsSimple) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_UpdatePairsSimple. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UpdatePairsSimple(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetNumPairs) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetNumPairs. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetNumPairs(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetNumElectrostaticPairs) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetNumElectrostaticPairs. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetNumElectrostaticPairs(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetNumVDWPairs) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetNumVDWPairs. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->GetNumVDWPairs(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_EnableAllPairs) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_EnableAllPairs. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->EnableAllPairs(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_Energy__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_Energy. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->Energy(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_Energy__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_Energy. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->Energy(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_Energy) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_Energy__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_Energy__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_Energy'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Bond__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_Bond. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->E_Bond(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Bond__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_Bond. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->E_Bond(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Bond) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_E_Bond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_E_Bond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_E_Bond'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Angle__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_Angle. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->E_Angle(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Angle__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_Angle. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->E_Angle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Angle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_E_Angle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_E_Angle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_E_Angle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_StrBnd__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_StrBnd. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->E_StrBnd(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_StrBnd__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_StrBnd. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->E_StrBnd(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_StrBnd) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_E_StrBnd__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_E_StrBnd__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_E_StrBnd'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Torsion__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_Torsion. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->E_Torsion(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Torsion__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_Torsion. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->E_Torsion(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Torsion) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_E_Torsion__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_E_Torsion__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_E_Torsion'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_OOP__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_OOP. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->E_OOP(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_OOP__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_OOP. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->E_OOP(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_OOP) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_E_OOP__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_E_OOP__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_E_OOP'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_VDW__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_VDW. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->E_VDW(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_VDW__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_VDW. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->E_VDW(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_VDW) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_E_VDW__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_E_VDW__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_E_VDW'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Electrostatic__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_Electrostatic. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (double)(arg1)->E_Electrostatic(arg2); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Electrostatic__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_E_Electrostatic. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->E_Electrostatic(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_E_Electrostatic) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_E_Electrostatic__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_E_Electrostatic__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_E_Electrostatic'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_PrintTypes) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_PrintTypes. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->PrintTypes(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_PrintFormalCharges) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_PrintFormalCharges. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->PrintFormalCharges(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_PrintPartialCharges) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_PrintPartialCharges. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->PrintPartialCharges(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_PrintVelocities) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_PrintVelocities. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->PrintVelocities(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetLogFile) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetLogFile. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostream, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_SetLogFile. Expected SWIGTYPE_p_std__ostream"); }  } 
  result = (bool)(arg1)->SetLogFile(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetLogLevel) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetLogLevel. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->SetLogLevel(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetLogLevel) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetLogLevel. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetLogLevel(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_OBFFLog__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::string arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_OBFFLog. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (arg1)->OBFFLog(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_OBFFLog__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_OBFFLog. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (arg1)->OBFFLog((char const *)arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_OBFFLog) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; } 
    if (!_v) goto check_1; _wrap_OBForceField_OBFFLog__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBForceField_OBFFLog__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_OBFFLog'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_DistanceGeometry) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_DistanceGeometry. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->DistanceGeometry(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearch__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; bool arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SystematicRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  (arg1)->SystematicRotorSearch(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearch__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SystematicRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SystematicRotorSearch(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearch__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SystematicRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SystematicRotorSearch(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearch) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_SystematicRotorSearch__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_SystematicRotorSearch__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_SystematicRotorSearch__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_SystematicRotorSearch'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearchInitialize__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; bool arg3 ; zval **args[3]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SystematicRotorSearchInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = (int)(arg1)->SystematicRotorSearchInitialize(arg2,arg3); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearchInitialize__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SystematicRotorSearchInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (int)(arg1)->SystematicRotorSearchInitialize(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearchInitialize__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SystematicRotorSearchInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->SystematicRotorSearchInitialize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearchInitialize) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_SystematicRotorSearchInitialize__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_SystematicRotorSearchInitialize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_SystematicRotorSearchInitialize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_SystematicRotorSearchInitialize'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearchNextConformer__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SystematicRotorSearchNextConformer. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->SystematicRotorSearchNextConformer(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearchNextConformer__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SystematicRotorSearchNextConformer. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->SystematicRotorSearchNextConformer();
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SystematicRotorSearchNextConformer) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_SystematicRotorSearchNextConformer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_SystematicRotorSearchNextConformer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_SystematicRotorSearchNextConformer'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearch__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; bool arg4 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_RandomRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; 
  convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ; (arg1)->RandomRotorSearch(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearch__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_RandomRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  (arg1)->RandomRotorSearch(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearch__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_RandomRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->RandomRotorSearch(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearch) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBForceField_RandomRotorSearch__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_RandomRotorSearch__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_RandomRotorSearch__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_RandomRotorSearch'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearchInitialize__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; bool arg4 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_RandomRotorSearchInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; 
  convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ; (arg1)->RandomRotorSearchInitialize(arg2,arg3,arg4);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearchInitialize__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_RandomRotorSearchInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  (arg1)->RandomRotorSearchInitialize(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearchInitialize__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_RandomRotorSearchInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->RandomRotorSearchInitialize(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearchInitialize) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBForceField_RandomRotorSearchInitialize__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_RandomRotorSearchInitialize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_RandomRotorSearchInitialize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_RandomRotorSearchInitialize'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearchNextConformer__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_RandomRotorSearchNextConformer. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->RandomRotorSearchNextConformer(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearchNextConformer__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_RandomRotorSearchNextConformer. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->RandomRotorSearchNextConformer(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_RandomRotorSearchNextConformer) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_RandomRotorSearchNextConformer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_RandomRotorSearchNextConformer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_RandomRotorSearchNextConformer'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_WeightedRotorSearch__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; bool arg4 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_WeightedRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; 
  convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ; (arg1)->WeightedRotorSearch(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_WeightedRotorSearch__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_WeightedRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  (arg1)->WeightedRotorSearch(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_WeightedRotorSearch) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBForceField_WeightedRotorSearch__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_WeightedRotorSearch__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_WeightedRotorSearch'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_FastRotorSearch__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_FastRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (int)(arg1)->FastRotorSearch(arg2); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_FastRotorSearch__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_FastRotorSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->FastRotorSearch(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_FastRotorSearch) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_FastRotorSearch__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_FastRotorSearch__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_FastRotorSearch'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetLineSearchType) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetLineSearchType. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetLineSearchType(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetLineSearchType) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetLineSearchType. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->GetLineSearchType(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_LineSearch__SWIG_0) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 *arg3 = 0 ; zval **args[3]; OpenBabel::vector3 result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_LineSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_LineSearch. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_LineSearch. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (arg1)->LineSearch(arg2,*arg3); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_LineSearch__SWIG_1) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_LineSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_LineSearch. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_LineSearch. Expected SWIGTYPE_p_double"); }  } 
  result = (double)(arg1)->LineSearch(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_LineSearch) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBForceField_LineSearch__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 3) { _wrap_OBForceField_LineSearch__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_LineSearch'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_Newton2NumLineSearch) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_Newton2NumLineSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_Newton2NumLineSearch. Expected SWIGTYPE_p_double"); }  }
   result = (double)(arg1)->Newton2NumLineSearch(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_LineSearchTakeStep) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; double arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_LineSearchTakeStep. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_LineSearchTakeStep. Expected SWIGTYPE_p_double"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_LineSearchTakeStep. Expected SWIGTYPE_p_double"); }  }  
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (arg1)->LineSearchTakeStep(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescent__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; int arg4 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SteepestDescent. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->SteepestDescent(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescent__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SteepestDescent. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  (arg1)->SteepestDescent(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescent__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SteepestDescent. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SteepestDescent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescent) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBForceField_SteepestDescent__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_SteepestDescent__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_SteepestDescent__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_SteepestDescent'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescentInitialize__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; int arg4 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SteepestDescentInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->SteepestDescentInitialize(arg2,arg3,arg4); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescentInitialize__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SteepestDescentInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  (arg1)->SteepestDescentInitialize(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescentInitialize__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SteepestDescentInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SteepestDescentInitialize(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescentInitialize__SWIG_3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SteepestDescentInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SteepestDescentInitialize(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescentInitialize) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_SteepestDescentInitialize__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_SteepestDescentInitialize__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_SteepestDescentInitialize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_SteepestDescentInitialize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_SteepestDescentInitialize'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SteepestDescentTakeNSteps) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SteepestDescentTakeNSteps. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->SteepestDescentTakeNSteps(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradients__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; int arg4 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ConjugateGradients. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->ConjugateGradients(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradients__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ConjugateGradients. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  (arg1)->ConjugateGradients(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradients__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ConjugateGradients. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->ConjugateGradients(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradients) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBForceField_ConjugateGradients__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_ConjugateGradients__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_ConjugateGradients__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_ConjugateGradients'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradientsInitialize__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; int arg4 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ConjugateGradientsInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->ConjugateGradientsInitialize(arg2,arg3,arg4); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradientsInitialize__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ConjugateGradientsInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  (arg1)->ConjugateGradientsInitialize(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradientsInitialize__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ConjugateGradientsInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->ConjugateGradientsInitialize(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradientsInitialize__SWIG_3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ConjugateGradientsInitialize. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ConjugateGradientsInitialize(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradientsInitialize) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBForceField_ConjugateGradientsInitialize__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBForceField_ConjugateGradientsInitialize__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_ConjugateGradientsInitialize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_ConjugateGradientsInitialize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_ConjugateGradientsInitialize'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ConjugateGradientsTakeNSteps) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ConjugateGradientsTakeNSteps. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->ConjugateGradientsTakeNSteps(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GenerateVelocities) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GenerateVelocities. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->GenerateVelocities(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_CorrectVelocities) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_CorrectVelocities. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->CorrectVelocities(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_MolecularDynamicsTakeNSteps__SWIG_0) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; double arg4 ; int arg5 ;
  zval **args[5]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_MolecularDynamicsTakeNSteps. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]); ; (arg1)->MolecularDynamicsTakeNSteps(arg2,arg3,arg4,arg5); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_MolecularDynamicsTakeNSteps__SWIG_1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; double arg4 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_MolecularDynamicsTakeNSteps. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (arg1)->MolecularDynamicsTakeNSteps(arg2,arg3,arg4);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_MolecularDynamicsTakeNSteps__SWIG_2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_MolecularDynamicsTakeNSteps. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  (arg1)->MolecularDynamicsTakeNSteps(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_MolecularDynamicsTakeNSteps) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBForceField_MolecularDynamicsTakeNSteps__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_MolecularDynamicsTakeNSteps__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBForceField_MolecularDynamicsTakeNSteps__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_MolecularDynamicsTakeNSteps'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_GetConstraints) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; OpenBabel::OBFFConstraints *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_GetConstraints. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBFFConstraints *) &(arg1)->GetConstraints();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetConstraints) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBFFConstraints *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetConstraints. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBFFConstraints, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_SetConstraints. Expected SWIGTYPE_p_OpenBabel__OBFFConstraints"); }
     }  (arg1)->SetConstraints(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetFixAtom) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetFixAtom. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetFixAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_UnsetFixAtom) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_UnsetFixAtom. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetFixAtom(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetIgnoreAtom) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetIgnoreAtom. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->SetIgnoreAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_UnsetIgnoreAtom) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_UnsetIgnoreAtom. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetIgnoreAtom(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_IgnoreCalculation__SWIG_0) { int arg1 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)OpenBabel::OBForceField::IgnoreCalculation(arg1,arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_IgnoreCalculation__SWIG_1) { int arg1 ; int arg2 ; int arg3 ; zval **args[3];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }   convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (bool)OpenBabel::OBForceField::IgnoreCalculation(arg1,arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_IgnoreCalculation__SWIG_2) { int arg1 ; int arg2 ; int arg3 ; int arg4 ; zval **args[4];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }   convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; 
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;
  result = (bool)OpenBabel::OBForceField::IgnoreCalculation(arg1,arg2,arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_IgnoreCalculation) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBForceField_IgnoreCalculation__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBForceField_IgnoreCalculation__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBForceField_IgnoreCalculation__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_IgnoreCalculation'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_DetectExplosion) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_DetectExplosion. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->DetectExplosion(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ValidateLineSearch) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 *arg3 = 0 ; zval **args[3]; OpenBabel::vector3 result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ValidateLineSearch. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_ValidateLineSearch. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_ValidateLineSearch. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (arg1)->ValidateLineSearch(arg2,*arg3); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ValidateSteepestDescent) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ValidateSteepestDescent. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->ValidateSteepestDescent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ValidateConjugateGradients) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ValidateConjugateGradients. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->ValidateConjugateGradients(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_Validate) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_Validate. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->Validate(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ValidateGradients) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ValidateGradients. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->ValidateGradients(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_ValidateGradientError) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ; zval **args[3]; OpenBabel::vector3 result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_ValidateGradientError. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_ValidateGradientError. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_ValidateGradientError. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (arg1)->ValidateGradientError(*arg2,*arg3); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorBondDerivative) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorBondDerivative. Expected SWIGTYPE_p_double"); }  }
   { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorBondDerivative. Expected SWIGTYPE_p_double"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorBondDerivative. Expected SWIGTYPE_p_double"); }  }
   { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorBondDerivative. Expected SWIGTYPE_p_double"); }  }
   result = (double)OpenBabel::OBForceField::VectorBondDerivative(arg1,arg2,arg3,arg4); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorDistanceDerivative) { double *arg1 = (double *) (double *)0 ;
  double *arg2 = (double *) (double *)0 ; double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; zval **args[4];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorDistanceDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorDistanceDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorDistanceDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorDistanceDerivative. Expected SWIGTYPE_p_double"); }
     }  result = (double)OpenBabel::OBForceField::VectorDistanceDerivative((double const *)arg1,(double const *)arg2,arg3,arg4);
  { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorLengthDerivative) { OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorLengthDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorLengthDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)OpenBabel::OBForceField::VectorLengthDerivative(*arg1,*arg2); { ZVAL_DOUBLE(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorAngleDerivative__SWIG_0) { double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ; zval **args[6]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_double"); }  }
   { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_double"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_double"); }  }
   { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_double"); }  }
   { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_double"); }  }
   { if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_double"); }  }
   result = (double)OpenBabel::OBForceField::VectorAngleDerivative(arg1,arg2,arg3,arg4,arg5,arg6); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorAngleDerivative__SWIG_1) { OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorAngleDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)OpenBabel::OBForceField::VectorAngleDerivative(*arg1,*arg2,*arg3); { ZVAL_DOUBLE(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorAngleDerivative) { int argc; zval **argv[6]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBForceField_VectorAngleDerivative__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 6) {
    _wrap_OBForceField_VectorAngleDerivative__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_VectorAngleDerivative'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorOOPDerivative__SWIG_0) { double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ; double *arg7 = (double *) 0 ; double *arg8 = (double *) 0 ; zval **args[8]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 8 || zend_get_parameters_array_ex(8, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_double"); }  } 
  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_double"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_double"); }  } 
  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_double"); }  } 
  { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_double"); }  } 
  { if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_double"); }  } 
  { if(SWIG_ConvertPtr(*args[6], (void **) &arg7, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 7 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_double"); }  } 
  { if(SWIG_ConvertPtr(*args[7], (void **) &arg8, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 8 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_double"); }  } 
  result = (double)OpenBabel::OBForceField::VectorOOPDerivative(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorOOPDerivative__SWIG_1) { OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; zval **args[4]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorOOPDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)OpenBabel::OBForceField::VectorOOPDerivative(*arg1,*arg2,*arg3,*arg4); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorOOPDerivative) { int argc; zval **argv[8]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 4) {
    _wrap_OBForceField_VectorOOPDerivative__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 8) {
    _wrap_OBForceField_VectorOOPDerivative__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_VectorOOPDerivative'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorTorsionDerivative__SWIG_0) { double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ; double *arg7 = (double *) 0 ; double *arg8 = (double *) 0 ; zval **args[8]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 8 || zend_get_parameters_array_ex(8, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[6], (void **) &arg7, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 7 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_double"); }
     }  { if(SWIG_ConvertPtr(*args[7], (void **) &arg8, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 8 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_double"); }
     }  result = (double)OpenBabel::OBForceField::VectorTorsionDerivative(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorTorsionDerivative__SWIG_1) { OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; zval **args[4]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorTorsionDerivative. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)OpenBabel::OBForceField::VectorTorsionDerivative(*arg1,*arg2,*arg3,*arg4); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorTorsionDerivative) { int argc; zval **argv[8]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 4) {
    _wrap_OBForceField_VectorTorsionDerivative__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 8) {
    _wrap_OBForceField_VectorTorsionDerivative__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBForceField_VectorTorsionDerivative'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorSubtract) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorSubtract. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorSubtract. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorSubtract. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::VectorSubtract(arg1,arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorAdd) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorAdd. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorAdd. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorAdd. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::VectorAdd(arg1,arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorDivide) { double *arg1 = (double *) 0 ; double arg2 ; double *arg3 = (double *) 0 ;
  zval **args[3]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorDivide. Expected SWIGTYPE_p_double"); }  }  
  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorDivide. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::VectorDivide(arg1,arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorMultiply) { double *arg1 = (double *) 0 ; double arg2 ;
  double *arg3 = (double *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorMultiply. Expected SWIGTYPE_p_double"); }  }  
  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorMultiply. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::VectorMultiply(arg1,arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorSelfMultiply) { double *arg1 = (double *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorSelfMultiply. Expected SWIGTYPE_p_double"); }  }  
  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]); ; OpenBabel::OBForceField::VectorSelfMultiply(arg1,arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorNormalize) { double *arg1 = (double *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorNormalize. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::VectorNormalize(arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorCopy) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorCopy. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorCopy. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::VectorCopy(arg1,arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorLength) { double *arg1 = (double *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorLength. Expected SWIGTYPE_p_double"); }  } 
  result = (double)OpenBabel::OBForceField::VectorLength(arg1); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorDistance) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorDistance. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorDistance. Expected SWIGTYPE_p_double"); }  } 
  result = (double)OpenBabel::OBForceField::VectorDistance(arg1,arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorAngle) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorAngle. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorAngle. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorAngle. Expected SWIGTYPE_p_double"); }  } 
  result = (double)OpenBabel::OBForceField::VectorAngle(arg1,arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorTorsion) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorTorsion. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorTorsion. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorTorsion. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorTorsion. Expected SWIGTYPE_p_double"); }  } 
  result = (double)OpenBabel::OBForceField::VectorTorsion(arg1,arg2,arg3,arg4); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorOOP) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; zval **args[4]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorOOP. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorOOP. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorOOP. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBForceField_VectorOOP. Expected SWIGTYPE_p_double"); }  } 
  result = (double)OpenBabel::OBForceField::VectorOOP(arg1,arg2,arg3,arg4); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorClear) { double *arg1 = (double *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorClear. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::VectorClear(arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorDot) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; zval **args[2];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorDot. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorDot. Expected SWIGTYPE_p_double"); }  } 
  result = (double)OpenBabel::OBForceField::VectorDot(arg1,arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_VectorCross) { double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_VectorCross. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBForceField_VectorCross. Expected SWIGTYPE_p_double"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBForceField_VectorCross. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::VectorCross(arg1,arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_PrintVector) { double *arg1 = (double *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_PrintVector. Expected SWIGTYPE_p_double"); }  } 
  OpenBabel::OBForceField::PrintVector(arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetLogToStdOut) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetLogToStdOut. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); OpenBabel_OBForceField_SetLogToStdOut(arg1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBForceField_SetLogToStdErr) { OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBForceField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBForceField_SetLogToStdErr. Expected SWIGTYPE_p_OpenBabel__OBForceField"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); OpenBabel_OBForceField_SetLogToStdErr(arg1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBBuilder) { OpenBabel::OBBuilder *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBBuilder *)new OpenBabel::OBBuilder();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBuilder, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Build__SWIG_0) { OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBuilder, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_Build. Expected SWIGTYPE_p_OpenBabel__OBBuilder"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBuilder_Build. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->Build(*arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Build__SWIG_1) { OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBuilder, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_Build. Expected SWIGTYPE_p_OpenBabel__OBBuilder"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBuilder_Build. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (bool)(arg1)->Build(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Build) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBBuilder_Build__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBBuilder_Build__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBuilder_Build'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_SetKeepRings) { OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBuilder, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_SetKeepRings. Expected SWIGTYPE_p_OpenBabel__OBBuilder"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetKeepRings(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_UnsetKeepRings) { OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBuilder, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_UnsetKeepRings. Expected SWIGTYPE_p_OpenBabel__OBBuilder"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->UnsetKeepRings(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_LoadFragments) { OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBuilder, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_LoadFragments. Expected SWIGTYPE_p_OpenBabel__OBBuilder"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->LoadFragments(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_GetNewBondVector__SWIG_0) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  zval **args[1]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = OpenBabel::OBBuilder::GetNewBondVector(arg1); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_GetNewBondVector__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double arg2 ; zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }   convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]); ;
  result = OpenBabel::OBBuilder::GetNewBondVector(arg1,arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_GetNewBondVector) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBuilder_GetNewBondVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBBuilder_GetNewBondVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBuilder_GetNewBondVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Connect__SWIG_0) { OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ;
  OpenBabel::vector3 *arg4 = 0 ; int arg5 ; zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_Connect. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]);
  ; { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBBuilder_Connect. Expected SWIGTYPE_p_OpenBabel__vector3"); }  }  
  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;
  result = (bool)OpenBabel::OBBuilder::Connect(*arg1,arg2,arg3,*arg4,arg5); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Connect__SWIG_1) { OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ;
  OpenBabel::vector3 *arg4 = 0 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_Connect. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]);
  ; { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBBuilder_Connect. Expected SWIGTYPE_p_OpenBabel__vector3"); }  } 
  result = (bool)OpenBabel::OBBuilder::Connect(*arg1,arg2,arg3,*arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Connect__SWIG_2) { OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ; int arg4 ;
  zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_Connect. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]);
  ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;
  result = (bool)OpenBabel::OBBuilder::Connect(*arg1,arg2,arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Connect__SWIG_3) { OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ; zval **args[3];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_Connect. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]);
  ; result = (bool)OpenBabel::OBBuilder::Connect(*arg1,arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Connect) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBBuilder_Connect__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_OBBuilder_Connect__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 4) {
    _wrap_OBBuilder_Connect__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBBuilder_Connect__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBuilder_Connect'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_Swap) { OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_Swap. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]);
  ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ;  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]); ; result = (bool)OpenBabel::OBBuilder::Swap(*arg1,arg2,arg3,arg4,arg5); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_CorrectStereoBonds) { OpenBabel::OBMol *arg1 = 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_CorrectStereoBonds. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)OpenBabel::OBBuilder::CorrectStereoBonds(*arg1); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_CorrectStereoAtoms__SWIG_0) { OpenBabel::OBMol *arg1 = 0 ; bool arg2 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_CorrectStereoAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }   convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]); ;
  result = (bool)OpenBabel::OBBuilder::CorrectStereoAtoms(*arg1,arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_CorrectStereoAtoms__SWIG_1) { OpenBabel::OBMol *arg1 = 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_CorrectStereoAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)OpenBabel::OBBuilder::CorrectStereoAtoms(*arg1); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_CorrectStereoAtoms) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBuilder_CorrectStereoAtoms__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBBuilder_CorrectStereoAtoms__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBuilder_CorrectStereoAtoms'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_IsSpiroAtom) { unsigned long arg1 ; OpenBabel::OBMol *arg2 = 0 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }   convert_to_long_ex(args[0]); arg1 = (unsigned long) Z_LVAL_PP(args[0]); ; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBuilder_IsSpiroAtom. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (bool)OpenBabel::OBBuilder::IsSpiroAtom(arg1,*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_GetFragment) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::OBBitVec result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_GetFragment. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = OpenBabel::OBBuilder::GetFragment(arg1); {
    OpenBabel::OBBitVec * resultobj = new OpenBabel::OBBitVec((const OpenBabel::OBBitVec &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__OBBitVec, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBuilder_AddNbrs) { OpenBabel::OBBitVec *arg1 = 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBuilder_AddNbrs. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBuilder_AddNbrs. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  OpenBabel::OBBuilder::AddNbrs(*arg1,arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBBuilder(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBBuilder *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBBuilder TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBBuilder resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_c_Default) { OpenBabel::OBOp **result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::OBOp **) &OpenBabel::OBOp::Default();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_OpenBabel__OBOp, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_FindType) { char *arg1 = (char *) 0 ; zval **args[1]; OpenBabel::OBOp *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; result = (OpenBabel::OBOp *)OpenBabel::OBOp::FindType((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBOp, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_c_Do__SWIG_0) { OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; char *arg3 = (char *) 0 ;
  OpenBabel::OBOp::OpMap *arg4 = (OpenBabel::OBOp::OpMap *) 0 ; OpenBabel::OBConversion *arg5 = (OpenBabel::OBConversion *) 0 ;
  zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBOp"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }  
  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]); }  ; {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBOp_c_Do. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }  } 
  result = (bool)(arg1)->Do(arg2,(char const *)arg3,arg4,arg5); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_c_Do__SWIG_1) { OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; char *arg3 = (char *) 0 ;
  OpenBabel::OBOp::OpMap *arg4 = (OpenBabel::OBOp::OpMap *) 0 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBOp"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }  
  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]); }  ; {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBOp_c_Do. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  result = (bool)(arg1)->Do(arg2,(char const *)arg3,arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_c_Do__SWIG_2) { OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; char *arg3 = (char *) 0 ; zval **args[3]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBOp"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }  
  if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]); }  ; result = (bool)(arg1)->Do(arg2,(char const *)arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_c_Do__SWIG_3) { OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBOp"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOp_c_Do. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  result = (bool)(arg1)->Do(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_c_Do) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { _wrap_OBOp_c_Do__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  if (argc == 3) { _wrap_OBOp_c_Do__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBOp_c_Do__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBOp_c_Do__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBOp_c_Do'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_WorksWith) { OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOp_WorksWith. Expected SWIGTYPE_p_OpenBabel__OBOp"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOp_WorksWith. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  result = (bool)((OpenBabel::OBOp const *)arg1)->WorksWith(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_ProcessVec) { OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ;
  std::vector< OpenBabel::OBBase * > *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBOp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOp_ProcessVec. Expected SWIGTYPE_p_OpenBabel__OBOp"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBase_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOp_ProcessVec. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBase_p_t"); }
     }  result = (bool)(arg1)->ProcessVec(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_OpOptions) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; zval **args[1];
  std::string result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOp_OpOptions. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  } 
  result = OpenBabel::OBOp::OpOptions(arg1);
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBOp_DoOps) { OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBOp::OpMap *arg2 = (OpenBabel::OBOp::OpMap *) 0 ; OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBOp_DoOps. Expected SWIGTYPE_p_OpenBabel__OBBase"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBOp_DoOps. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBOp_DoOps. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }  } 
  result = (bool)OpenBabel::OBOp::DoOps(arg1,(std::map< std::string,std::string > const *)arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBOp(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBOp *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBOp TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBOp resource already free'd"); delete arg1; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChargeModel_c_Default) { OpenBabel::OBChargeModel **result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBChargeModel **) &OpenBabel::OBChargeModel::Default();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_OpenBabel__OBChargeModel, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBChargeModel__SWIG_0) { char *arg1 = (char *) 0 ; bool arg2 ; zval **args[2];
  OpenBabel::OBChargeModel *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBChargeModel *)new OpenBabel::OBChargeModel((char const *)arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBChargeModel, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBChargeModel__SWIG_1) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBChargeModel *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBChargeModel *)new OpenBabel::OBChargeModel((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBChargeModel, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBChargeModel) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_new_OBChargeModel__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBChargeModel__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBChargeModel'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChargeModel_FindType) { char *arg1 = (char *) 0 ; zval **args[1];
  OpenBabel::OBChargeModel *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ;
  result = (OpenBabel::OBChargeModel *)OpenBabel::OBChargeModel::FindType((char const *)arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBChargeModel, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChargeModel_ComputeCharges__SWIG_0) {
  OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChargeModel, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChargeModel_ComputeCharges. Expected SWIGTYPE_p_OpenBabel__OBChargeModel"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBChargeModel_ComputeCharges. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->ComputeCharges(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChargeModel_ComputeCharges__SWIG_1) {
  OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; OpenBabel::OBMol *arg2 = 0 ; char *arg3 = (char *) 0 ;
  zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChargeModel, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChargeModel_ComputeCharges. Expected SWIGTYPE_p_OpenBabel__OBChargeModel"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBChargeModel_ComputeCharges. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }   if ((*args[2])->type==IS_NULL) { arg3 = (char *) 0; }  else { convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]); }  ; result = (bool)(arg1)->ComputeCharges(*arg2,(char const *)arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChargeModel_ComputeCharges) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBChargeModel_ComputeCharges__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBChargeModel_ComputeCharges__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBChargeModel_ComputeCharges'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChargeModel_GetFormalCharges) { OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ;
  zval **args[1]; std::vector< double > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChargeModel, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChargeModel_GetFormalCharges. Expected SWIGTYPE_p_OpenBabel__OBChargeModel"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< double > *) &((OpenBabel::OBChargeModel const *)arg1)->GetFormalCharges();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChargeModel_GetPartialCharges) { OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ;
  zval **args[1]; std::vector< double > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChargeModel, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChargeModel_GetPartialCharges. Expected SWIGTYPE_p_OpenBabel__OBChargeModel"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< double > *) &((OpenBabel::OBChargeModel const *)arg1)->GetPartialCharges();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBChargeModel_GetDipoleMoment) { OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; OpenBabel::vector3 result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBChargeModel, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBChargeModel_GetDipoleMoment. Expected SWIGTYPE_p_OpenBabel__OBChargeModel"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBChargeModel_GetDipoleMoment. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (arg1)->GetDipoleMoment(*arg2); {
    OpenBabel::vector3 * resultobj = new OpenBabel::vector3((const OpenBabel::vector3 &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_OpenBabel__vector3, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBChargeModel(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBChargeModel *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBChargeModel TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBChargeModel resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGraphSym__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBitVec *arg2 = (OpenBabel::OBBitVec *) 0 ; zval **args[2]; OpenBabel::OBGraphSym *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBGraphSym. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBGraphSym. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  result = (OpenBabel::OBGraphSym *)new OpenBabel::OBGraphSym(arg1,(OpenBabel::OBBitVec const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGraphSym, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGraphSym__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBGraphSym *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBGraphSym. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBGraphSym *)new OpenBabel::OBGraphSym(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGraphSym, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBGraphSym) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_new_OBGraphSym__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBGraphSym__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBGraphSym'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBGraphSym(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBGraphSym *arg1 = (OpenBabel::OBGraphSym *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBGraphSym *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBGraphSym TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBGraphSym resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGraphSym_NoSymmetryClass_get) { unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (unsigned int)(unsigned int)OpenBabel::OBGraphSym::NoSymmetryClass;
  { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGraphSym_GetSymmetry) { OpenBabel::OBGraphSym *arg1 = (OpenBabel::OBGraphSym *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGraphSym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGraphSym_GetSymmetry. Expected SWIGTYPE_p_OpenBabel__OBGraphSym"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBGraphSym_GetSymmetry. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  result = (int)(arg1)->GetSymmetry(*arg2); { ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBGraphSym_ClearSymmetry) { OpenBabel::OBGraphSym *arg1 = (OpenBabel::OBGraphSym *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBGraphSym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBGraphSym_ClearSymmetry. Expected SWIGTYPE_p_OpenBabel__OBGraphSym"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->ClearSymmetry(); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBIsomorphismMapper(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBIsomorphismMapper *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBIsomorphismMapper TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBIsomorphismMapper resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_GetInstance__SWIG_0) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; OpenBabel::OBIsomorphismMapper *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_GetInstance. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }
     }  convert_to_string_ex(args[1]); temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBIsomorphismMapper *)OpenBabel::OBIsomorphismMapper::GetInstance(arg1,(std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_GetInstance__SWIG_1) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ;
  zval **args[1]; OpenBabel::OBIsomorphismMapper *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_GetInstance. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }
     }  result = (OpenBabel::OBIsomorphismMapper *)OpenBabel::OBIsomorphismMapper::GetInstance(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_GetInstance) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBIsomorphismMapper_GetInstance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBIsomorphismMapper_GetInstance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBIsomorphismMapper_GetInstance'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapFirst__SWIG_0) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mapping *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapFirst. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapFirst. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapFirst. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBIsomorphismMapper_MapFirst. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->MapFirst((OpenBabel::OBMol const *)arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapFirst__SWIG_1) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mapping *arg3 = 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapFirst. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapFirst. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapFirst. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }  (arg1)->MapFirst((OpenBabel::OBMol const *)arg2,*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapFirst) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBIsomorphismMapper_MapFirst__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBIsomorphismMapper_MapFirst__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBIsomorphismMapper_MapFirst'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapUnique__SWIG_0) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapUnique. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapUnique. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapUnique. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBIsomorphismMapper_MapUnique. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->MapUnique((OpenBabel::OBMol const *)arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapUnique__SWIG_1) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapUnique. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapUnique. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapUnique. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  (arg1)->MapUnique((OpenBabel::OBMol const *)arg2,*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapUnique) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBIsomorphismMapper_MapUnique__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBIsomorphismMapper_MapUnique__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBIsomorphismMapper_MapUnique'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapAll__SWIG_0) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; std::size_t arg5 ; zval **args[5]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }   convert_to_long_ex(args[4]); arg5 = (std::size_t) Z_LVAL_PP(args[4]); ;
  (arg1)->MapAll((OpenBabel::OBMol const *)arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4,arg5); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapAll__SWIG_1) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->MapAll((OpenBabel::OBMol const *)arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapAll__SWIG_2) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapAll. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  (arg1)->MapAll((OpenBabel::OBMol const *)arg2,*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapAll) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBIsomorphismMapper_MapAll__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBIsomorphismMapper_MapAll__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_OBIsomorphismMapper_MapAll__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBIsomorphismMapper_MapAll'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapGeneric__SWIG_0) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBIsomorphismMapper::Functor *arg2 = 0 ; OpenBabel::OBMol *arg3 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapGeneric. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapGeneric. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapGeneric. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBIsomorphismMapper_MapGeneric. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->MapGeneric(*arg2,(OpenBabel::OBMol const *)arg3,(OpenBabel::OBBitVec const &)*arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapGeneric__SWIG_1) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBIsomorphismMapper::Functor *arg2 = 0 ; OpenBabel::OBMol *arg3 = (OpenBabel::OBMol *) 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_MapGeneric. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBIsomorphismMapper_MapGeneric. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBIsomorphismMapper_MapGeneric. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->MapGeneric(*arg2,(OpenBabel::OBMol const *)arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_MapGeneric) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBIsomorphismMapper_MapGeneric__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBIsomorphismMapper_MapGeneric__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBIsomorphismMapper_MapGeneric'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBIsomorphismMapper_SetTimeout) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBIsomorphismMapper_SetTimeout. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetTimeout(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_MapsTo) { OpenBabel::OBIsomorphismMapper::Mapping *arg1 = 0 ; unsigned int arg2 ;
  unsigned int *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MapsTo. Expected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t"); }
     }   convert_to_long_ex(args[1]); arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_unsigned_int, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of MapsTo. Expected SWIGTYPE_p_unsigned_int"); }  } 
  result = (bool)OpenBabel::MapsTo((std::vector< std::pair< unsigned int,unsigned int > > const &)*arg1,arg2,*arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; std::size_t arg5 ; zval **args[5]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }  
  convert_to_long_ex(args[4]); arg5 = (std::size_t) Z_LVAL_PP(args[4]); ;
  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(std::vector< unsigned int > const &)*arg3,(OpenBabel::OBBitVec const &)*arg4,arg5);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(std::vector< unsigned int > const &)*arg3,(OpenBabel::OBBitVec const &)*arg4);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ; zval **args[3];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(std::vector< unsigned int > const &)*arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms__SWIG_3) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; OpenBabel::OBBitVec *arg3 = 0 ; std::size_t arg4 ;
  zval **args[4]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }  
  convert_to_long_ex(args[3]); arg4 = (std::size_t) Z_LVAL_PP(args[3]); ;
  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(OpenBabel::OBBitVec const &)*arg3,arg4); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms__SWIG_4) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; OpenBabel::OBBitVec *arg3 = 0 ; zval **args[3];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(OpenBabel::OBBitVec const &)*arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms__SWIG_5) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     }  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms__SWIG_6) { OpenBabel::OBIsomorphismMapper::Functor *arg1 = 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg3 = 0 ; OpenBabel::OBBitVec *arg4 = 0 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  OpenBabel::FindAutomorphisms(*arg1,arg2,(std::vector< unsigned int > const &)*arg3,(OpenBabel::OBBitVec const &)*arg4);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms__SWIG_7) { OpenBabel::OBIsomorphismMapper::Functor *arg1 = 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg3 = 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindAutomorphisms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FindAutomorphisms. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  OpenBabel::FindAutomorphisms(*arg1,arg2,(std::vector< unsigned int > const &)*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindAutomorphisms) { int argc; zval **argv[5]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_FindAutomorphisms__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2; { {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) >= 0); }
      }  if (!_v) goto check_2; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBBitVec, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_FindAutomorphisms__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 3) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } } 
    if (!_v) goto check_3; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) >= 0); }
      }  if (!_v) goto check_3; _wrap_FindAutomorphisms__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3:
  if (argc == 3) { _wrap_FindAutomorphisms__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } } 
    if (!_v) goto check_5; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) >= 0); }
      }  if (!_v) goto check_5; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBBitVec, 0) >= 0); } }  if (!_v) goto check_5; {
      _v = (Z_TYPE_PP(argv[3]) == IS_LONG); }  if (!_v) goto check_5;
    _wrap_FindAutomorphisms__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_5: if (argc == 4) { int _v = 0; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor, 0) >= 0); }
      }  if (!_v) goto check_6; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_6;
    _wrap_FindAutomorphisms__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_6: if (argc == 4) {
    _wrap_FindAutomorphisms__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_FindAutomorphisms__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FindAutomorphisms'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryAtom__SWIG_0) { int arg1 ; bool arg2 ; bool arg3 ; zval **args[3];
  OpenBabel::OBQueryAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ;  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = (OpenBabel::OBQueryAtom *)new OpenBabel::OBQueryAtom(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryAtom, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryAtom__SWIG_1) { int arg1 ; bool arg2 ; zval **args[2]; OpenBabel::OBQueryAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBQueryAtom *)new OpenBabel::OBQueryAtom(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryAtom, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryAtom__SWIG_2) { int arg1 ; zval **args[1]; OpenBabel::OBQueryAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_long_ex(args[0]); arg1 = (int) Z_LVAL_PP(args[0]); ;
  result = (OpenBabel::OBQueryAtom *)new OpenBabel::OBQueryAtom(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryAtom, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryAtom__SWIG_3) { OpenBabel::OBQueryAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBQueryAtom *)new OpenBabel::OBQueryAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryAtom, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryAtom) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBQueryAtom__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBQueryAtom__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBQueryAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_OBQueryAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBQueryAtom'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBQueryAtom(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBQueryAtom *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBQueryAtom TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBQueryAtom resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQueryAtom_GetIndex) { OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQueryAtom_GetIndex. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBQueryAtom const *)arg1)->GetIndex(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQueryAtom_GetBonds) { OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBQueryBond * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQueryAtom_GetBonds. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBQueryBond * > *) &((OpenBabel::OBQueryAtom const *)arg1)->GetBonds();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryBond_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQueryAtom_GetNbrs) { OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBQueryAtom * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQueryAtom_GetNbrs. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBQueryAtom * > *) &((OpenBabel::OBQueryAtom const *)arg1)->GetNbrs();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryAtom_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQueryAtom_Matches) { OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQueryAtom_Matches. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBQueryAtom_Matches. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (bool)((OpenBabel::OBQueryAtom const *)arg1)->Matches((OpenBabel::OBAtom const *)arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryBond__SWIG_0) { OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; int arg3 ; bool arg4 ; zval **args[4];
  OpenBabel::OBQueryBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBQueryBond. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  } 
  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBQueryBond. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]); ; result = (OpenBabel::OBQueryBond *)new OpenBabel::OBQueryBond(arg1,arg2,arg3,arg4);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryBond, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryBond__SWIG_1) { OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; int arg3 ; zval **args[3]; OpenBabel::OBQueryBond *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBQueryBond. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  } 
  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBQueryBond. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (OpenBabel::OBQueryBond *)new OpenBabel::OBQueryBond(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryBond, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryBond__SWIG_2) { OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; zval **args[2]; OpenBabel::OBQueryBond *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBQueryBond. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  } 
  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBQueryBond. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  } 
  result = (OpenBabel::OBQueryBond *)new OpenBabel::OBQueryBond(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryBond, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQueryBond) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_new_OBQueryBond__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_OBQueryBond__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_new_OBQueryBond__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBQueryBond'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBQueryBond(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBQueryBond *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBQueryBond TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBQueryBond resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQueryBond_GetIndex) { OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQueryBond_GetIndex. Expected SWIGTYPE_p_OpenBabel__OBQueryBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBQueryBond const *)arg1)->GetIndex(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQueryBond_GetBeginAtom) { OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ;
  zval **args[1]; OpenBabel::OBQueryAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQueryBond_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBQueryBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBQueryAtom *)((OpenBabel::OBQueryBond const *)arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQueryBond_GetEndAtom) { OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ;
  zval **args[1]; OpenBabel::OBQueryAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQueryBond_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBQueryBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBQueryAtom *)((OpenBabel::OBQueryBond const *)arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQueryBond_Matches) { OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQueryBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQueryBond_Matches. Expected SWIGTYPE_p_OpenBabel__OBQueryBond"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBQueryBond_Matches. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  result = (bool)((OpenBabel::OBQueryBond const *)arg1)->Matches((OpenBabel::OBBond const *)arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBQuery(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBQuery *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBQuery TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBQuery resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQuery_NumAtoms) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQuery_NumAtoms. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBQuery const *)arg1)->NumAtoms(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQuery_NumBonds) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQuery_NumBonds. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBQuery const *)arg1)->NumBonds(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQuery_GetAtoms) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBQueryAtom * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQuery_GetAtoms. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBQueryAtom * > *) &((OpenBabel::OBQuery const *)arg1)->GetAtoms();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryAtom_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQuery_GetBonds) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBQueryBond * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQuery_GetBonds. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBQueryBond * > *) &((OpenBabel::OBQuery const *)arg1)->GetBonds();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryBond_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQuery_GetBond) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; OpenBabel::OBQueryAtom *arg3 = (OpenBabel::OBQueryAtom *) 0 ;
  zval **args[3]; OpenBabel::OBQueryBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQuery_GetBond. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBQuery_GetBond. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  } 
  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBQuery_GetBond. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  } 
  result = (OpenBabel::OBQueryBond *)((OpenBabel::OBQuery const *)arg1)->GetBond(arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQueryBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQuery_AddAtom) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQuery_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBQueryAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBQuery_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBQueryAtom"); }  } 
  (arg1)->AddAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBQuery_AddBond) { OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ;
  OpenBabel::OBQueryBond *arg2 = (OpenBabel::OBQueryBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBQuery_AddBond. Expected SWIGTYPE_p_OpenBabel__OBQuery"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBQueryBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBQuery_AddBond. Expected SWIGTYPE_p_OpenBabel__OBQueryBond"); }  } 
  (arg1)->AddBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBQuery) { OpenBabel::OBQuery *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::OBQuery *)new OpenBabel::OBQuery();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQuery, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CompileMoleculeQuery__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; OpenBabel::OBQuery *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CompileMoleculeQuery. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CompileMoleculeQuery. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }
   result = (OpenBabel::OBQuery *)OpenBabel::CompileMoleculeQuery(arg1,(OpenBabel::OBBitVec const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQuery, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CompileMoleculeQuery__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBQuery *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CompileMoleculeQuery. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBQuery *)OpenBabel::CompileMoleculeQuery(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQuery, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CompileMoleculeQuery) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_CompileMoleculeQuery__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_CompileMoleculeQuery__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'CompileMoleculeQuery'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CompileSmilesQuery__SWIG_0) { std::string *arg1 = 0 ; OpenBabel::OBBitVec *arg2 = 0 ;
  std::string temp1 ; zval **args[2]; OpenBabel::OBQuery *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1; {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CompileSmilesQuery. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  result = (OpenBabel::OBQuery *)OpenBabel::CompileSmilesQuery((std::string const &)*arg1,(OpenBabel::OBBitVec const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQuery, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CompileSmilesQuery__SWIG_1) { std::string *arg1 = 0 ; std::string temp1 ; zval **args[1];
  OpenBabel::OBQuery *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; } 
  convert_to_string_ex(args[0]); temp1.assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0])); arg1 = &temp1;
  result = (OpenBabel::OBQuery *)OpenBabel::CompileSmilesQuery((std::string const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBQuery, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CompileSmilesQuery) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_CompileSmilesQuery__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_CompileSmilesQuery__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'CompileSmilesQuery'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CanonicalLabels__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ; OpenBabel::OBBitVec *arg4 = 0 ; int arg5 ;
  bool arg6 ; zval **args[6]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CanonicalLabels. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CanonicalLabels. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of CanonicalLabels. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of CanonicalLabels. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }  
  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;  convert_to_boolean_ex(args[5]);
  arg6 = (bool) Z_LVAL_PP(args[5]); ;
  OpenBabel::CanonicalLabels(arg1,(std::vector< unsigned int > const &)*arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4,arg5,arg6);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CanonicalLabels__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ; OpenBabel::OBBitVec *arg4 = 0 ; int arg5 ;
  zval **args[5]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CanonicalLabels. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CanonicalLabels. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of CanonicalLabels. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of CanonicalLabels. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }  
  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;
  OpenBabel::CanonicalLabels(arg1,(std::vector< unsigned int > const &)*arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4,arg5);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CanonicalLabels__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ; OpenBabel::OBBitVec *arg4 = 0 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CanonicalLabels. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CanonicalLabels. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of CanonicalLabels. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of CanonicalLabels. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  OpenBabel::CanonicalLabels(arg1,(std::vector< unsigned int > const &)*arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CanonicalLabels__SWIG_3) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CanonicalLabels. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CanonicalLabels. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of CanonicalLabels. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  OpenBabel::CanonicalLabels(arg1,(std::vector< unsigned int > const &)*arg2,*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CanonicalLabels) { int argc; zval **argv[6]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_CanonicalLabels__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_CanonicalLabels__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 5) {
    _wrap_CanonicalLabels__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 6) {
    _wrap_CanonicalLabels__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'CanonicalLabels'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereo_MakeRefs__SWIG_0) { OpenBabel::OBStereo::Ref arg1 ; OpenBabel::OBStereo::Ref arg2 ;
  OpenBabel::OBStereo::Ref arg3 ; OpenBabel::OBStereo::Ref arg4 ; zval **args[4];
  SwigValueWrapper< std::vector< unsigned long > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]);
  arg3 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]);
  arg4 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[3]); ; result = OpenBabel::OBStereo::MakeRefs(arg1,arg2,arg3,arg4); {
    OpenBabel::OBStereo::Refs * resultobj = new OpenBabel::OBStereo::Refs((const OpenBabel::OBStereo::Refs &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_long_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereo_MakeRefs__SWIG_1) { OpenBabel::OBStereo::Ref arg1 ; OpenBabel::OBStereo::Ref arg2 ;
  OpenBabel::OBStereo::Ref arg3 ; zval **args[3]; SwigValueWrapper< std::vector< unsigned long > > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_long_ex(args[0]); arg1 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]);
  arg3 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[2]); ; result = OpenBabel::OBStereo::MakeRefs(arg1,arg2,arg3); {
    OpenBabel::OBStereo::Refs * resultobj = new OpenBabel::OBStereo::Refs((const OpenBabel::OBStereo::Refs &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_long_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereo_MakeRefs) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBStereo_MakeRefs__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBStereo_MakeRefs__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBStereo_MakeRefs'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereo_ContainsSameRefs) { OpenBabel::OBStereo::Refs *arg1 = 0 ;
  OpenBabel::OBStereo::Refs *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereo_ContainsSameRefs. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t"); }
     }  { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBStereo_ContainsSameRefs. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t"); }
     } 
  result = (bool)OpenBabel::OBStereo::ContainsSameRefs((std::vector< unsigned long > const &)*arg1,(std::vector< unsigned long > const &)*arg2);
  { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereo_ContainsRef) { OpenBabel::OBStereo::Refs *arg1 = 0 ; unsigned long arg2 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereo_ContainsRef. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t"); }
     }   convert_to_long_ex(args[1]); arg2 = (unsigned long) Z_LVAL_PP(args[1]); ;
  result = (bool)OpenBabel::OBStereo::ContainsRef((std::vector< unsigned long > const &)*arg1,arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereo_NumInversions) { OpenBabel::OBStereo::Refs *arg1 = 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereo_NumInversions. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t"); }
     }  result = (int)OpenBabel::OBStereo::NumInversions((std::vector< unsigned long > const &)*arg1); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereo_Permutate) { OpenBabel::OBStereo::Refs *arg1 = 0 ; int arg2 ; int arg3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereo_Permutate. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t"); }
     }   convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]); ; OpenBabel::OBStereo::Permutate(*arg1,arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereo_Permutated) { OpenBabel::OBStereo::Refs *arg1 = 0 ; int arg2 ; int arg3 ; zval **args[3];
  SwigValueWrapper< std::vector< unsigned long > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereo_Permutated. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t"); }
     }   convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = OpenBabel::OBStereo::Permutated((std::vector< unsigned long > const &)*arg1,arg2,arg3); {
    OpenBabel::OBStereo::Refs * resultobj = new OpenBabel::OBStereo::Refs((const OpenBabel::OBStereo::Refs &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_long_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStereo) { OpenBabel::OBStereo *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBStereo *)new OpenBabel::OBStereo();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBStereo, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBStereo(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBStereo *arg1 = (OpenBabel::OBStereo *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBStereo *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBStereo TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBStereo resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStereoUnit__SWIG_0) { OpenBabel::OBStereoUnit *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBStereoUnit *)new OpenBabel::OBStereoUnit();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBStereoUnit, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStereoUnit__SWIG_1) { OpenBabel::OBStereo::Type arg1 ; unsigned long arg2 ; bool arg3 ;
  zval **args[3]; OpenBabel::OBStereoUnit *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (OpenBabel::OBStereo::Type) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ;  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = (OpenBabel::OBStereoUnit *)new OpenBabel::OBStereoUnit(arg1,arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBStereoUnit, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStereoUnit__SWIG_2) { OpenBabel::OBStereo::Type arg1 ; unsigned long arg2 ; zval **args[2];
  OpenBabel::OBStereoUnit *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  convert_to_long_ex(args[0]); arg1 = (OpenBabel::OBStereo::Type) Z_LVAL_PP(args[0]); ;  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBStereoUnit *)new OpenBabel::OBStereoUnit(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBStereoUnit, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStereoUnit) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBStereoUnit__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBStereoUnit__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_new_OBStereoUnit__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBStereoUnit'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoUnit_type_set) { OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ;
  OpenBabel::OBStereo::Type arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoUnit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoUnit_type_set. Expected SWIGTYPE_p_OpenBabel__OBStereoUnit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBStereo::Type) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->type = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoUnit_type_get) { OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ;
  zval **args[1]; OpenBabel::OBStereo::Type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoUnit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoUnit_type_get. Expected SWIGTYPE_p_OpenBabel__OBStereoUnit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBStereo::Type) ((arg1)->type); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoUnit_id_set) { OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoUnit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoUnit_id_set. Expected SWIGTYPE_p_OpenBabel__OBStereoUnit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->id = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoUnit_id_get) { OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; zval **args[1];
  unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoUnit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoUnit_id_get. Expected SWIGTYPE_p_OpenBabel__OBStereoUnit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long) ((arg1)->id); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoUnit_para_set) { OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; bool arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoUnit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoUnit_para_set. Expected SWIGTYPE_p_OpenBabel__OBStereoUnit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (arg1)->para = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoUnit_para_get) { OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoUnit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoUnit_para_get. Expected SWIGTYPE_p_OpenBabel__OBStereoUnit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((arg1)->para); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBStereoUnit(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBStereoUnit *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBStereoUnit TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBStereoUnit resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBStereoBase(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBStereoBase *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBStereoBase TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBStereoBase resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoBase_GetMolecule) { OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoBase_GetMolecule. Expected SWIGTYPE_p_OpenBabel__OBStereoBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBMol *)((OpenBabel::OBStereoBase const *)arg1)->GetMolecule();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoBase_GetType) { OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ;
  zval **args[1]; OpenBabel::OBStereo::Type result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoBase_GetType. Expected SWIGTYPE_p_OpenBabel__OBStereoBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBStereo::Type)((OpenBabel::OBStereoBase const *)arg1)->GetType(); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoBase_SetSpecified) { OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoBase_SetSpecified. Expected SWIGTYPE_p_OpenBabel__OBStereoBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (arg1)->SetSpecified(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoBase_IsSpecified) { OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoBase_IsSpecified. Expected SWIGTYPE_p_OpenBabel__OBStereoBase"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OpenBabel::OBStereoBase const *)arg1)->IsSpecified(); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStereoFacade__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; OpenBabel::OBStereoFacade *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBStereoFacade. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBStereoFacade *)new OpenBabel::OBStereoFacade(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBStereoFacade, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStereoFacade__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBStereoFacade *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBStereoFacade. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBStereoFacade *)new OpenBabel::OBStereoFacade(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBStereoFacade, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBStereoFacade) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_new_OBStereoFacade__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBStereoFacade__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBStereoFacade'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_NumTetrahedralStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_NumTetrahedralStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->NumTetrahedralStereo(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_HasTetrahedralStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_HasTetrahedralStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->HasTetrahedralStereo(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_GetTetrahedralStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; zval **args[2];
  OpenBabel::OBTetrahedralStereo *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_GetTetrahedralStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBTetrahedralStereo *)(arg1)->GetTetrahedralStereo(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBTetrahedralStereo, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_NumCisTransStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_NumCisTransStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->NumCisTransStereo(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_HasCisTransStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_HasCisTransStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->HasCisTransStereo(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_GetCisTransStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; zval **args[2];
  OpenBabel::OBCisTransStereo *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_GetCisTransStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBCisTransStereo *)(arg1)->GetCisTransStereo(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBCisTransStereo, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_NumSquarePlanarStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_NumSquarePlanarStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->NumSquarePlanarStereo(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_HasSquarePlanarStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_HasSquarePlanarStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->HasSquarePlanarStereo(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBStereoFacade_GetSquarePlanarStereo) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; zval **args[2];
  OpenBabel::OBSquarePlanarStereo *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBStereoFacade, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBStereoFacade_GetSquarePlanarStereo. Expected SWIGTYPE_p_OpenBabel__OBStereoFacade"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBSquarePlanarStereo *)(arg1)->GetSquarePlanarStereo(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSquarePlanarStereo, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBStereoFacade(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBStereoFacade *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBStereoFacade TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBStereoFacade resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_PerceiveStereo__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PerceiveStereo. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]); ; OpenBabel::PerceiveStereo(arg1,arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_PerceiveStereo__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of PerceiveStereo. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  OpenBabel::PerceiveStereo(arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_PerceiveStereo) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_PerceiveStereo__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_PerceiveStereo__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'PerceiveStereo'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoFrom2D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg2 = (std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *) 0 ;
  bool arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StereoFrom2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of StereoFrom2D. Expected SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; OpenBabel::StereoFrom2D(arg1,arg2,arg3); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoFrom2D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg2 = (std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StereoFrom2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of StereoFrom2D. Expected SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t"); }
     }  OpenBabel::StereoFrom2D(arg1,arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoFrom2D__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StereoFrom2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  OpenBabel::StereoFrom2D(arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoFrom2D) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_StereoFrom2D__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_StereoFrom2D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_StereoFrom2D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'StereoFrom2D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoFrom3D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StereoFrom3D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_boolean_ex(args[1]); arg2 = (bool) Z_LVAL_PP(args[1]); ; OpenBabel::StereoFrom3D(arg1,arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoFrom3D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StereoFrom3D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  OpenBabel::StereoFrom3D(arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoFrom3D) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_StereoFrom3D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_StereoFrom3D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'StereoFrom3D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoFrom0D) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StereoFrom0D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  OpenBabel::StereoFrom0D(arg1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom3D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ; zval **args[3];
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TetrahedralFrom3D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TetrahedralFrom3D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = OpenBabel::TetrahedralFrom3D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3); {
    std::vector< OpenBabel::OBTetrahedralStereo * > * resultobj = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom3D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; zval **args[2];
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TetrahedralFrom3D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TetrahedralFrom3D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }  result = OpenBabel::TetrahedralFrom3D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2); {
    std::vector< OpenBabel::OBTetrahedralStereo * > * resultobj = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom3D) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_TetrahedralFrom3D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_TetrahedralFrom3D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'TetrahedralFrom3D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom2D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ; zval **args[3];
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TetrahedralFrom2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TetrahedralFrom2D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = OpenBabel::TetrahedralFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3); {
    std::vector< OpenBabel::OBTetrahedralStereo * > * resultobj = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom2D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; zval **args[2];
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TetrahedralFrom2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TetrahedralFrom2D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }  result = OpenBabel::TetrahedralFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2); {
    std::vector< OpenBabel::OBTetrahedralStereo * > * resultobj = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom2D) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_TetrahedralFrom2D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_TetrahedralFrom2D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'TetrahedralFrom2D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom0D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ; zval **args[3];
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TetrahedralFrom0D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TetrahedralFrom0D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = OpenBabel::TetrahedralFrom0D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3); {
    std::vector< OpenBabel::OBTetrahedralStereo * > * resultobj = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom0D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; zval **args[2];
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TetrahedralFrom0D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TetrahedralFrom0D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }  result = OpenBabel::TetrahedralFrom0D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2); {
    std::vector< OpenBabel::OBTetrahedralStereo * > * resultobj = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetrahedralFrom0D) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_TetrahedralFrom0D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_TetrahedralFrom0D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'TetrahedralFrom0D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom3D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ; zval **args[3];
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CisTransFrom3D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CisTransFrom3D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = OpenBabel::CisTransFrom3D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3); {
    std::vector< OpenBabel::OBCisTransStereo * > * resultobj = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom3D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; zval **args[2];
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CisTransFrom3D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CisTransFrom3D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }  result = OpenBabel::CisTransFrom3D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2); {
    std::vector< OpenBabel::OBCisTransStereo * > * resultobj = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom3D) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_CisTransFrom3D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_CisTransFrom3D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'CisTransFrom3D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom2D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg3 = (std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *) 0 ;
  bool arg4 ; zval **args[4]; SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CisTransFrom2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CisTransFrom2D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of CisTransFrom2D. Expected SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t"); }
     }   convert_to_boolean_ex(args[3]); arg4 = (bool) Z_LVAL_PP(args[3]); ;
  result = OpenBabel::CisTransFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > const *)arg3,arg4);
  {
    std::vector< OpenBabel::OBCisTransStereo * > * resultobj = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom2D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg3 = (std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *) 0 ;
  zval **args[3]; SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CisTransFrom2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CisTransFrom2D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of CisTransFrom2D. Expected SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t"); }
     } 
  result = OpenBabel::CisTransFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > const *)arg3);
  {
    std::vector< OpenBabel::OBCisTransStereo * > * resultobj = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom2D__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; zval **args[2];
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CisTransFrom2D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CisTransFrom2D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }  result = OpenBabel::CisTransFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2); {
    std::vector< OpenBabel::OBCisTransStereo * > * resultobj = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom2D) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_CisTransFrom2D__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_CisTransFrom2D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_CisTransFrom2D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'CisTransFrom2D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_TetStereoToWedgeHash) { OpenBabel::OBMol *arg1 = 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg2 = 0 ;
  std::map< OpenBabel::OBBond *,OpenBabel::OBStereo::Ref > *arg3 = 0 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TetStereoToWedgeHash. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TetStereoToWedgeHash. Expected SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of TetStereoToWedgeHash. Expected SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t"); }
     }  result = (bool)OpenBabel::TetStereoToWedgeHash(*arg1,*arg2,*arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_GetUnspecifiedCisTrans) { OpenBabel::OBMol *arg1 = 0 ; zval **args[1];
  SwigValueWrapper< std::set< OpenBabel::OBBond * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GetUnspecifiedCisTrans. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = OpenBabel::GetUnspecifiedCisTrans(*arg1); {
    std::set< OpenBabel::OBBond * > * resultobj = new std::set< OpenBabel::OBBond * >((const std::set< OpenBabel::OBBond * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__setT_OpenBabel__OBBond_p_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_StereoRefToImplicit) { OpenBabel::OBMol *arg1 = 0 ; OpenBabel::OBStereo::Ref arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StereoRefToImplicit. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[1]); ;
  OpenBabel::StereoRefToImplicit(*arg1,arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_ImplicitRefToStereo) { OpenBabel::OBMol *arg1 = 0 ; OpenBabel::OBStereo::Ref arg2 ;
  OpenBabel::OBStereo::Ref arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ImplicitRefToStereo. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]);
  arg3 = (OpenBabel::OBStereo::Ref) Z_LVAL_PP(args[2]); ; OpenBabel::ImplicitRefToStereo(*arg1,arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom0D__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ; zval **args[3];
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CisTransFrom0D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CisTransFrom0D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ;
  result = OpenBabel::CisTransFrom0D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3); {
    std::vector< OpenBabel::OBCisTransStereo * > * resultobj = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom0D__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBStereoUnitSet *arg2 = 0 ; zval **args[2];
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CisTransFrom0D. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of CisTransFrom0D. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t"); }
     }  result = OpenBabel::CisTransFrom0D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2); {
    std::vector< OpenBabel::OBCisTransStereo * > * resultobj = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_CisTransFrom0D) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_CisTransFrom0D__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_CisTransFrom0D__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'CisTransFrom0D'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindStereogenicUnits__SWIG_0) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; zval **args[2]; SwigValueWrapper< std::vector< OpenBabel::OBStereoUnit > > result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindStereogenicUnits. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindStereogenicUnits. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  result = OpenBabel::FindStereogenicUnits(arg1,(std::vector< unsigned int > const &)*arg2); {
    OpenBabel::OBStereoUnitSet * resultobj = new OpenBabel::OBStereoUnitSet((const OpenBabel::OBStereoUnitSet &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindStereogenicUnits__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; OpenBabel::Automorphisms *arg3 = 0 ; zval **args[3];
  SwigValueWrapper< std::vector< OpenBabel::OBStereoUnit > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FindStereogenicUnits. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of FindStereogenicUnits. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t"); }
     }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of FindStereogenicUnits. Expected SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t"); }
     } 
  result = OpenBabel::FindStereogenicUnits(arg1,(std::vector< unsigned int > const &)*arg2,(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const &)*arg3);
  { OpenBabel::OBStereoUnitSet * resultobj = new OpenBabel::OBStereoUnitSet((const OpenBabel::OBStereoUnitSet &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_FindStereogenicUnits) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_FindStereogenicUnits__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_FindStereogenicUnits__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'FindStereogenicUnits'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBBitVec__SWIG_0) { OpenBabel::OBBitVec *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBBitVec__SWIG_1) { unsigned int arg1 ; zval **args[1]; OpenBabel::OBBitVec *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_long_ex(args[0]); arg1 = (unsigned int) Z_LVAL_PP(args[0]); ;
  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBBitVec__SWIG_2) { OpenBabel::OBBitVec *arg1 = 0 ; zval **args[1];
  OpenBabel::OBBitVec *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBBitVec. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec((OpenBabel::OBBitVec const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBBitVec) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBBitVec__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBBitVec, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBBitVec__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBBitVec__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBBitVec'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_SetBitOn) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_SetBitOn. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetBitOn(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_SetBitOff) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_SetBitOff. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->SetBitOff(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_SetRangeOn) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ;
  unsigned int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_SetRangeOn. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  (arg1)->SetRangeOn(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_SetRangeOff) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ;
  unsigned int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_SetRangeOff. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  (arg1)->SetRangeOff(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_Fold) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_Fold. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->Fold(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_FirstBit__SWIG_0) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  unsigned int arg2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_FirstBit. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (int)((OpenBabel::OBBitVec const *)arg1)->FirstBit(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_FirstBit__SWIG_1) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_FirstBit. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)((OpenBabel::OBBitVec const *)arg1)->FirstBit(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_FirstBit) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBBitVec_FirstBit__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBBitVec_FirstBit__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBBitVec_FirstBit'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_NextBit) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; int arg2 ; zval **args[2];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_NextBit. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (int)((OpenBabel::OBBitVec const *)arg1)->NextBit(arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_EndBit) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_EndBit. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)((OpenBabel::OBBitVec const *)arg1)->EndBit(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_GetSize) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; zval **args[1];
  size_t result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_GetSize. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = ((OpenBabel::OBBitVec const *)arg1)->GetSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_CountBits) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_CountBits. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBBitVec const *)arg1)->CountBits(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_c_Empty) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_c_Empty. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBBitVec const *)arg1)->Empty(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_IsEmpty) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_IsEmpty. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)((OpenBabel::OBBitVec const *)arg1)->IsEmpty(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_Resize) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_Resize. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->Resize(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_ResizeWords) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_ResizeWords. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(arg1)->ResizeWords(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_BitIsSet) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_BitIsSet. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)((OpenBabel::OBBitVec const *)arg1)->BitIsSet(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_BitIsOn) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; int arg2 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_BitIsOn. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (bool)((OpenBabel::OBBitVec const *)arg1)->BitIsOn(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_FromVecInt) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  std::vector< int > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_FromVecInt. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBitVec_FromVecInt. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  (arg1)->FromVecInt((std::vector< int > const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_FromString) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; std::string *arg2 = 0 ;
  int arg3 ; std::string temp2 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_FromString. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->FromString((std::string const &)*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_ToVecInt) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  std::vector< int > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_ToVecInt. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBitVec_ToVecInt. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  ((OpenBabel::OBBitVec const *)arg1)->ToVecInt(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_Clear) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_Clear. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_Negate) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_Negate. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Negate(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_GetWords) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  OpenBabel::OBBitVec::word_vector *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_GetWords. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_uint32_t_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBitVec_GetWords. Expected SWIGTYPE_p_std__vectorT_uint32_t_t"); }  }
   (arg1)->GetWords(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBBitVec_add) { OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; OpenBabel::OBBitVec *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBBitVec_add. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBBitVec_add. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  result = (OpenBabel::OBBitVec *) &(arg1)->operator +=((OpenBabel::OBBitVec const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBBitVec(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBBitVec *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBBitVec TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBBitVec resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_Tanimoto) { OpenBabel::OBBitVec *arg1 = 0 ; OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tanimoto. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Tanimoto. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  } 
  result = (double)OpenBabel::Tanimoto((OpenBabel::OBBitVec const &)*arg1,(OpenBabel::OBBitVec const &)*arg2); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRotorRule) { char *arg1 = (char *) 0 ; int *arg2 ; std::vector< double > *arg3 = 0 ;
  double arg4 ; zval **args[4]; OpenBabel::OBRotorRule *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  
  if ((*args[0])->type==IS_NULL) { arg1 = (char *) 0; }  else { convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]); }  ; { if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OBRotorRule. Expected SWIGTYPE_p_int"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_OBRotorRule. Expected SWIGTYPE_p_std__vectorT_double_t"); }  }  
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ;
  result = (OpenBabel::OBRotorRule *)new OpenBabel::OBRotorRule(arg1,arg2,*arg3,arg4);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotorRule, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRotorRule(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRotorRule *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRotorRule TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRotorRule resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRule_IsValid) { OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRule_IsValid. Expected SWIGTYPE_p_OpenBabel__OBRotorRule"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->IsValid(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRule_GetReferenceAtoms) { OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ;
  int *arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRule_GetReferenceAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotorRule"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorRule_GetReferenceAtoms. Expected SWIGTYPE_p_int"); }  } 
  (arg1)->GetReferenceAtoms(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRule_SetDelta) { OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; double arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRule_SetDelta. Expected SWIGTYPE_p_OpenBabel__OBRotorRule"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetDelta(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRule_GetDelta) { OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRule_GetDelta. Expected SWIGTYPE_p_OpenBabel__OBRotorRule"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetDelta(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRule_GetTorsionVals) { OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ;
  zval **args[1]; std::vector< double > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRule_GetTorsionVals. Expected SWIGTYPE_p_OpenBabel__OBRotorRule"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< double > *) &(arg1)->GetTorsionVals();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRule_GetSmartsString) { OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ;
  zval **args[1]; std::string *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRule_GetSmartsString. Expected SWIGTYPE_p_OpenBabel__OBRotorRule"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::string *) &(arg1)->GetSmartsString();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__string, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRule_GetSmartsPattern) { OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ;
  zval **args[1]; OpenBabel::OBSmartsPattern *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRule, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRule_GetSmartsPattern. Expected SWIGTYPE_p_OpenBabel__OBRotorRule"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBSmartsPattern *)(arg1)->GetSmartsPattern();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSmartsPattern, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRotorRules) { OpenBabel::OBRotorRules *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRotorRules *)new OpenBabel::OBRotorRules();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotorRules, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRotorRules(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRotorRules *arg1 = (OpenBabel::OBRotorRules *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRotorRules *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRotorRules TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRotorRules resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRules_SetFilename) { OpenBabel::OBRotorRules *arg1 = (OpenBabel::OBRotorRules *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRules, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRules_SetFilename. Expected SWIGTYPE_p_OpenBabel__OBRotorRules"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->SetFilename(*arg2);
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRules_GetRotorIncrements) { OpenBabel::OBRotorRules *arg1 = (OpenBabel::OBRotorRules *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; int *arg4 ; std::vector< double > *arg5 = 0 ;
  double *arg6 = 0 ; zval **args[6]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRules, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRules_GetRotorIncrements. Expected SWIGTYPE_p_OpenBabel__OBRotorRules"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorRules_GetRotorIncrements. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRotorRules_GetRotorIncrements. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBRotorRules_GetRotorIncrements. Expected SWIGTYPE_p_int"); }  }  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of OBRotorRules_GetRotorIncrements. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  { if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_double, 0) < 0 || arg6 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of OBRotorRules_GetRotorIncrements. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->GetRotorIncrements(*arg2,arg3,arg4,*arg5,*arg6); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorRules_Quiet) { OpenBabel::OBRotorRules *arg1 = (OpenBabel::OBRotorRules *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorRules, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorRules_Quiet. Expected SWIGTYPE_p_OpenBabel__OBRotorRules"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Quiet(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRotor) { OpenBabel::OBRotor *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRotor *)new OpenBabel::OBRotor();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotor, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRotor(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRotor *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRotor TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRotor resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetBond) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetBond. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  (arg1)->SetBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetRings) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetRings. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetRings. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  (arg1)->SetRings(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetIdx) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetDihedralAtoms__SWIG_0) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  std::vector< int > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetDihedralAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetDihedralAtoms. Expected SWIGTYPE_p_std__vectorT_int_t"); }
     }  (arg1)->SetDihedralAtoms(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetDihedralAtoms__SWIG_1) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int *arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetDihedralAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetDihedralAtoms. Expected SWIGTYPE_p_int"); }  } 
  (arg1)->SetDihedralAtoms(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetDihedralAtoms) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_int_t, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBRotor_SetDihedralAtoms__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBRotor_SetDihedralAtoms__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotor_SetDihedralAtoms'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetRotAtoms) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  std::vector< int > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetRotAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetRotAtoms. Expected SWIGTYPE_p_std__vectorT_int_t"); }  } 
  (arg1)->SetRotAtoms(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetTorsionValues) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  std::vector< double > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetTorsionValues. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetTorsionValues. Expected SWIGTYPE_p_std__vectorT_double_t"); }
     }  (arg1)->SetTorsionValues(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetFixedBonds) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetFixedBonds. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetFixedBonds. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }
   (arg1)->SetFixedBonds(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetToAngle) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; double arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetToAngle. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetToAngle. Expected SWIGTYPE_p_double"); }  }  
  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; (arg1)->SetToAngle(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetRotor__SWIG_0) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; int arg3 ; int arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetRotor. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetRotor. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ; (arg1)->SetRotor(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetRotor__SWIG_1) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetRotor. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetRotor. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->SetRotor(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetRotor) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBRotor_SetRotor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBRotor_SetRotor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotor_SetRotor'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_Set__SWIG_0) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; double arg3 ; double arg4 ; double arg5 ; double arg6 ; zval **args[6];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_Set. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_Set. Expected SWIGTYPE_p_double"); }  }  
  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;  convert_to_double_ex(args[3]);
  arg4 = (double) Z_DVAL_PP(args[3]); ;  convert_to_double_ex(args[4]); arg5 = (double) Z_DVAL_PP(args[4]); ; 
  convert_to_double_ex(args[5]); arg6 = (double) Z_DVAL_PP(args[5]); ; (arg1)->Set(arg2,arg3,arg4,arg5,arg6); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_Precompute) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_Precompute. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_Precompute. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->Precompute(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_Set__SWIG_1) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_Set. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_Set. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->Set(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_Precalc) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  std::vector< double * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_Precalc. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_double_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_Precalc. Expected SWIGTYPE_p_std__vectorT_double_p_t"); }  } 
  (arg1)->Precalc(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_Set__SWIG_2) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; int arg3 ; int arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_Set. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_Set. Expected SWIGTYPE_p_double"); }  }  
  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]);
  ; (arg1)->Set(arg2,arg3,arg4); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_Set) { int argc; zval **argv[6]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { _wrap_OBRotor_Set__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}
   if (argc == 4) { _wrap_OBRotor_Set__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 6) {
    _wrap_OBRotor_Set__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotor_Set'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetBond) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetBond. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBond *)(arg1)->GetBond();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_Size) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1]; size_t result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_Size. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->Size(); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetIdx) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)((OpenBabel::OBRotor const *)arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetDihedralAtoms__SWIG_0) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int *arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetDihedralAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_GetDihedralAtoms. Expected SWIGTYPE_p_int"); }  } 
  (arg1)->GetDihedralAtoms(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetDihedralAtoms__SWIG_1) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  zval **args[1]; std::vector< int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetDihedralAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< int > *) &(arg1)->GetDihedralAtoms();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetDihedralAtoms) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBRotor_GetDihedralAtoms__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBRotor_GetDihedralAtoms__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotor_GetDihedralAtoms'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetTorsionValues) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  std::vector< double > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetTorsionValues. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< double > *) &((OpenBabel::OBRotor const *)arg1)->GetTorsionValues();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetFixedBonds) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  OpenBabel::OBBitVec *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetFixedBonds. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBitVec *) &(arg1)->GetFixedBonds();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_CalcTorsion) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_CalcTorsion. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_CalcTorsion. Expected SWIGTYPE_p_double"); }  } 
  result = (double)(arg1)->CalcTorsion(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_CalcBondLength) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_CalcBondLength. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_CalcBondLength. Expected SWIGTYPE_p_double"); }  } 
  result = (double)(arg1)->CalcBondLength(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_BeginTorIncrement) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< double >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_BeginTorIncrement. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginTorIncrement(); {
    std::vector< double >::iterator * resultobj = new std::vector< double >::iterator((const std::vector< double >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t__iterator, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_EndTorIncrement) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< double >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_EndTorIncrement. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndTorIncrement(); {
    std::vector< double >::iterator * resultobj = new std::vector< double >::iterator((const std::vector< double >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t__iterator, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_RemoveSymTorsionValues) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_RemoveSymTorsionValues. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->RemoveSymTorsionValues(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetDelta) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetDelta. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]); arg2 = (double) Z_DVAL_PP(args[1]);
  ; (arg1)->SetDelta(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetDelta) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetDelta. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(arg1)->GetDelta(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetFixedAtoms) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  OpenBabel::OBBitVec *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetFixedAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBitVec *) &(arg1)->GetFixedAtoms();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetFixedAtoms) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetFixedAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetFixedAtoms. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }
   (arg1)->SetFixedAtoms(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetEvalAtoms) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  OpenBabel::OBBitVec *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetEvalAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBitVec *) &(arg1)->GetEvalAtoms();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetEvalAtoms) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetEvalAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotor_SetEvalAtoms. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }  }
   (arg1)->SetEvalAtoms(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetRotAtoms) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  void *result = 0 ; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetRotAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (void *)(arg1)->GetRotAtoms();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_GetResolution) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; zval **args[1];
  std::vector< double > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_GetResolution. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< double > *) &(arg1)->GetResolution();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotor_SetNumCoords) { OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotor, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotor_SetNumCoords. Expected SWIGTYPE_p_OpenBabel__OBRotor"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  (arg1)->SetNumCoords(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRotorList) { OpenBabel::OBRotorList *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRotorList *)new OpenBabel::OBRotorList();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotorList, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRotorList(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRotorList *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRotorList TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRotorList resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_Clear) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_Clear. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_Size) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; zval **args[1];
  size_t result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_Size. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->Size(); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_IsFixedBond) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_IsFixedBond. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_IsFixedBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }
   result = (bool)(arg1)->IsFixedBond(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_HasFixedBonds) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_HasFixedBonds. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasFixedBonds(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_RemoveSymVals) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_RemoveSymVals. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_RemoveSymVals. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->RemoveSymVals(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_HasRingRotors) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_HasRingRotors. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasRingRotors(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_Setup__SWIG_0) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_Setup. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_Setup. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->Setup(*arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_Setup__SWIG_1) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_Setup. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_Setup. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (bool)(arg1)->Setup(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_Setup) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBRotorList_Setup__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBRotorList_Setup__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotorList_Setup'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_SetFixedBonds) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_SetFixedBonds. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_SetFixedBonds. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->SetFixedBonds(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_Init) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_Init. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (arg1)->Init(*arg2);
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_SetQuiet) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_SetQuiet. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetQuiet(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_SetRotAtoms) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_SetRotAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_SetRotAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   result = (bool)(arg1)->SetRotAtoms(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_FindRotors__SWIG_0) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_FindRotors. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_FindRotors. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; result = (bool)(arg1)->FindRotors(*arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_FindRotors__SWIG_1) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_FindRotors. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_FindRotors. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (bool)(arg1)->FindRotors(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_FindRotors) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBRotorList_FindRotors__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBRotorList_FindRotors__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotorList_FindRotors'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_SetEvalAtoms) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_SetEvalAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_SetEvalAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   result = (bool)(arg1)->SetEvalAtoms(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_AssignTorVals) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_AssignTorVals. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_AssignTorVals. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->AssignTorVals(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_BeginRotor) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBRotorIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBRotor *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_BeginRotor. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_BeginRotor. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator"); }
     }  result = (OpenBabel::OBRotor *)(arg1)->BeginRotor(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotor, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_NextRotor) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBRotorIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBRotor *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_NextRotor. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_NextRotor. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator"); }
     }  result = (OpenBabel::OBRotor *)(arg1)->NextRotor(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotor, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_BeginRotors) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBRotor * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_BeginRotors. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginRotors(); {
    OpenBabel::OBRotorIterator * resultobj = new OpenBabel::OBRotorIterator((const OpenBabel::OBRotorIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_EndRotors) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBRotor * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_EndRotors. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndRotors(); {
    OpenBabel::OBRotorIterator * resultobj = new OpenBabel::OBRotorIterator((const OpenBabel::OBRotorIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_IdentifyEvalAtoms) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_IdentifyEvalAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_IdentifyEvalAtoms. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (bool)(arg1)->IdentifyEvalAtoms(*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_SetFixAtoms) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_SetFixAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_SetFixAtoms. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  (arg1)->SetFixAtoms(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_HasFixedAtoms) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_HasFixedAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->HasFixedAtoms(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_IgnoreSymmetryRemoval) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_IgnoreSymmetryRemoval. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->IgnoreSymmetryRemoval(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorList_SetRotAtomsByFix) { OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorList_SetRotAtomsByFix. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotorList_SetRotAtomsByFix. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->SetRotAtomsByFix(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_rotor_digit__SWIG_0) { unsigned int arg1 ; zval **args[1]; OpenBabel::rotor_digit *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
    convert_to_long_ex(args[0]); arg1 = (unsigned int) Z_LVAL_PP(args[0]); ;
  result = (OpenBabel::rotor_digit *)new OpenBabel::rotor_digit(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__rotor_digit, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_rotor_digit__SWIG_1) { OpenBabel::rotor_digit *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::rotor_digit *)new OpenBabel::rotor_digit();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__rotor_digit, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_rotor_digit) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_rotor_digit__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_rotor_digit__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_rotor_digit'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_rotor_digit_set_size) { OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__rotor_digit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rotor_digit_set_size. Expected SWIGTYPE_p_OpenBabel__rotor_digit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->set_size(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_rotor_digit_set_state) { OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__rotor_digit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rotor_digit_set_state. Expected SWIGTYPE_p_OpenBabel__rotor_digit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (arg1)->set_state(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_rotor_digit_get_state) { OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; zval **args[1];
  int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__rotor_digit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rotor_digit_get_state. Expected SWIGTYPE_p_OpenBabel__rotor_digit"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(arg1)->get_state(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_rotor_digit_size) { OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__rotor_digit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rotor_digit_size. Expected SWIGTYPE_p_OpenBabel__rotor_digit"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->size(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_rotor_digit_next) { OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__rotor_digit, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rotor_digit_next. Expected SWIGTYPE_p_OpenBabel__rotor_digit"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->next(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_rotor_digit(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::rotor_digit *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__rotor_digit TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::rotor_digit resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRotorKeys) { OpenBabel::OBRotorKeys *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRotorKeys *)new OpenBabel::OBRotorKeys();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotorKeys, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorKeys_Clear) { OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; zval **args[1];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorKeys, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorKeys_Clear. Expected SWIGTYPE_p_OpenBabel__OBRotorKeys"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->Clear(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorKeys_NumKeys) { OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; zval **args[1];
  unsigned int result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorKeys, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorKeys_NumKeys. Expected SWIGTYPE_p_OpenBabel__OBRotorKeys"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(arg1)->NumKeys(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorKeys_AddRotor) { OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorKeys, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorKeys_AddRotor. Expected SWIGTYPE_p_OpenBabel__OBRotorKeys"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (arg1)->AddRotor(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorKeys_Next) { OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; zval **args[1];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorKeys, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorKeys_Next. Expected SWIGTYPE_p_OpenBabel__OBRotorKeys"); }  } 
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(arg1)->Next(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotorKeys_GetKey) { OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; zval **args[1];
  std::vector< int > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotorKeys, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotorKeys_GetKey. Expected SWIGTYPE_p_OpenBabel__OBRotorKeys"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->GetKey(); {
    std::vector< int > * resultobj = new std::vector< int >((const std::vector< int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRotorKeys(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRotorKeys *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRotorKeys TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRotorKeys resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBRotamerList) { OpenBabel::OBRotamerList *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBRotamerList *)new OpenBabel::OBRotamerList();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRotamerList, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBRotamerList(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBRotamerList *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBRotamerList TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBRotamerList resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_Setup__SWIG_0) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; OpenBabel::OBRotorList *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_Setup. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_Setup. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBRotorList, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRotamerList_Setup. Expected SWIGTYPE_p_OpenBabel__OBRotorList"); }
     }  (arg1)->Setup(*arg2,*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_Setup__SWIG_1) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; unsigned char *arg3 = (unsigned char *) 0 ; int arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_Setup. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_Setup. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_unsigned_char, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRotamerList_Setup. Expected SWIGTYPE_p_unsigned_char"); }  }  
  convert_to_long_ex(args[3]); arg4 = (int) Z_LVAL_PP(args[3]); ; (arg1)->Setup(*arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_Setup) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) {
    _wrap_OBRotamerList_Setup__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBRotamerList_Setup__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotamerList_Setup'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_NumRotors) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_NumRotors. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBRotamerList const *)arg1)->NumRotors(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_NumRotamers) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_NumRotamers. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBRotamerList const *)arg1)->NumRotamers(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_AddRotamer__SWIG_0) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  double *arg2 = (double *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_AddRotamer. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_AddRotamer. Expected SWIGTYPE_p_double"); }  } 
  (arg1)->AddRotamer(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_AddRotamer__SWIG_1) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  int *arg2 = (int *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_AddRotamer. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_AddRotamer. Expected SWIGTYPE_p_int"); }  } 
  (arg1)->AddRotamer(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_AddRotamer__SWIG_2) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  std::vector< int > arg2 ; std::vector< int > *tmp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_AddRotamer. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_AddRotamer. Expected SWIGTYPE_p_std__vectorT_int_t"); }
     arg2 = *tmp2; }  (arg1)->AddRotamer(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_AddRotamer__SWIG_3) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_AddRotamer. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_unsigned_char, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_AddRotamer. Expected SWIGTYPE_p_unsigned_char"); }  } 
  (arg1)->AddRotamer(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_AddRotamer) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_double, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBRotamerList_AddRotamer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; {
      { void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_OBRotamerList_AddRotamer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      { void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_int_t, 0) >= 0); } } 
    if (!_v) goto check_3; _wrap_OBRotamerList_AddRotamer__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3:
  if (argc == 2) { _wrap_OBRotamerList_AddRotamer__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotamerList_AddRotamer'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_AddRotamers) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_AddRotamers. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_unsigned_char, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_AddRotamers. Expected SWIGTYPE_p_unsigned_char"); }  } 
   convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; (arg1)->AddRotamers(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_GetReferenceArray) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_GetReferenceArray. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_unsigned_char, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_GetReferenceArray. Expected SWIGTYPE_p_unsigned_char"); }
     }  ((OpenBabel::OBRotamerList const *)arg1)->GetReferenceArray(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_BeginRotamer) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< unsigned char * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_BeginRotamer. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->BeginRotamer(); {
    std::vector< unsigned char * >::iterator * resultobj = new std::vector< unsigned char * >::iterator((const std::vector< unsigned char * >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_char_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_EndRotamer) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< unsigned char * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_EndRotamer. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (arg1)->EndRotamer(); {
    std::vector< unsigned char * >::iterator * resultobj = new std::vector< unsigned char * >::iterator((const std::vector< unsigned char * >::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_char_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_CreateConformerList) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; zval **args[2]; SwigValueWrapper< std::vector< double * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_CreateConformerList. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_CreateConformerList. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (arg1)->CreateConformerList(*arg2); {
    std::vector< double * > * resultobj = new std::vector< double * >((const std::vector< double * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_p_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_ExpandConformerList) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ; std::vector< double * > *arg3 = 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_ExpandConformerList. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_ExpandConformerList. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_std__vectorT_double_p_t, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRotamerList_ExpandConformerList. Expected SWIGTYPE_p_std__vectorT_double_p_t"); }
     }  (arg1)->ExpandConformerList(*arg2,*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_SetCurrentCoordinates) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; std::vector< int > arg3 ;
  std::vector< int > *tmp3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_SetCurrentCoordinates. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_SetCurrentCoordinates. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBRotamerList_SetCurrentCoordinates. Expected SWIGTYPE_p_std__vectorT_int_t"); }
     arg3 = *tmp3; }  result = (bool)(arg1)->SetCurrentCoordinates(*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_SetBaseCoordinateSets__SWIG_0) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_SetBaseCoordinateSets. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_SetBaseCoordinateSets. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (arg1)->SetBaseCoordinateSets(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_SetBaseCoordinateSets__SWIG_1) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; SwigValueWrapper< std::vector< double * > > arg2 ;
  unsigned int arg3 ; std::vector< double * > *tmp2 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_SetBaseCoordinateSets. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_double_p_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBRotamerList_SetBaseCoordinateSets. Expected SWIGTYPE_p_std__vectorT_double_p_t"); }
     arg2 = *tmp2; }   convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ;
  (arg1)->SetBaseCoordinateSets(arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_SetBaseCoordinateSets) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBRotamerList_SetBaseCoordinateSets__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBRotamerList_SetBaseCoordinateSets__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBRotamerList_SetBaseCoordinateSets'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_NumBaseCoordinateSets) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_NumBaseCoordinateSets. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBRotamerList const *)arg1)->NumBaseCoordinateSets(); { ZVAL_LONG(return_value,result); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_GetBaseCoordinateSet) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned int arg2 ; zval **args[2]; double *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_GetBaseCoordinateSet. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ;
  result = (double *)((OpenBabel::OBRotamerList const *)arg1)->GetBaseCoordinateSet(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBRotamerList_NumAtoms) { OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBRotamerList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBRotamerList_NumAtoms. Expected SWIGTYPE_p_OpenBabel__OBRotamerList"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned int)((OpenBabel::OBRotamerList const *)arg1)->NumAtoms(); { ZVAL_LONG(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSpectrophore__SWIG_0) { OpenBabel::OBSpectrophore *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBSpectrophore *)new OpenBabel::OBSpectrophore();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSpectrophore, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSpectrophore__SWIG_1) { OpenBabel::OBSpectrophore *arg1 = 0 ; zval **args[1];
  OpenBabel::OBSpectrophore *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBSpectrophore. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  result = (OpenBabel::OBSpectrophore *)new OpenBabel::OBSpectrophore((OpenBabel::OBSpectrophore const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBSpectrophore, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBSpectrophore) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBSpectrophore__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_new_OBSpectrophore__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBSpectrophore'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBSpectrophore(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBSpectrophore *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBSpectrophore TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBSpectrophore resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetResolution__SWIG_0) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_SetResolution. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (arg1)->SetResolution(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetResolution__SWIG_1) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_SetResolution. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetResolution(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetResolution) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBSpectrophore_SetResolution__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBSpectrophore_SetResolution__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSpectrophore_SetResolution'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetAccuracy__SWIG_0) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; OpenBabel::OBSpectrophore::AccuracyOption arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_SetAccuracy. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBSpectrophore::AccuracyOption) Z_LVAL_PP(args[1]); ; (arg1)->SetAccuracy(arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetAccuracy__SWIG_1) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_SetAccuracy. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetAccuracy(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetAccuracy) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBSpectrophore_SetAccuracy__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBSpectrophore_SetAccuracy__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSpectrophore_SetAccuracy'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetStereo__SWIG_0) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; OpenBabel::OBSpectrophore::StereoOption arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_SetStereo. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBSpectrophore::StereoOption) Z_LVAL_PP(args[1]); ; (arg1)->SetStereo(arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetStereo__SWIG_1) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_SetStereo. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetStereo(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetStereo) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBSpectrophore_SetStereo__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBSpectrophore_SetStereo__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSpectrophore_SetStereo'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetNormalization__SWIG_0) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; OpenBabel::OBSpectrophore::NormalizationOption arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_SetNormalization. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::OBSpectrophore::NormalizationOption) Z_LVAL_PP(args[1]); ; (arg1)->SetNormalization(arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetNormalization__SWIG_1) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_SetNormalization. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (arg1)->SetNormalization(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_SetNormalization) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBSpectrophore_SetNormalization__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBSpectrophore_SetNormalization__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBSpectrophore_SetNormalization'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_GetAccuracy) { OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  zval **args[1]; OpenBabel::OBSpectrophore::AccuracyOption result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_GetAccuracy. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBSpectrophore::AccuracyOption)((OpenBabel::OBSpectrophore const *)arg1)->GetAccuracy(); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_GetResolution) { OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_GetResolution. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)((OpenBabel::OBSpectrophore const *)arg1)->GetResolution(); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_GetStereo) { OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  zval **args[1]; OpenBabel::OBSpectrophore::StereoOption result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_GetStereo. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBSpectrophore::StereoOption)((OpenBabel::OBSpectrophore const *)arg1)->GetStereo(); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_GetNormalization) { OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  zval **args[1]; OpenBabel::OBSpectrophore::NormalizationOption result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_GetNormalization. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBSpectrophore::NormalizationOption)((OpenBabel::OBSpectrophore const *)arg1)->GetNormalization(); {
    ZVAL_LONG(return_value, (long)result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBSpectrophore_GetSpectrophore) { OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; std::vector< double > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBSpectrophore, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBSpectrophore_GetSpectrophore. Expected SWIGTYPE_p_OpenBabel__OBSpectrophore"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBSpectrophore_GetSpectrophore. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  result = (arg1)->GetSpectrophore(arg2); {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomIter__SWIG_0) { OpenBabel::OBMolAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAtomIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomIter__SWIG_2) { OpenBabel::OBMolAtomIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAtomIter. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter((OpenBabel::OBMolAtomIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolAtomIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolAtomIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolAtomIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolAtomIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolAtomIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolAtomIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolAtomIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolAtomIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter___deref__) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter___ref__) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBMolAtomIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_Visit_set) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_Visit_get) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((*arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_Duplicate) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   (*arg1)->Duplicate(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetIdx) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetId) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetId. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (*arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetHyb) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetHyb. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetHyb(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetAtomicNum) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetAtomicNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetIsotope) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetIsotope. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIsotope(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetImplicitValence) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetImplicitValence(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IncrementImplicitValence) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IncrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->IncrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DecrementImplicitValence) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DecrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DecrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetFormalCharge) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetFormalCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetSpinMultiplicity) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  short arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]); ; (*arg1)->SetSpinMultiplicity(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetType__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetType((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetType__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (*arg1)->SetType((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBMolAtomIter_SetType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBMolAtomIter_SetType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_SetType'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetPartialCharge) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (*arg1)->SetPartialCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetVector__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetVector__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; zval **args[4]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (*arg1)->SetVector(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetVector__SWIG_2) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetVector(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetVector) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomIter_SetVector__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomIter_SetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBMolAtomIter_SetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_SetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetCoordPtr) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double **arg2 = (double **) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_SetCoordPtr. Expected SWIGTYPE_p_p_double"); }  } 
  (*arg1)->SetCoordPtr(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetResidue) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->SetResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetParent) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetAromatic) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_UnsetAromatic) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetClockwiseStereo) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetAntiClockwiseStereo) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetAntiClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAntiClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetPositiveStereo) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetPositiveStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetNegativeStereo) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetNegativeStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_UnsetStereo) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_UnsetStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetStereo(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetInRing) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetChiral) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetChiral. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetChiral(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ClearCoordPtr) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_ClearCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearCoordPtr(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetFormalCharge) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetFormalCharge(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetAtomicNum) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetAtomicNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetIsotope) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned short result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetIsotope. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned short)(*arg1)->GetIsotope(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetSpinMultiplicity) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetSpinMultiplicity(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetAtomicMass) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetAtomicMass. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetAtomicMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetExactMass) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetExactMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetIdx) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetIndex) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetIndex. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIndex(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetId) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetId. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)(*arg1)->GetId(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetCoordinateIdx) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetCoordinateIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCoordinateIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetCIdx) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetCIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetValence) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetHyb) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetHyb. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHyb(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetImplicitValence) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetImplicitValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetHvyValence) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetHvyValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHvyValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetHeteroValence) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetHeteroValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHeteroValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetType) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetX) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetX. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetX(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetY) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetY. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetY(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetZ) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetZ. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetZ(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_x) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_x. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->x(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_y) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_y. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->y(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_z) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_z. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }  }
   if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->z(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetCoordinate) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetCoordinate. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(*arg1)->GetCoordinate();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetVector__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetVector__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; OpenBabel::vector3 *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetVector) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomIter_GetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolAtomIter_GetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_GetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetPartialCharge) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetPartialCharge(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetResidue__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetResidue__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ; zval **args[2]; OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetResidue) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomIter_GetResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomIter_GetResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_GetResidue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetParent) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetNewBondVector) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; double arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetNextAtom) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetNextAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_BeginBonds) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_BeginBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_EndBonds) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_EndBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_BeginBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_BeginBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_BeginBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_NextBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_NextBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_NextBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_BeginNbrAtom) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_BeginNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_BeginNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_NextNbrAtom) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_NextNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_NextNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetDistance__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetDistance__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetDistance__SWIG_2) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetDistance) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolAtomIter_GetDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; {
      { void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMolAtomIter_GetDistance__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { _wrap_OBMolAtomIter_GetDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_GetDistance'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetAngle__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ; int arg3 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetAngle__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetAngle) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBMolAtomIter_GetAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 3) { _wrap_OBMolAtomIter_GetAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_GetAngle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_NewResidue) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_NewResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->NewResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_AddResidue) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->AddResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DeleteResidue) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DeleteResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_AddBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  } 
  (*arg1)->AddBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_InsertBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_InsertBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (*arg1)->InsertBond(*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DeleteBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  result = (bool)(*arg1)->DeleteBond(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ClearBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_ClearBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearBond(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HtoMethyl) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HtoMethyl. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HtoMethyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetHybAndGeom) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetHybAndGeom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->SetHybAndGeom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ForceNoH) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_ForceNoH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceNoH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasNoHForced) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasNoHForced. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNoHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ForceImplH) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_ForceImplH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceImplH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasImplHForced) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasImplHForced. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasImplHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_CountFreeOxygens) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_CountFreeOxygens. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeOxygens(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_CountFreeSulfurs) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_CountFreeSulfurs. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeSulfurs(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ImplicitHydrogenCount) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_ImplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ImplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ExplicitHydrogenCount__SWIG_0) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool arg2 ; zval **args[2]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ExplicitHydrogenCount__SWIG_1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ExplicitHydrogenCount) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomIter_ExplicitHydrogenCount__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomIter_ExplicitHydrogenCount__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_ExplicitHydrogenCount'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_MemberOfRingCount) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_MemberOfRingCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_MemberOfRingSize) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_MemberOfRingSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_CountRingBonds) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_CountRingBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountRingBonds(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SmallestBondAngle) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SmallestBondAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->SmallestBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_AverageBondAngle) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_AverageBondAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->AverageBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_BOSum) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_BOSum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->BOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_KBOSum) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_KBOSum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->KBOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_LewisAcidBaseCounts) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::pair< int,int > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_LewisAcidBaseCounts. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->LewisAcidBaseCounts(); {
    std::pair< int,int > * resultobj = new std::pair< int,int >((const std::pair< int,int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__pairT_int_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasResidue) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasResidue(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHetAtom) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHetAtom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHydrogen__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHydrogen__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHydrogen) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomIter_IsHydrogen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolAtomIter_IsHydrogen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_IsHydrogen'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsCarbon) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsCarbon. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarbon(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsNitrogen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsNitrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsOxygen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsSulfur) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsSulfur. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfur(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsPhosphorus) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsPhosphorus. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphorus(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsAromatic) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsInRing) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsInRingSize) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsInRingSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsInRingSize(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHeteroatom) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsHeteroatom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHeteroatom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsNotCorH) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsNotCorH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNotCorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsConnected) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsConnected(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsOneThree) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneThree(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsOneFour) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   result = (bool)(*arg1)->IsOneFour(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsCarboxylOxygen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsCarboxylOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarboxylOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsPhosphateOxygen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsPhosphateOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsSulfateOxygen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsSulfateOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsNitroOxygen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsNitroOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitroOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsAmideNitrogen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsAmideNitrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAmideNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsPolarHydrogen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsNonPolarHydrogen) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsNonPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNonPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsAromaticNOxide) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsAromaticNOxide. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromaticNOxide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsChiral) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsChiral. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsChiral(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsAxial) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsAxial. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAxial(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsClockwise) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsClockwise. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsAntiClockwise) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsAntiClockwise. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAntiClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsPositiveStereo) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPositiveStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsNegativeStereo) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNegativeStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasChiralitySpecified) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasChiralitySpecified. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralitySpecified(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasChiralVolume) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasChiralVolume. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralVolume(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHbondAcceptor) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsHbondAcceptor. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHbondAcceptorSimple) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsHbondAcceptorSimple. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptorSimple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHbondDonor) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsHbondDonor. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsHbondDonorH) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsHbondDonorH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_IsMetal) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_IsMetal. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsMetal(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasAlphaBetaUnsat__SWIG_0) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasAlphaBetaUnsat__SWIG_1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAlphaBetaUnsat(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasAlphaBetaUnsat) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomIter_HasAlphaBetaUnsat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomIter_HasAlphaBetaUnsat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_HasAlphaBetaUnsat'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasBondOfOrder) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasBondOfOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasBondOfOrder(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_CountBondsOfOrder) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_CountBondsOfOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (int)(*arg1)->CountBondsOfOrder(arg2); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HighestBondOrder) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HighestBondOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->HighestBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasNonSingleBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasNonSingleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNonSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasSingleBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasSingleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasDoubleBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasDoubleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasDoubleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasAromaticBond) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasAromaticBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAromaticBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_MatchesSMARTS) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_MatchesSMARTS. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_Clear) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DoTransformations) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_ClassDescription) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetTitle__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ; zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetTitle__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_SetTitle) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasData__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasData__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasData__SWIG_2) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBMolAtomIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBMolAtomIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBMolAtomIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DeleteData__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DeleteData__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DeleteData__SWIG_2) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DeleteData__SWIG_3) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolAtomIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; {
      { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMolAtomIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolAtomIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBMolAtomIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_CloneData) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_DataSize) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetData__SWIG_0) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetData__SWIG_1) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetData__SWIG_2) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetData__SWIG_3) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetData__SWIG_4) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::DataOrigin arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBMolAtomIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolAtomIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBMolAtomIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBMolAtomIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_GetAllData) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_BeginData) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomIter_EndData) { OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomDFSIter__SWIG_0) { OpenBabel::OBMolAtomDFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomDFSIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  zval **args[2]; OpenBabel::OBMolAtomDFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAtomDFSIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomDFSIter__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolAtomDFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAtomDFSIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomDFSIter__SWIG_3) { OpenBabel::OBMolAtomDFSIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolAtomDFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAtomDFSIter. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter((OpenBabel::OBMolAtomDFSIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomDFSIter) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolAtomDFSIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolAtomDFSIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolAtomDFSIter__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBMolAtomDFSIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolAtomDFSIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolAtomDFSIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolAtomDFSIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolAtomDFSIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter___deref__) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter___ref__) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_next) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_next. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(arg1)->next();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_Visit_set) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_Visit_get) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((*arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_Duplicate) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  (*arg1)->Duplicate(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetIdx) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetId) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetId. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (*arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetHyb) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetHyb. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetHyb(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetAtomicNum) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetAtomicNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetIsotope) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetIsotope. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIsotope(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetImplicitValence) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetImplicitValence(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IncrementImplicitValence) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IncrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->IncrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DecrementImplicitValence) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DecrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DecrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetFormalCharge) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetFormalCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetSpinMultiplicity) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; short arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]); ; (*arg1)->SetSpinMultiplicity(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetType__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetType((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetType__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (*arg1)->SetType((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBMolAtomDFSIter_SetType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBMolAtomDFSIter_SetType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_SetType'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetPartialCharge) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (*arg1)->SetPartialCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetVector__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_SetVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetVector__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (*arg1)->SetVector(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetVector__SWIG_2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetVector(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetVector) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomDFSIter_SetVector__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomDFSIter_SetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBMolAtomDFSIter_SetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_SetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetCoordPtr) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double **arg2 = (double **) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_SetCoordPtr. Expected SWIGTYPE_p_p_double"); }  } 
  (*arg1)->SetCoordPtr(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetResidue) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->SetResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetParent) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetAromatic) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_UnsetAromatic) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetClockwiseStereo) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetAntiClockwiseStereo) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetAntiClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAntiClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetPositiveStereo) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetPositiveStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetNegativeStereo) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetNegativeStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_UnsetStereo) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_UnsetStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetStereo(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetInRing) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetChiral) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetChiral. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetChiral(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ClearCoordPtr) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_ClearCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearCoordPtr(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetFormalCharge) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetFormalCharge(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetAtomicNum) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetAtomicNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetIsotope) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned short result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetIsotope. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned short)(*arg1)->GetIsotope(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetSpinMultiplicity) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetSpinMultiplicity(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetAtomicMass) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetAtomicMass. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetAtomicMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetExactMass) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetExactMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetIdx) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetIndex) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetIndex. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIndex(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetId) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetId. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)(*arg1)->GetId(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetCoordinateIdx) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetCoordinateIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCoordinateIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetCIdx) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetCIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetValence) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetHyb) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetHyb. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHyb(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetImplicitValence) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetImplicitValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetHvyValence) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetHvyValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHvyValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetHeteroValence) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetHeteroValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHeteroValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetType) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetX) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetX. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetX(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetY) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetY. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetY(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetZ) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetZ. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetZ(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_x) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_x. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->x(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_y) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_y. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->y(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_z) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_z. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->z(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetCoordinate) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; double *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetCoordinate. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(*arg1)->GetCoordinate();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetVector__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetVector__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetVector) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomDFSIter_GetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolAtomDFSIter_GetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_GetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetPartialCharge) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetPartialCharge(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetResidue__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; OpenBabel::OBResidue *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetResidue__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; zval **args[2];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetResidue) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomDFSIter_GetResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomDFSIter_GetResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_GetResidue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetParent) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetNewBondVector) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; double arg3 ;
  zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetBond) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetNextAtom) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetNextAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_BeginBonds) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_BeginBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_EndBonds) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_EndBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_BeginBond) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_BeginBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_BeginBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_NextBond) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_NextBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_NextBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_BeginNbrAtom) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_BeginNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_BeginNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_NextNbrAtom) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_NextNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_NextNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetDistance__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetDistance__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetDistance__SWIG_2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetDistance) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolAtomDFSIter_GetDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    int _v = 0; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMolAtomDFSIter_GetDistance__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { _wrap_OBMolAtomDFSIter_GetDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_GetDistance'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetAngle__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; int arg3 ; zval **args[3]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetAngle__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomDFSIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetAngle) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBMolAtomDFSIter_GetAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 3) { _wrap_OBMolAtomDFSIter_GetAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_GetAngle'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_NewResidue) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_NewResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->NewResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_AddResidue) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->AddResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DeleteResidue) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DeleteResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_AddBond) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (*arg1)->AddBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_InsertBond) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_InsertBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomDFSIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (*arg1)->InsertBond(*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DeleteBond) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  result = (bool)(*arg1)->DeleteBond(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ClearBond) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_ClearBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearBond(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HtoMethyl) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HtoMethyl. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HtoMethyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetHybAndGeom) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetHybAndGeom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->SetHybAndGeom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ForceNoH) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_ForceNoH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceNoH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasNoHForced) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasNoHForced. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNoHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ForceImplH) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_ForceImplH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceImplH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasImplHForced) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasImplHForced. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasImplHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_CountFreeOxygens) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_CountFreeOxygens. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeOxygens(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_CountFreeSulfurs) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_CountFreeSulfurs. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeSulfurs(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ImplicitHydrogenCount) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_ImplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ImplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ExplicitHydrogenCount__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; zval **args[2]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ExplicitHydrogenCount__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ExplicitHydrogenCount) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomDFSIter_ExplicitHydrogenCount__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomDFSIter_ExplicitHydrogenCount__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_ExplicitHydrogenCount'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_MemberOfRingCount) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_MemberOfRingCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_MemberOfRingSize) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_MemberOfRingSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_CountRingBonds) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_CountRingBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountRingBonds(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SmallestBondAngle) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SmallestBondAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->SmallestBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_AverageBondAngle) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_AverageBondAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->AverageBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_BOSum) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_BOSum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->BOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_KBOSum) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_KBOSum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->KBOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_LewisAcidBaseCounts) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1];
  SwigValueWrapper< std::pair< int,int > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_LewisAcidBaseCounts. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->LewisAcidBaseCounts(); {
    std::pair< int,int > * resultobj = new std::pair< int,int >((const std::pair< int,int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__pairT_int_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasResidue) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasResidue(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHetAtom) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHetAtom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHydrogen__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHydrogen__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHydrogen) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomDFSIter_IsHydrogen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolAtomDFSIter_IsHydrogen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_IsHydrogen'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsCarbon) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsCarbon. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarbon(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsNitrogen) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsNitrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsOxygen) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsSulfur) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsSulfur. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfur(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsPhosphorus) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsPhosphorus. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphorus(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsAromatic) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsInRing) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsInRingSize) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsInRingSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsInRingSize(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHeteroatom) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsHeteroatom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHeteroatom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsNotCorH) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsNotCorH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNotCorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsConnected) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsConnected(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsOneThree) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneThree(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsOneFour) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneFour(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsCarboxylOxygen) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsCarboxylOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarboxylOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsPhosphateOxygen) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsPhosphateOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsSulfateOxygen) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsSulfateOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsNitroOxygen) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsNitroOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitroOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsAmideNitrogen) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsAmideNitrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAmideNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsPolarHydrogen) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsNonPolarHydrogen) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsNonPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNonPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsAromaticNOxide) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsAromaticNOxide. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromaticNOxide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsChiral) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsChiral. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsChiral(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsAxial) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsAxial. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAxial(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsClockwise) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsClockwise. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsAntiClockwise) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsAntiClockwise. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAntiClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsPositiveStereo) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPositiveStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsNegativeStereo) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNegativeStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasChiralitySpecified) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasChiralitySpecified. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralitySpecified(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasChiralVolume) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasChiralVolume. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralVolume(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHbondAcceptor) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsHbondAcceptor. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHbondAcceptorSimple) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsHbondAcceptorSimple. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptorSimple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHbondDonor) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsHbondDonor. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsHbondDonorH) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsHbondDonorH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_IsMetal) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_IsMetal. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsMetal(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasAlphaBetaUnsat__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasAlphaBetaUnsat__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAlphaBetaUnsat(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasAlphaBetaUnsat) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomDFSIter_HasAlphaBetaUnsat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomDFSIter_HasAlphaBetaUnsat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_HasAlphaBetaUnsat'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasBondOfOrder) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasBondOfOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasBondOfOrder(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_CountBondsOfOrder) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_CountBondsOfOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (int)(*arg1)->CountBondsOfOrder(arg2); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HighestBondOrder) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HighestBondOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->HighestBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasNonSingleBond) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasNonSingleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNonSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasSingleBond) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasSingleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasDoubleBond) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasDoubleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasDoubleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasAromaticBond) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasAromaticBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAromaticBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_MatchesSMARTS) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_MatchesSMARTS. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_Clear) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DoTransformations) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomDFSIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_ClassDescription) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetTitle__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; zval **args[2]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetTitle__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomDFSIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomDFSIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_SetTitle) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasData__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasData__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasData__SWIG_2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBMolAtomDFSIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBMolAtomDFSIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBMolAtomDFSIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DeleteData__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DeleteData__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DeleteData__SWIG_2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DeleteData__SWIG_3) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolAtomDFSIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0;
    { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMolAtomDFSIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolAtomDFSIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBMolAtomDFSIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_CloneData) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomDFSIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_DataSize) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetData__SWIG_0) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetData__SWIG_1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetData__SWIG_2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetData__SWIG_3) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetData__SWIG_4) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::DataOrigin arg2 ; zval **args[2];
  std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomDFSIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBMolAtomDFSIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolAtomDFSIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBMolAtomDFSIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBMolAtomDFSIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomDFSIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_GetAllData) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_BeginData) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomDFSIter_EndData) { OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomDFSIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomBFSIter__SWIG_0) { OpenBabel::OBMolAtomBFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomBFSIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  zval **args[2]; OpenBabel::OBMolAtomBFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAtomBFSIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomBFSIter__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolAtomBFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAtomBFSIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomBFSIter__SWIG_3) { OpenBabel::OBMolAtomBFSIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolAtomBFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAtomBFSIter. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter((OpenBabel::OBMolAtomBFSIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAtomBFSIter) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolAtomBFSIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolAtomBFSIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolAtomBFSIter__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBMolAtomBFSIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolAtomBFSIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolAtomBFSIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolAtomBFSIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolAtomBFSIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter___deref__) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter___ref__) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_CurrentDepth) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_CurrentDepth. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBMolAtomBFSIter const *)arg1)->CurrentDepth(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_Visit_set) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_Visit_get) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((*arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_Duplicate) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  (*arg1)->Duplicate(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetIdx) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetId) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetId. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (*arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetHyb) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetHyb. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetHyb(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetAtomicNum) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetAtomicNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetIsotope) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetIsotope. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIsotope(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetImplicitValence) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetImplicitValence(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IncrementImplicitValence) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IncrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->IncrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DecrementImplicitValence) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DecrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DecrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetFormalCharge) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetFormalCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetSpinMultiplicity) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; short arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]); ; (*arg1)->SetSpinMultiplicity(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetType__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetType((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetType__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (*arg1)->SetType((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBMolAtomBFSIter_SetType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBMolAtomBFSIter_SetType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_SetType'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetPartialCharge) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (*arg1)->SetPartialCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetVector__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_SetVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetVector__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (*arg1)->SetVector(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetVector__SWIG_2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetVector(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetVector) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomBFSIter_SetVector__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomBFSIter_SetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBMolAtomBFSIter_SetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_SetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetCoordPtr) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double **arg2 = (double **) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_SetCoordPtr. Expected SWIGTYPE_p_p_double"); }  } 
  (*arg1)->SetCoordPtr(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetResidue) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->SetResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetParent) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetAromatic) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_UnsetAromatic) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetClockwiseStereo) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetAntiClockwiseStereo) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetAntiClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAntiClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetPositiveStereo) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetPositiveStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetNegativeStereo) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetNegativeStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_UnsetStereo) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_UnsetStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetStereo(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetInRing) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetChiral) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetChiral. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetChiral(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ClearCoordPtr) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_ClearCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearCoordPtr(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetFormalCharge) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetFormalCharge(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetAtomicNum) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetAtomicNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetIsotope) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned short result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetIsotope. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned short)(*arg1)->GetIsotope(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetSpinMultiplicity) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetSpinMultiplicity(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetAtomicMass) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetAtomicMass. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetAtomicMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetExactMass) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetExactMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetIdx) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetIndex) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetIndex. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIndex(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetId) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetId. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)(*arg1)->GetId(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetCoordinateIdx) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetCoordinateIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCoordinateIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetCIdx) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetCIdx. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetValence) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetHyb) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetHyb. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHyb(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetImplicitValence) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetImplicitValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetHvyValence) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetHvyValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHvyValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetHeteroValence) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetHeteroValence. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHeteroValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetType) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetType. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetX) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetX. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetX(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetY) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetY. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetY(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetZ) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetZ. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetZ(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_x) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_x. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->x(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_y) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_y. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->y(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_z) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_z. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->z(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetCoordinate) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; double *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetCoordinate. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(*arg1)->GetCoordinate();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetVector__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetVector__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetVector) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomBFSIter_GetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolAtomBFSIter_GetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_GetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetPartialCharge) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetPartialCharge(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetResidue__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; OpenBabel::OBResidue *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetResidue__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; zval **args[2];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetResidue) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomBFSIter_GetResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomBFSIter_GetResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_GetResidue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetParent) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetNewBondVector) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; double arg3 ;
  zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetBond) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetNextAtom) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetNextAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_BeginBonds) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_BeginBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_EndBonds) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_EndBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_BeginBond) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_BeginBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_BeginBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_NextBond) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_NextBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_NextBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_BeginNbrAtom) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_BeginNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_BeginNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_NextNbrAtom) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2];
  OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_NextNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_NextNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetDistance__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetDistance__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetDistance__SWIG_2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetDistance) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolAtomBFSIter_GetDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    int _v = 0; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMolAtomBFSIter_GetDistance__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { _wrap_OBMolAtomBFSIter_GetDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_GetDistance'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetAngle__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; int arg3 ; zval **args[3]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetAngle__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomBFSIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetAngle) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBMolAtomBFSIter_GetAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 3) { _wrap_OBMolAtomBFSIter_GetAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_GetAngle'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_NewResidue) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_NewResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->NewResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_AddResidue) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->AddResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DeleteResidue) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DeleteResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_AddBond) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (*arg1)->AddBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_InsertBond) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_InsertBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomBFSIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (*arg1)->InsertBond(*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DeleteBond) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  result = (bool)(*arg1)->DeleteBond(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ClearBond) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_ClearBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearBond(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HtoMethyl) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HtoMethyl. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HtoMethyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetHybAndGeom) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetHybAndGeom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->SetHybAndGeom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ForceNoH) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_ForceNoH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceNoH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasNoHForced) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasNoHForced. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNoHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ForceImplH) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_ForceImplH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceImplH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasImplHForced) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasImplHForced. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasImplHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_CountFreeOxygens) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_CountFreeOxygens. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeOxygens(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_CountFreeSulfurs) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_CountFreeSulfurs. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeSulfurs(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ImplicitHydrogenCount) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_ImplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ImplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ExplicitHydrogenCount__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; zval **args[2]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ExplicitHydrogenCount__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ExplicitHydrogenCount) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomBFSIter_ExplicitHydrogenCount__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomBFSIter_ExplicitHydrogenCount__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_ExplicitHydrogenCount'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_MemberOfRingCount) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_MemberOfRingCount. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_MemberOfRingSize) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_MemberOfRingSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_CountRingBonds) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_CountRingBonds. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountRingBonds(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SmallestBondAngle) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SmallestBondAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->SmallestBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_AverageBondAngle) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_AverageBondAngle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->AverageBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_BOSum) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_BOSum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->BOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_KBOSum) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_KBOSum. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->KBOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_LewisAcidBaseCounts) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1];
  SwigValueWrapper< std::pair< int,int > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_LewisAcidBaseCounts. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->LewisAcidBaseCounts(); {
    std::pair< int,int > * resultobj = new std::pair< int,int >((const std::pair< int,int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__pairT_int_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasResidue) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasResidue. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasResidue(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHetAtom) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHetAtom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHydrogen__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHydrogen__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHydrogen) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomBFSIter_IsHydrogen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolAtomBFSIter_IsHydrogen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_IsHydrogen'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsCarbon) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsCarbon. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarbon(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsNitrogen) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsNitrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsOxygen) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsSulfur) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsSulfur. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfur(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsPhosphorus) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsPhosphorus. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphorus(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsAromatic) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsInRing) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsInRingSize) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsInRingSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsInRingSize(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHeteroatom) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsHeteroatom. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHeteroatom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsNotCorH) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsNotCorH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNotCorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsConnected) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsConnected(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsOneThree) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneThree(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsOneFour) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneFour(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsCarboxylOxygen) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsCarboxylOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarboxylOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsPhosphateOxygen) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsPhosphateOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsSulfateOxygen) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsSulfateOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsNitroOxygen) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsNitroOxygen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitroOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsAmideNitrogen) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsAmideNitrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAmideNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsPolarHydrogen) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsNonPolarHydrogen) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsNonPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNonPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsAromaticNOxide) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsAromaticNOxide. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromaticNOxide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsChiral) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsChiral. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsChiral(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsAxial) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsAxial. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAxial(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsClockwise) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsClockwise. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsAntiClockwise) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsAntiClockwise. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAntiClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsPositiveStereo) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPositiveStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsNegativeStereo) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNegativeStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasChiralitySpecified) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasChiralitySpecified. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralitySpecified(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasChiralVolume) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasChiralVolume. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralVolume(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHbondAcceptor) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsHbondAcceptor. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHbondAcceptorSimple) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsHbondAcceptorSimple. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptorSimple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHbondDonor) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsHbondDonor. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsHbondDonorH) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsHbondDonorH. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_IsMetal) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_IsMetal. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsMetal(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasAlphaBetaUnsat__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasAlphaBetaUnsat__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAlphaBetaUnsat(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasAlphaBetaUnsat) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomBFSIter_HasAlphaBetaUnsat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomBFSIter_HasAlphaBetaUnsat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_HasAlphaBetaUnsat'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasBondOfOrder) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasBondOfOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasBondOfOrder(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_CountBondsOfOrder) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_CountBondsOfOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (int)(*arg1)->CountBondsOfOrder(arg2); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HighestBondOrder) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HighestBondOrder. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->HighestBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasNonSingleBond) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasNonSingleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNonSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasSingleBond) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasSingleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasDoubleBond) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasDoubleBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasDoubleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasAromaticBond) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasAromaticBond. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAromaticBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_MatchesSMARTS) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_MatchesSMARTS. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_Clear) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DoTransformations) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolAtomBFSIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_ClassDescription) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetTitle__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; zval **args[2]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetTitle__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomBFSIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolAtomBFSIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_SetTitle) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasData__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasData__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasData__SWIG_2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBMolAtomBFSIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBMolAtomBFSIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBMolAtomBFSIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DeleteData__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DeleteData__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DeleteData__SWIG_2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DeleteData__SWIG_3) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolAtomBFSIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0;
    { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMolAtomBFSIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolAtomBFSIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBMolAtomBFSIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_CloneData) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolAtomBFSIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_DataSize) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetData__SWIG_0) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetData__SWIG_1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetData__SWIG_2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetData__SWIG_3) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetData__SWIG_4) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::DataOrigin arg2 ; zval **args[2];
  std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolAtomBFSIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBMolAtomBFSIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolAtomBFSIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBMolAtomBFSIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBMolAtomBFSIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolAtomBFSIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_GetAllData) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_BeginData) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAtomBFSIter_EndData) { OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAtomBFSIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondBFSIter__SWIG_0) { OpenBabel::OBMolBondBFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolBondBFSIter *)new OpenBabel::OBMolBondBFSIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondBFSIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ;
  zval **args[2]; OpenBabel::OBMolBondBFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolBondBFSIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }  
  convert_to_long_ex(args[1]); arg2 = (int) Z_LVAL_PP(args[1]); ;
  result = (OpenBabel::OBMolBondBFSIter *)new OpenBabel::OBMolBondBFSIter(arg1,arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondBFSIter__SWIG_2) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolBondBFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolBondBFSIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolBondBFSIter *)new OpenBabel::OBMolBondBFSIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondBFSIter__SWIG_3) { OpenBabel::OBMolBondBFSIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolBondBFSIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolBondBFSIter. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  result = (OpenBabel::OBMolBondBFSIter *)new OpenBabel::OBMolBondBFSIter((OpenBabel::OBMolBondBFSIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondBFSIter) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolBondBFSIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolBondBFSIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolBondBFSIter__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_new_OBMolBondBFSIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolBondBFSIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolBondBFSIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolBondBFSIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolBondBFSIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolBondBFSIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter___deref__) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBBond *)((OpenBabel::OBMolBondBFSIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter___ref__) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBBond *) &((OpenBabel::OBMolBondBFSIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_CurrentDepth) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_CurrentDepth. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((OpenBabel::OBMolBondBFSIter const *)arg1)->CurrentDepth(); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_Visit_set) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_Visit_get) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((*arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetIdx) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetId) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetId. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (*arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetBO) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetBO. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetBO(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetBondOrder) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetBondOrder. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetBondOrder(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetBegin) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetBegin. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_SetBegin. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  (*arg1)->SetBegin(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetEnd) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetEnd. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_SetEnd. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   (*arg1)->SetEnd(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetParent) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetLength__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; (*arg1)->SetLength(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetLength__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (*arg1)->SetLength(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetLength) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMolBondBFSIter_SetLength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMolBondBFSIter_SetLength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_SetLength'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_Set) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  int arg2 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; int arg5 ;
  int arg6 ; zval **args[6]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_Set. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolBondBFSIter_Set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBMolBondBFSIter_Set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;  convert_to_long_ex(args[5]); arg6 = (int) Z_LVAL_PP(args[5]);
  ; (*arg1)->Set(arg2,arg3,arg4,arg5,arg6); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetKSingle) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetKSingle. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKSingle(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetKDouble) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetKDouble. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKDouble(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetKTriple) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetKTriple. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKTriple(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetAromatic) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetWedge) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetWedge. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetWedge(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetHash) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetWedgeOrHash) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetWedgeOrHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetWedgeOrHash(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetUp) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetUp. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetUp(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetDown) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetDown. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetDown(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetInRing__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (*arg1)->SetInRing(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetInRing__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetInRing) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondBFSIter_SetInRing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolBondBFSIter_SetInRing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_SetInRing'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetClosure) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetClosure. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetClosure(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_UnsetHash) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_UnsetHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_UnsetWedge) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_UnsetWedge. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetWedge(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_UnsetUp) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_UnsetUp. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetUp(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_UnsetDown) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_UnsetDown. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetDown(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_UnsetAromatic) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_UnsetKekule) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_UnsetKekule. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetKekule(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetIdx) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetId) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetId. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)(*arg1)->GetId(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetBO) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetBO. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBO(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetBondOrder) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetBondOrder. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetFlags) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetFlags. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetFlags(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetBeginAtomIdx) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetBeginAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBeginAtomIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetEndAtomIdx) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetEndAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetEndAtomIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetBeginAtom__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetBeginAtom__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetBeginAtom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondBFSIter_GetBeginAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolBondBFSIter_GetBeginAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_GetBeginAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetEndAtom__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetEndAtom__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetEndAtom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondBFSIter_GetEndAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolBondBFSIter_GetEndAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_GetEndAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetNbrAtom) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_GetNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetParent) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetEquibLength) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetEquibLength. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetEquibLength(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetLength) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetLength. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetLength(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetNbrAtomIdx) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetNbrAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_GetNbrAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (unsigned int)(*arg1)->GetNbrAtomIdx(arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_FindSmallestRing) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; OpenBabel::OBRing *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_FindSmallestRing. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBRing *)(*arg1)->FindSmallestRing();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsAromatic) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsInRing) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsRotor__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsRotor. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsRotor(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsRotor__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsRotor. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsRotor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsRotor) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondBFSIter_IsRotor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolBondBFSIter_IsRotor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_IsRotor'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsAmide) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsAmide. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsPrimaryAmide) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsPrimaryAmide. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPrimaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsSecondaryAmide) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsSecondaryAmide. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSecondaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsTertiaryAmide) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsTertiaryAmide. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsTertiaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsEster) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsEster. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsEster(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsCarbonyl) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsCarbonyl. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarbonyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsSingle) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsSingle. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSingle(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsDouble) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsDouble. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDouble(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsTriple) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsTriple. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsTriple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsKSingle) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsKSingle. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKSingle(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsKDouble) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsKDouble. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKDouble(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsKTriple) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsKTriple. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKTriple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsClosure) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsClosure. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsClosure(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsUp) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsUp. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsUp(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsDown) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsDown. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDown(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsWedge) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsWedge. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsWedge(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsHash) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHash(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsWedgeOrHash) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsWedgeOrHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsWedgeOrHash(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsCisOrTrans) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsCisOrTrans. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCisOrTrans(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_IsDoubleBondGeometry) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_IsDoubleBondGeometry. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDoubleBondGeometry(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_Clear) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_DoTransformations) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolBondBFSIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_ClassDescription) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetTitle__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; zval **args[2]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetTitle__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondBFSIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolBondBFSIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_SetTitle) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_HasData__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_HasData__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_HasData__SWIG_2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBMolBondBFSIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBMolBondBFSIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBMolBondBFSIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_DeleteData__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_DeleteData__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_DeleteData__SWIG_2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_DeleteData__SWIG_3) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolBondBFSIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0;
    { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMolBondBFSIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolBondBFSIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBMolBondBFSIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_CloneData) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondBFSIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_DataSize) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetData__SWIG_0) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int arg2 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetData__SWIG_1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetData__SWIG_2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetData__SWIG_3) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetData__SWIG_4) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::DataOrigin arg2 ; zval **args[2];
  std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondBFSIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBMolBondBFSIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolBondBFSIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBMolBondBFSIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBMolBondBFSIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondBFSIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_GetAllData) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_BeginData) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondBFSIter_EndData) { OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondBFSIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBMolBondBFSIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondIter__SWIG_0) { OpenBabel::OBMolBondIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolBondIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolBondIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolBondIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolBondIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondIter__SWIG_2) { OpenBabel::OBMolBondIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolBondIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolBondIter. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter((OpenBabel::OBMolBondIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolBondIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolBondIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolBondIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolBondIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolBondIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolBondIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolBondIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolBondIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolBondIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolBondIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter___deref__) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBBond *)((OpenBabel::OBMolBondIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter___ref__) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBBond *) &((OpenBabel::OBMolBondIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_Visit_set) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_Visit_get) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((*arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetIdx) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetId) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetId. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (*arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetBO) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetBO. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetBO(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetBondOrder) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetBondOrder. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetBondOrder(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetBegin) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetBegin. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_SetBegin. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   (*arg1)->SetBegin(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetEnd) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetEnd. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_SetEnd. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (*arg1)->SetEnd(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetParent) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetLength__SWIG_0) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; double arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
    convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; (*arg1)->SetLength(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetLength__SWIG_1) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (*arg1)->SetLength(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetLength) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBMolBondIter_SetLength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBMolBondIter_SetLength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_SetLength'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_Set) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; int arg5 ; int arg6 ;
  zval **args[6]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_Set. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolBondIter_Set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBMolBondIter_Set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;  convert_to_long_ex(args[5]); arg6 = (int) Z_LVAL_PP(args[5]);
  ; (*arg1)->Set(arg2,arg3,arg4,arg5,arg6); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetKSingle) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetKSingle. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKSingle(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetKDouble) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetKDouble. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKDouble(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetKTriple) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetKTriple. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKTriple(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetAromatic) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetWedge) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetWedge. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetWedge(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetHash) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetWedgeOrHash) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetWedgeOrHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetWedgeOrHash(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetUp) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetUp. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetUp(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetDown) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetDown. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetDown(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetInRing__SWIG_0) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (*arg1)->SetInRing(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetInRing__SWIG_1) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetInRing) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondIter_SetInRing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolBondIter_SetInRing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_SetInRing'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetClosure) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetClosure. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetClosure(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_UnsetHash) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_UnsetHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_UnsetWedge) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_UnsetWedge. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetWedge(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_UnsetUp) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_UnsetUp. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetUp(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_UnsetDown) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_UnsetDown. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetDown(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_UnsetAromatic) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_UnsetKekule) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_UnsetKekule. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetKekule(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetIdx) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetId) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetId. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)(*arg1)->GetId(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetBO) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetBO. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBO(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetBondOrder) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetBondOrder. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetFlags) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetFlags. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetFlags(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetBeginAtomIdx) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetBeginAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBeginAtomIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetEndAtomIdx) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetEndAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetEndAtomIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetBeginAtom__SWIG_0) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetBeginAtom__SWIG_1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetBeginAtom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondIter_GetBeginAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolBondIter_GetBeginAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_GetBeginAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetEndAtom__SWIG_0) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetEndAtom__SWIG_1) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetEndAtom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondIter_GetEndAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBMolBondIter_GetEndAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_GetEndAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetNbrAtom) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_GetNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetParent) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetEquibLength) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetEquibLength. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetEquibLength(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetLength) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetLength. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetLength(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetNbrAtomIdx) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetNbrAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_GetNbrAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (unsigned int)(*arg1)->GetNbrAtomIdx(arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_FindSmallestRing) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBRing *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_FindSmallestRing. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBRing *)(*arg1)->FindSmallestRing();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsAromatic) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsInRing) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsRotor__SWIG_0) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsRotor. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsRotor(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsRotor__SWIG_1) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsRotor. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsRotor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsRotor) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondIter_IsRotor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolBondIter_IsRotor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_IsRotor'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsAmide) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsAmide. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsPrimaryAmide) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsPrimaryAmide. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPrimaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsSecondaryAmide) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsSecondaryAmide. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSecondaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsTertiaryAmide) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsTertiaryAmide. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsTertiaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsEster) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsEster. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsEster(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsCarbonyl) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsCarbonyl. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarbonyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsSingle) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsSingle. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSingle(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsDouble) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsDouble. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDouble(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsTriple) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsTriple. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsTriple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsKSingle) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsKSingle. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKSingle(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsKDouble) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsKDouble. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKDouble(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsKTriple) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsKTriple. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKTriple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsClosure) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsClosure. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsClosure(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsUp) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsUp. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsUp(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsDown) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsDown. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDown(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsWedge) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsWedge. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsWedge(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsHash) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHash(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsWedgeOrHash) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsWedgeOrHash. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsWedgeOrHash(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsCisOrTrans) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsCisOrTrans. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCisOrTrans(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_IsDoubleBondGeometry) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_IsDoubleBondGeometry. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDoubleBondGeometry(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_Clear) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_DoTransformations) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolBondIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_ClassDescription) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetTitle__SWIG_0) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool arg2 ; zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetTitle__SWIG_1) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBMolBondIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_SetTitle) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_HasData__SWIG_0) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_HasData__SWIG_1) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_HasData__SWIG_2) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBMolBondIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBMolBondIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBMolBondIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_DeleteData__SWIG_0) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_DeleteData__SWIG_1) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_DeleteData__SWIG_2) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_DeleteData__SWIG_3) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolBondIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; {
      { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBMolBondIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolBondIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBMolBondIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_CloneData) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolBondIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_DataSize) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetData__SWIG_0) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetData__SWIG_1) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetData__SWIG_2) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetData__SWIG_3) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetData__SWIG_4) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::DataOrigin arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBMolBondIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBMolBondIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBMolBondIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBMolBondIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBMolBondIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolBondIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_GetAllData) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_BeginData) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolBondIter_EndData) { OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolBondIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBMolBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomAtomIter__SWIG_0) { OpenBabel::OBAtomAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomAtomIter__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::OBAtomAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBAtomAtomIter. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomAtomIter__SWIG_2) { OpenBabel::OBAtomAtomIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBAtomAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBAtomAtomIter. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter((OpenBabel::OBAtomAtomIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomAtomIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBAtomAtomIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBAtomAtomIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBAtomAtomIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBAtomAtomIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAtomAtomIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAtomAtomIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAtomAtomIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAtomAtomIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter___deref__) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBAtomAtomIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter___ref__) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBAtomAtomIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_Visit_set) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_Visit_get) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((*arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_Duplicate) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  (*arg1)->Duplicate(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetIdx) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetId) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetId. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (*arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetHyb) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetHyb. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetHyb(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetAtomicNum) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetAtomicNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetIsotope) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetIsotope. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIsotope(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetImplicitValence) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetImplicitValence(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IncrementImplicitValence) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IncrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->IncrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DecrementImplicitValence) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DecrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DecrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetFormalCharge) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetFormalCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetSpinMultiplicity) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; short arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]); ; (*arg1)->SetSpinMultiplicity(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetType__SWIG_0) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetType((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetType__SWIG_1) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (*arg1)->SetType((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBAtomAtomIter_SetType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBAtomAtomIter_SetType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_SetType'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetPartialCharge) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (*arg1)->SetPartialCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetVector__SWIG_0) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetVector__SWIG_1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double arg2 ; double arg3 ; double arg4 ; zval **args[4];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (*arg1)->SetVector(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetVector__SWIG_2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetVector(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetVector) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomAtomIter_SetVector__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtomAtomIter_SetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBAtomAtomIter_SetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_SetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetCoordPtr) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double **arg2 = (double **) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_SetCoordPtr. Expected SWIGTYPE_p_p_double"); }  } 
  (*arg1)->SetCoordPtr(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetResidue) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->SetResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetParent) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetAromatic) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_UnsetAromatic) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetClockwiseStereo) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetAntiClockwiseStereo) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetAntiClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAntiClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetPositiveStereo) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetPositiveStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetNegativeStereo) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetNegativeStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_UnsetStereo) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_UnsetStereo. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetStereo(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetInRing) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetChiral) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetChiral. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetChiral(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ClearCoordPtr) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_ClearCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearCoordPtr(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetFormalCharge) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetFormalCharge(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetAtomicNum) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetAtomicNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetIsotope) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned short result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetIsotope. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned short)(*arg1)->GetIsotope(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetSpinMultiplicity) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetSpinMultiplicity(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetAtomicMass) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetAtomicMass. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetAtomicMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetExactMass) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetExactMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetIdx) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetIndex) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetIndex. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIndex(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetId) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetId. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)(*arg1)->GetId(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetCoordinateIdx) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetCoordinateIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCoordinateIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetCIdx) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetCIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetValence) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetValence. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetHyb) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetHyb. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHyb(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetImplicitValence) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetImplicitValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetHvyValence) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetHvyValence. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHvyValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetHeteroValence) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetHeteroValence. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHeteroValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetType) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetType. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetX) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetX. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetX(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetY) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetY. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetY(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetZ) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetZ. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetZ(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_x) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_x. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->x(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_y) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_y. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->y(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_z) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_z. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->z(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetCoordinate) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetCoordinate. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(*arg1)->GetCoordinate();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetVector__SWIG_0) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetVector__SWIG_1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetVector) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomAtomIter_GetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBAtomAtomIter_GetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_GetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetPartialCharge) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetPartialCharge(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetResidue__SWIG_0) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; OpenBabel::OBResidue *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetResidue__SWIG_1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; zval **args[2];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetResidue) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomAtomIter_GetResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtomAtomIter_GetResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_GetResidue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetParent) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetNewBondVector) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; double arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetNextAtom) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetNextAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_BeginBonds) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_BeginBonds. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_EndBonds) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_EndBonds. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_BeginBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_BeginBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_BeginBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_NextBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_NextBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_NextBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_BeginNbrAtom) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_BeginNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_BeginNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_NextNbrAtom) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_NextNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_NextNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetDistance__SWIG_0) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetDistance__SWIG_1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetDistance__SWIG_2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetDistance) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBAtomAtomIter_GetDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0;
    { { void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBAtomAtomIter_GetDistance__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { _wrap_OBAtomAtomIter_GetDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_GetDistance'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetAngle__SWIG_0) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ; int arg3 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetAngle__SWIG_1) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3];
  double result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAtomAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetAngle) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBAtomAtomIter_GetAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 3) { _wrap_OBAtomAtomIter_GetAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_GetAngle'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_NewResidue) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_NewResidue. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->NewResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_AddResidue) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->AddResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DeleteResidue) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DeleteResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_AddBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }
   (*arg1)->AddBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_InsertBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_InsertBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAtomAtomIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (*arg1)->InsertBond(*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DeleteBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  result = (bool)(*arg1)->DeleteBond(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ClearBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_ClearBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearBond(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HtoMethyl) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HtoMethyl. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HtoMethyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetHybAndGeom) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetHybAndGeom. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->SetHybAndGeom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ForceNoH) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_ForceNoH. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceNoH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasNoHForced) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasNoHForced. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNoHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ForceImplH) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_ForceImplH. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceImplH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasImplHForced) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasImplHForced. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasImplHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_CountFreeOxygens) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_CountFreeOxygens. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeOxygens(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_CountFreeSulfurs) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_CountFreeSulfurs. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeSulfurs(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ImplicitHydrogenCount) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_ImplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ImplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ExplicitHydrogenCount__SWIG_0) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; zval **args[2]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ExplicitHydrogenCount__SWIG_1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ExplicitHydrogenCount) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomAtomIter_ExplicitHydrogenCount__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtomAtomIter_ExplicitHydrogenCount__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_ExplicitHydrogenCount'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_MemberOfRingCount) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_MemberOfRingCount. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_MemberOfRingSize) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_MemberOfRingSize. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_CountRingBonds) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_CountRingBonds. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountRingBonds(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SmallestBondAngle) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SmallestBondAngle. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->SmallestBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_AverageBondAngle) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_AverageBondAngle. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->AverageBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_BOSum) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_BOSum. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->BOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_KBOSum) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_KBOSum. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->KBOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_LewisAcidBaseCounts) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1];
  SwigValueWrapper< std::pair< int,int > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_LewisAcidBaseCounts. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->LewisAcidBaseCounts(); {
    std::pair< int,int > * resultobj = new std::pair< int,int >((const std::pair< int,int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__pairT_int_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasResidue) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasResidue. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasResidue(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHetAtom) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHetAtom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHydrogen__SWIG_0) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHydrogen__SWIG_1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHydrogen) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomAtomIter_IsHydrogen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBAtomAtomIter_IsHydrogen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_IsHydrogen'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsCarbon) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsCarbon. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarbon(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsNitrogen) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsNitrogen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsOxygen) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsSulfur) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsSulfur. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfur(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsPhosphorus) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsPhosphorus. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphorus(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsAromatic) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsInRing) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsInRingSize) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsInRingSize. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsInRingSize(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHeteroatom) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsHeteroatom. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHeteroatom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsNotCorH) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsNotCorH. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNotCorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsConnected) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsConnected(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsOneThree) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneThree(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsOneFour) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneFour(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsCarboxylOxygen) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsCarboxylOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarboxylOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsPhosphateOxygen) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsPhosphateOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsSulfateOxygen) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsSulfateOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsNitroOxygen) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsNitroOxygen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitroOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsAmideNitrogen) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsAmideNitrogen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAmideNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsPolarHydrogen) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsNonPolarHydrogen) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsNonPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNonPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsAromaticNOxide) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsAromaticNOxide. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromaticNOxide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsChiral) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsChiral. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsChiral(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsAxial) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsAxial. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAxial(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsClockwise) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsClockwise. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsAntiClockwise) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsAntiClockwise. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAntiClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsPositiveStereo) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPositiveStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsNegativeStereo) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNegativeStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasChiralitySpecified) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasChiralitySpecified. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralitySpecified(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasChiralVolume) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasChiralVolume. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralVolume(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHbondAcceptor) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsHbondAcceptor. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHbondAcceptorSimple) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsHbondAcceptorSimple. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptorSimple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHbondDonor) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsHbondDonor. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsHbondDonorH) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsHbondDonorH. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_IsMetal) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_IsMetal. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsMetal(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasAlphaBetaUnsat__SWIG_0) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasAlphaBetaUnsat__SWIG_1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAlphaBetaUnsat(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasAlphaBetaUnsat) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomAtomIter_HasAlphaBetaUnsat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtomAtomIter_HasAlphaBetaUnsat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_HasAlphaBetaUnsat'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasBondOfOrder) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasBondOfOrder. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasBondOfOrder(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_CountBondsOfOrder) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_CountBondsOfOrder. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (int)(*arg1)->CountBondsOfOrder(arg2); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HighestBondOrder) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HighestBondOrder. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->HighestBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasNonSingleBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasNonSingleBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNonSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasSingleBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasSingleBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasDoubleBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasDoubleBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasDoubleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasAromaticBond) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasAromaticBond. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAromaticBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_MatchesSMARTS) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_MatchesSMARTS. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_Clear) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DoTransformations) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAtomAtomIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_ClassDescription) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetTitle__SWIG_0) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool arg2 ; zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetTitle__SWIG_1) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomAtomIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtomAtomIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_SetTitle) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasData__SWIG_0) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasData__SWIG_1) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasData__SWIG_2) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBAtomAtomIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBAtomAtomIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBAtomAtomIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DeleteData__SWIG_0) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DeleteData__SWIG_1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DeleteData__SWIG_2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DeleteData__SWIG_3) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBAtomAtomIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; {
      { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBAtomAtomIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBAtomAtomIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBAtomAtomIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_CloneData) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomAtomIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_DataSize) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetData__SWIG_0) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetData__SWIG_1) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetData__SWIG_2) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetData__SWIG_3) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetData__SWIG_4) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::DataOrigin arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomAtomIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBAtomAtomIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBAtomAtomIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBAtomAtomIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBAtomAtomIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomAtomIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_GetAllData) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_BeginData) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomAtomIter_EndData) { OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomAtomIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBAtomAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomBondIter__SWIG_0) { OpenBabel::OBAtomBondIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomBondIter__SWIG_1) { OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; zval **args[1];
  OpenBabel::OBAtomBondIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBAtomBondIter. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomBondIter__SWIG_2) { OpenBabel::OBAtomBondIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBAtomBondIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBAtomBondIter. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter((OpenBabel::OBAtomBondIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBAtomBondIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBAtomBondIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBAtomBondIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBAtomBondIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBAtomBondIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBAtomBondIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBAtomBondIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBAtomBondIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBAtomBondIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter___deref__) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBBond *)((OpenBabel::OBAtomBondIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter___ref__) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBBond *) &((OpenBabel::OBAtomBondIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_Visit_set) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_Visit_get) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((*arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetIdx) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetId) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetId. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (*arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetBO) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; int arg2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetBO. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetBO(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetBondOrder) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetBondOrder. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetBondOrder(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetBegin) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetBegin. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_SetBegin. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   (*arg1)->SetBegin(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetEnd) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetEnd. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_SetEnd. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (*arg1)->SetEnd(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetParent) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetLength__SWIG_0) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; (*arg1)->SetLength(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetLength__SWIG_1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; double arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetLength. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (*arg1)->SetLength(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetLength) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) {
    _wrap_OBAtomBondIter_SetLength__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 3) {
    _wrap_OBAtomBondIter_SetLength__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_SetLength'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_Set) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; int arg5 ; int arg6 ;
  zval **args[6]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_Set. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAtomBondIter_Set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBAtomBondIter_Set. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }  
  convert_to_long_ex(args[4]); arg5 = (int) Z_LVAL_PP(args[4]); ;  convert_to_long_ex(args[5]); arg6 = (int) Z_LVAL_PP(args[5]);
  ; (*arg1)->Set(arg2,arg3,arg4,arg5,arg6); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetKSingle) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetKSingle. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKSingle(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetKDouble) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetKDouble. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKDouble(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetKTriple) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetKTriple. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetKTriple(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetAromatic) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetWedge) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetWedge. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetWedge(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetHash) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetHash. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetWedgeOrHash) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetWedgeOrHash. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetWedgeOrHash(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetUp) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetUp. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetUp(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetDown) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetDown. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetDown(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetInRing__SWIG_0) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; (*arg1)->SetInRing(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetInRing__SWIG_1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetInRing) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomBondIter_SetInRing__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtomBondIter_SetInRing__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_SetInRing'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetClosure) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetClosure. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetClosure(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_UnsetHash) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_UnsetHash. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetHash(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_UnsetWedge) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_UnsetWedge. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetWedge(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_UnsetUp) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_UnsetUp. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetUp(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_UnsetDown) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_UnsetDown. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetDown(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_UnsetAromatic) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_UnsetKekule) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_UnsetKekule. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetKekule(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetIdx) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetId) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetId. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)(*arg1)->GetId(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetBO) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetBO. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBO(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetBondOrder) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetBondOrder. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetFlags) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetFlags. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetFlags(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetBeginAtomIdx) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetBeginAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetBeginAtomIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetEndAtomIdx) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetEndAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetEndAtomIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetBeginAtom__SWIG_0) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetBeginAtom__SWIG_1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetBeginAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetBeginAtom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomBondIter_GetBeginAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBAtomBondIter_GetBeginAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_GetBeginAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetEndAtom__SWIG_0) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetEndAtom__SWIG_1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetEndAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetEndAtom) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomBondIter_GetEndAtom__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBAtomBondIter_GetEndAtom__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_GetEndAtom'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetNbrAtom) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_GetNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetParent) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetEquibLength) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetEquibLength. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetEquibLength(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetLength) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetLength. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetLength(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetNbrAtomIdx) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetNbrAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_GetNbrAtomIdx. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (unsigned int)(*arg1)->GetNbrAtomIdx(arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_FindSmallestRing) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; OpenBabel::OBRing *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_FindSmallestRing. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBRing *)(*arg1)->FindSmallestRing();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsAromatic) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsInRing) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsRotor__SWIG_0) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsRotor. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsRotor(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsRotor__SWIG_1) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsRotor. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsRotor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsRotor) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomBondIter_IsRotor__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtomBondIter_IsRotor__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_IsRotor'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsAmide) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsAmide. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsPrimaryAmide) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsPrimaryAmide. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPrimaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsSecondaryAmide) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsSecondaryAmide. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSecondaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsTertiaryAmide) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsTertiaryAmide. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsTertiaryAmide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsEster) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsEster. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsEster(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsCarbonyl) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsCarbonyl. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarbonyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsSingle) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsSingle. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSingle(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsDouble) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsDouble. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDouble(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsTriple) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsTriple. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsTriple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsKSingle) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsKSingle. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKSingle(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsKDouble) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsKDouble. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKDouble(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsKTriple) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsKTriple. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsKTriple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsClosure) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsClosure. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsClosure(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsUp) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsUp. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsUp(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsDown) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsDown. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDown(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsWedge) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsWedge. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsWedge(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsHash) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsHash. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHash(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsWedgeOrHash) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsWedgeOrHash. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsWedgeOrHash(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsCisOrTrans) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsCisOrTrans. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCisOrTrans(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_IsDoubleBondGeometry) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_IsDoubleBondGeometry. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsDoubleBondGeometry(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_Clear) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_DoTransformations) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBAtomBondIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_ClassDescription) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetTitle__SWIG_0) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool arg2 ; zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetTitle__SWIG_1) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomBondIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBAtomBondIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_SetTitle) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_HasData__SWIG_0) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_HasData__SWIG_1) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_HasData__SWIG_2) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBAtomBondIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBAtomBondIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBAtomBondIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_DeleteData__SWIG_0) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_DeleteData__SWIG_1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_DeleteData__SWIG_2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_DeleteData__SWIG_3) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBAtomBondIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; {
      { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBAtomBondIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBAtomBondIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBAtomBondIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_CloneData) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBAtomBondIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_DataSize) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetData__SWIG_0) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetData__SWIG_1) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetData__SWIG_2) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetData__SWIG_3) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetData__SWIG_4) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::DataOrigin arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBAtomBondIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBAtomBondIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBAtomBondIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBAtomBondIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBAtomBondIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBAtomBondIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_GetAllData) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_BeginData) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBAtomBondIter_EndData) { OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBAtomBondIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBAtomBondIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBAtomBondIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueIter__SWIG_0) { OpenBabel::OBResidueIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidueIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBResidueIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBResidueIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidueIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueIter__SWIG_2) { OpenBabel::OBResidueIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBResidueIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBResidueIter. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter((OpenBabel::OBResidueIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidueIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBResidueIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBResidueIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBResidueIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBResidueIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBResidueIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBResidueIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBResidueIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBResidueIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter___deref__) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBResidue *)((OpenBabel::OBResidueIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter___ref__) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBResidue *) &((OpenBabel::OBResidueIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_AddAtom) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_AddAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  } 
  (*arg1)->AddAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_InsertAtom) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_InsertAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_InsertAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  (*arg1)->InsertAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_RemoveAtom) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_RemoveAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_RemoveAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  (*arg1)->RemoveAtom(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetName) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetName. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (*arg1)->SetName((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetNum__SWIG_0) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetNum. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->SetNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetNum__SWIG_1) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetNum. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); (*arg1)->SetNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetNum) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBResidueIter_SetNum__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBResidueIter_SetNum__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueIter_SetNum'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetChain) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetChain. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]); ; (*arg1)->SetChain(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetChainNum) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetChainNum. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->SetChainNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetIdx) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetInsertionCode) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetInsertionCode. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]); ; (*arg1)->SetInsertionCode(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetAtomID) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; std::string *arg3 = 0 ; std::string temp3 ; zval **args[3];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetAtomID. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_SetAtomID. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   convert_to_string_ex(args[2]); temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2])); arg3 = &temp3;
  (*arg1)->SetAtomID(arg2,(std::string const &)*arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetHetAtom) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetHetAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_SetHetAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }   convert_to_boolean_ex(args[2]); arg3 = (bool) Z_LVAL_PP(args[2]); ; (*arg1)->SetHetAtom(arg2,arg3); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetSerialNum) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; unsigned int arg3 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetSerialNum. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_SetSerialNum. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }   convert_to_long_ex(args[2]); arg3 = (unsigned int) Z_LVAL_PP(args[2]); ; (*arg1)->SetSerialNum(arg2,arg3); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetName) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetName. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->GetName();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetNum) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetNum. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetNumString) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetNumString. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->GetNumString();
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetNumAtoms) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetNumAtoms. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetNumAtoms(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetChain) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; char result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetChain. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char)(*arg1)->GetChain(); {
    ZVAL_STRINGL(return_value,&result, 1, 1); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetChainNum) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetChainNum. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetChainNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetIdx) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetResKey) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetResKey. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetResKey(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetAtoms) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBAtom * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetAtoms. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->GetAtoms(); {
    std::vector< OpenBabel::OBAtom * > * resultobj = new std::vector< OpenBabel::OBAtom * >((const std::vector< OpenBabel::OBAtom * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetBonds__SWIG_0) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  bool arg2 ; zval **args[2]; SwigValueWrapper< std::vector< OpenBabel::OBBond * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetBonds. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetBonds(arg2); {
    std::vector< OpenBabel::OBBond * > * resultobj = new std::vector< OpenBabel::OBBond * >((const std::vector< OpenBabel::OBBond * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetBonds__SWIG_1) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBBond * > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetBonds. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->GetBonds(); {
    std::vector< OpenBabel::OBBond * > * resultobj = new std::vector< OpenBabel::OBBond * >((const std::vector< OpenBabel::OBBond * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetBonds) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueIter_GetBonds__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBResidueIter_GetBonds__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueIter_GetBonds'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetAtomID) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; std::string result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetAtomID. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_GetAtomID. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   result = (*arg1)->GetAtomID(arg2); ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetSerialNum) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetSerialNum. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_GetSerialNum. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (unsigned int)(*arg1)->GetSerialNum(arg2); { ZVAL_LONG(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetInsertionCode) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; char result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetInsertionCode. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char)(*arg1)->GetInsertionCode(); {
    ZVAL_STRINGL(return_value,&result, 1, 1); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetAminoAcidProperty) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetAminoAcidProperty. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->GetAminoAcidProperty(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetAtomProperty) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; int arg3 ; zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetAtomProperty. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_GetAtomProperty. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }   convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ; result = (bool)(*arg1)->GetAtomProperty(arg2,arg3); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetResidueProperty) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetResidueProperty. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->GetResidueProperty(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_IsHetAtom) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   result = (bool)(*arg1)->IsHetAtom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_IsResidueType) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_IsResidueType. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsResidueType(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_BeginAtoms) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBAtom * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_BeginAtoms. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginAtoms(); {
    OpenBabel::OBAtomIterator * resultobj = new OpenBabel::OBAtomIterator((const OpenBabel::OBAtomIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_EndAtoms) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBAtom * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_EndAtoms. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndAtoms(); {
    OpenBabel::OBAtomIterator * resultobj = new OpenBabel::OBAtomIterator((const OpenBabel::OBAtomIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_BeginAtom) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector< OpenBabel::OBAtom * >::iterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_BeginAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_BeginAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->BeginAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_NextAtom) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector< OpenBabel::OBAtom * >::iterator *arg2 = 0 ; zval **args[2]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_NextAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_NextAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->NextAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_Clear) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_DoTransformations) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBResidueIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_ClassDescription) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetTitle__SWIG_0) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  bool arg2 ; zval **args[2]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetTitle__SWIG_1) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBResidueIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_SetTitle) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_HasData__SWIG_0) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_HasData__SWIG_1) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_HasData__SWIG_2) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBResidueIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBResidueIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBResidueIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_DeleteData__SWIG_0) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_DeleteData__SWIG_1) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_DeleteData__SWIG_2) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_DeleteData__SWIG_3) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBResidueIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) { int _v = 0; {
      { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBResidueIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBResidueIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBResidueIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_CloneData) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_DataSize) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetData__SWIG_0) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetData__SWIG_1) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetData__SWIG_2) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetData__SWIG_3) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetData__SWIG_4) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::DataOrigin arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBResidueIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBResidueIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBResidueIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBResidueIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_GetAllData) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ; zval **args[2]; std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_BeginData) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueIter_EndData) { OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBResidueIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueAtomIter__SWIG_0) { OpenBabel::OBResidueAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueAtomIter__SWIG_1) { OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  zval **args[1]; OpenBabel::OBResidueAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBResidueAtomIter. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueAtomIter__SWIG_2) { OpenBabel::OBResidueAtomIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBResidueAtomIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBResidueAtomIter. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter((OpenBabel::OBResidueAtomIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBResidueAtomIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBResidueAtomIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBResidue, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBResidueAtomIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBResidueAtomIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBResidueAtomIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBResidueAtomIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBResidueAtomIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBResidueAtomIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBResidueAtomIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter___deref__) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *)((OpenBabel::OBResidueAtomIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter___ref__) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBResidueAtomIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_Visit_set) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_Visit_set. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->Visit = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_Visit_get) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_Visit_get. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool) ((*arg1)->Visit); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_Duplicate) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_Duplicate. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  (*arg1)->Duplicate(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetIdx) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetIdx. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIdx(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetId) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned long arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetId. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned long) Z_LVAL_PP(args[1]); ; (*arg1)->SetId(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetHyb) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetHyb. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetHyb(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetAtomicNum) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetAtomicNum(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetIsotope) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetIsotope. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->SetIsotope(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetImplicitValence) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetImplicitValence(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IncrementImplicitValence) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IncrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->IncrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DecrementImplicitValence) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DecrementImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DecrementImplicitValence(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetFormalCharge) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; (*arg1)->SetFormalCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetSpinMultiplicity) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; short arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]); ; (*arg1)->SetSpinMultiplicity(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetType__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetType((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetType__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (*arg1)->SetType((std::string const &)*arg2); return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); } 
    if (!_v) goto check_1; _wrap_OBResidueAtomIter_SetType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { _wrap_OBResidueAtomIter_SetType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_SetType'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetPartialCharge) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ; (*arg1)->SetPartialCharge(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetVector__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetVector__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  zval **args[4]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]); ;  convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ; 
  convert_to_double_ex(args[3]); arg4 = (double) Z_DVAL_PP(args[3]); ; (*arg1)->SetVector(arg2,arg3,arg4); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetVector__SWIG_2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetVector. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetVector(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetVector) { int argc; zval **argv[4]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueAtomIter_SetVector__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBResidueAtomIter_SetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 4) {
    _wrap_OBResidueAtomIter_SetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_SetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetCoordPtr) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double **arg2 = (double **) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_double, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_SetCoordPtr. Expected SWIGTYPE_p_p_double"); }  } 
  (*arg1)->SetCoordPtr(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetResidue) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_SetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->SetResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetParent) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  zval **args[2]; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }
     }  (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetAromatic) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetAromatic. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_UnsetAromatic) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_UnsetAromatic. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetAromatic(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetClockwiseStereo) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetAntiClockwiseStereo) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetAntiClockwiseStereo. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetAntiClockwiseStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetPositiveStereo) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetPositiveStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetNegativeStereo) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetNegativeStereo(); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_UnsetStereo) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_UnsetStereo. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->UnsetStereo(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetInRing) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetInRing. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetInRing(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetChiral) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetChiral. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->SetChiral(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ClearCoordPtr) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_ClearCoordPtr. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearCoordPtr(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetFormalCharge) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetFormalCharge. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetFormalCharge(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetAtomicNum) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetAtomicNum. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetAtomicNum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetIsotope) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned short result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetIsotope. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned short)(*arg1)->GetIsotope(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetSpinMultiplicity) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetSpinMultiplicity. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->GetSpinMultiplicity(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetAtomicMass) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetAtomicMass. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetAtomicMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetExactMass) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetExactMass. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetExactMass(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetIdx) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetIdx. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetIndex) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetIndex. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetIndex(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetId) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; unsigned long result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetId. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned long)(*arg1)->GetId(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetCoordinateIdx) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetCoordinateIdx. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCoordinateIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetCIdx) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetCIdx. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetCIdx(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetValence) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetValence. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetHyb) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetHyb. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHyb(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetImplicitValence) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetImplicitValence. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetImplicitValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetHvyValence) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetHvyValence. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHvyValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetHeteroValence) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetHeteroValence. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetHeteroValence(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetType) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetType. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetX) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetX. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetX(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetY) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetY. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetY(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetZ) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetZ. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetZ(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_x) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_x. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->x(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_y) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_y. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->y(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_z) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_z. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->z(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetCoordinate) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; double *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetCoordinate. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double *)(*arg1)->GetCoordinate();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_double, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetVector__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetVector__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; OpenBabel::vector3 *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetVector. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::vector3 *) &(*arg1)->GetVector();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__vector3, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetVector) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueAtomIter_GetVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBResidueAtomIter_GetVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_GetVector'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetPartialCharge) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetPartialCharge. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->GetPartialCharge(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetResidue__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; OpenBabel::OBResidue *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetResidue__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; zval **args[2];
  OpenBabel::OBResidue *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetResidue. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBResidue, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetResidue) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueAtomIter_GetResidue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBResidueAtomIter_GetResidue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_GetResidue'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetParent) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; OpenBabel::OBMol *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetNewBondVector) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; double arg3 ;
  zval **args[3]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_GetNewBondVector. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }   convert_to_double_ex(args[2]); arg3 = (double) Z_DVAL_PP(args[2]); ;
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetBond) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_GetBond. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetNextAtom) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; OpenBabel::OBAtom *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetNextAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_BeginBonds) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_BeginBonds. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_EndBonds) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_EndBonds. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndBonds(); {
    OpenBabel::OBBondIterator * resultobj = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_BeginBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_BeginBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_BeginBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_NextBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  zval **args[2]; OpenBabel::OBBond *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_NextBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_NextBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBond, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_BeginNbrAtom) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_BeginNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_BeginNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_NextNbrAtom) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  zval **args[2]; OpenBabel::OBAtom *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_NextNbrAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_NextNbrAtom. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBAtom, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetDistance__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; zval **args[2]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetDistance__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetDistance__SWIG_2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; zval **args[2]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_GetDistance. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (double)(*arg1)->GetDistance(arg2); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetDistance) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBResidueAtomIter_GetDistance__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    int _v = 0; { { void *tmp; _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__vector3, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBResidueAtomIter_GetDistance__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { _wrap_OBResidueAtomIter_GetDistance__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_GetDistance'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetAngle__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; int arg3 ; zval **args[3]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ;  convert_to_long_ex(args[2]); arg3 = (int) Z_LVAL_PP(args[2]); ;
  result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetAngle__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; zval **args[3]; double result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBResidueAtomIter_GetAngle. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (double)(*arg1)->GetAngle(arg2,arg3); { ZVAL_DOUBLE(return_value,result); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetAngle) { int argc; zval **argv[3]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 3) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1; { {
        void *tmp; _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } } 
    if (!_v) goto check_1; _wrap_OBResidueAtomIter_GetAngle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 3) { _wrap_OBResidueAtomIter_GetAngle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_GetAngle'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_NewResidue) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_NewResidue. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->NewResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_AddResidue) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBResidue, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_AddResidue. Expected SWIGTYPE_p_OpenBabel__OBResidue"); }
     }  (*arg1)->AddResidue(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DeleteResidue) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DeleteResidue. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->DeleteResidue(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_AddBond) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_AddBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (*arg1)->AddBond(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_InsertBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; zval **args[3]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_InsertBond. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBResidueAtomIter_InsertBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  (*arg1)->InsertBond(*arg2,arg3); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DeleteBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_DeleteBond. Expected SWIGTYPE_p_OpenBabel__OBBond"); }
     }  result = (bool)(*arg1)->DeleteBond(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ClearBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_ClearBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ClearBond(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HtoMethyl) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HtoMethyl. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HtoMethyl(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetHybAndGeom) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetHybAndGeom. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->SetHybAndGeom(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ForceNoH) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_ForceNoH. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceNoH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasNoHForced) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasNoHForced. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNoHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ForceImplH) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_ForceImplH. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); (*arg1)->ForceImplH(); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasImplHForced) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasImplHForced. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasImplHForced(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_CountFreeOxygens) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_CountFreeOxygens. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeOxygens(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_CountFreeSulfurs) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_CountFreeSulfurs. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountFreeSulfurs(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ImplicitHydrogenCount) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_ImplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ImplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ExplicitHydrogenCount__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; zval **args[2]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ExplicitHydrogenCount__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_ExplicitHydrogenCount. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ExplicitHydrogenCount) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueAtomIter_ExplicitHydrogenCount__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBResidueAtomIter_ExplicitHydrogenCount__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;} 
  SWIG_ErrorCode() = E_ERROR; SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_ExplicitHydrogenCount'";
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_MemberOfRingCount) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_MemberOfRingCount. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingCount(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_MemberOfRingSize) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_MemberOfRingSize. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->MemberOfRingSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_CountRingBonds) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; unsigned int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_CountRingBonds. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->CountRingBonds(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SmallestBondAngle) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SmallestBondAngle. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->SmallestBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_AverageBondAngle) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; double result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_AverageBondAngle. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (double)(*arg1)->AverageBondAngle(); {
    ZVAL_DOUBLE(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_BOSum) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_BOSum. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->BOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_KBOSum) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_KBOSum. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->KBOSum(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_LewisAcidBaseCounts) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1];
  SwigValueWrapper< std::pair< int,int > > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_LewisAcidBaseCounts. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->LewisAcidBaseCounts(); {
    std::pair< int,int > * resultobj = new std::pair< int,int >((const std::pair< int,int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__pairT_int_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasResidue) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasResidue. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasResidue(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHetAtom) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsHetAtom. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHetAtom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHydrogen__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHydrogen__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsHydrogen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHydrogen) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueAtomIter_IsHydrogen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) {
    _wrap_OBResidueAtomIter_IsHydrogen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_IsHydrogen'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsCarbon) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsCarbon. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarbon(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsNitrogen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsNitrogen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsOxygen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsOxygen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsSulfur) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsSulfur. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfur(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsPhosphorus) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsPhosphorus. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphorus(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsAromatic) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsInRing) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsInRing(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsInRingSize) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsInRingSize. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsInRingSize(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHeteroatom) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsHeteroatom. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHeteroatom(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsNotCorH) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsNotCorH. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNotCorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsConnected) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_IsConnected. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsConnected(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsOneThree) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_IsOneThree. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneThree(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsOneFour) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_IsOneFour. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }
     }  result = (bool)(*arg1)->IsOneFour(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsCarboxylOxygen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsCarboxylOxygen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsCarboxylOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsPhosphateOxygen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsPhosphateOxygen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPhosphateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsSulfateOxygen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsSulfateOxygen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsSulfateOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsNitroOxygen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsNitroOxygen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNitroOxygen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsAmideNitrogen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsAmideNitrogen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAmideNitrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsPolarHydrogen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsNonPolarHydrogen) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsNonPolarHydrogen. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNonPolarHydrogen(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsAromaticNOxide) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsAromaticNOxide. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromaticNOxide(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsChiral) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsChiral. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsChiral(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsAxial) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsAxial. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAxial(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsClockwise) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsClockwise. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsAntiClockwise) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsAntiClockwise. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAntiClockwise(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsPositiveStereo) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsPositiveStereo. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsPositiveStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsNegativeStereo) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsNegativeStereo. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsNegativeStereo(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasChiralitySpecified) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasChiralitySpecified. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralitySpecified(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasChiralVolume) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasChiralVolume. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasChiralVolume(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHbondAcceptor) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsHbondAcceptor. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHbondAcceptorSimple) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsHbondAcceptorSimple. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondAcceptorSimple(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHbondDonor) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsHbondDonor. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonor(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsHbondDonorH) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsHbondDonorH. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsHbondDonorH(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_IsMetal) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_IsMetal. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsMetal(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasAlphaBetaUnsat__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasAlphaBetaUnsat__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasAlphaBetaUnsat. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAlphaBetaUnsat(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasAlphaBetaUnsat) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueAtomIter_HasAlphaBetaUnsat__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBResidueAtomIter_HasAlphaBetaUnsat__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_HasAlphaBetaUnsat'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasBondOfOrder) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasBondOfOrder. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasBondOfOrder(arg2); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_CountBondsOfOrder) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; zval **args[2]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_CountBondsOfOrder. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (int)(*arg1)->CountBondsOfOrder(arg2); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HighestBondOrder) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; int result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HighestBondOrder. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int)(*arg1)->HighestBondOrder(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasNonSingleBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasNonSingleBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasNonSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasSingleBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasSingleBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasSingleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasDoubleBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasDoubleBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasDoubleBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasAromaticBond) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasAromaticBond. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->HasAromaticBond(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_MatchesSMARTS) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_MatchesSMARTS. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_Clear) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_Clear. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->Clear(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DoTransformations) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; zval **args[3]; OpenBabel::OBBase *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_DoTransformations. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__OBConversion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBResidueAtomIter_DoTransformations. Expected SWIGTYPE_p_OpenBabel__OBConversion"); }
     }  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBase, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_ClassDescription) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_ClassDescription. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->ClassDescription(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetTitle__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; zval **args[2]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]); ; result = (char *)(*arg1)->GetTitle(arg2); { if(!result) { ZVAL_NULL(return_value); }
     else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetTitle__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; char *result = 0 ;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetTitle. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetTitle(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetTitle) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueAtomIter_GetTitle__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) {
    _wrap_OBResidueAtomIter_GetTitle__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_GetTitle'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_SetTitle) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_SetTitle. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetTitle((char const *)arg2);
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasData__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasData__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  bool result; SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT; }  { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (bool)(*arg1)->HasData((char const *)arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasData__SWIG_2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; zval **args[2]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_HasData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->HasData(arg2); { ZVAL_BOOL(return_value,(result)?1:0); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_HasData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); } 
    if (!_v) goto check_1; _wrap_OBResidueAtomIter_HasData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_STRING); }  if (!_v) goto check_2;
    _wrap_OBResidueAtomIter_HasData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) {
    _wrap_OBResidueAtomIter_HasData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_HasData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DeleteData__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; zval **args[2];
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DeleteData__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->DeleteData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DeleteData__SWIG_2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_DeleteData. Expected SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t"); }
     }  (*arg1)->DeleteData(*arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DeleteData__SWIG_3) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DeleteData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DeleteData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBGenericData, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBResidueAtomIter_DeleteData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0) >= 0); } } 
    if (!_v) goto check_2; _wrap_OBResidueAtomIter_DeleteData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2:
  if (argc == 2) { int _v = 0; { _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBResidueAtomIter_DeleteData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) {
    _wrap_OBResidueAtomIter_DeleteData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_DeleteData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_CloneData) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBGenericData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBResidueAtomIter_CloneData. Expected SWIGTYPE_p_OpenBabel__OBGenericData"); }
     }  (*arg1)->CloneData(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_DataSize) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1]; size_t result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_DataSize. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->DataSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetData__SWIG_0) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetData__SWIG_1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  zval **args[2]; OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetData__SWIG_2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *arg2 = (char *) 0 ; zval **args[2];
  OpenBabel::OBGenericData *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ;
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((char const *)arg2);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBGenericData, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetData__SWIG_3) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1];
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 0); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetData__SWIG_4) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::DataOrigin arg2 ; zval **args[2];
  std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (OpenBabel::DataOrigin) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetData) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 1) {
    _wrap_OBResidueAtomIter_GetData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_2;
    _wrap_OBResidueAtomIter_GetData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 2) { int _v = 0; {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); }  if (!_v) goto check_3;
    _wrap_OBResidueAtomIter_GetData__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_3: if (argc == 2) { int _v = 0; {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0; }  if (!_v) goto check_4;
    _wrap_OBResidueAtomIter_GetData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_4: if (argc == 2) {
    _wrap_OBResidueAtomIter_GetData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBResidueAtomIter_GetData'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_GetAllData) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; zval **args[2];
  std::vector< OpenBabel::OBGenericData * > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_GetAllData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (unsigned int) Z_LVAL_PP(args[1]); ; result = (*arg1)->GetAllData(arg2); {
    std::vector< OpenBabel::OBGenericData * > * resultobj = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t, 1); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_BeginData) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; zval **args[1];
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_BeginData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->BeginData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBResidueAtomIter_EndData) { OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  zval **args[1]; SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBResidueAtomIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBResidueAtomIter_EndData. Expected SWIGTYPE_p_OpenBabel__OBResidueAtomIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->EndData(); {
    OpenBabel::OBDataIterator * resultobj = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator, 1); } 
  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAngleIter__SWIG_0) { OpenBabel::OBMolAngleIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAngleIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAngleIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolAngleIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAngleIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAngleIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAngleIter__SWIG_2) { OpenBabel::OBMolAngleIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolAngleIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAngleIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolAngleIter. Expected SWIGTYPE_p_OpenBabel__OBMolAngleIter"); }
     }  result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter((OpenBabel::OBMolAngleIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolAngleIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolAngleIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolAngleIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolAngleIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolAngleIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolAngleIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolAngleIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolAngleIter *arg1 = (OpenBabel::OBMolAngleIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolAngleIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolAngleIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolAngleIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolAngleIter___ref__) { OpenBabel::OBMolAngleIter *arg1 = (OpenBabel::OBMolAngleIter *) 0 ;
  zval **args[1]; std::vector< unsigned int > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolAngleIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolAngleIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolAngleIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBMolAngleIter const *)arg1)->operator *(); {
    std::vector< unsigned int > * resultobj = new std::vector< unsigned int >((const std::vector< unsigned int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolTorsionIter__SWIG_0) { OpenBabel::OBMolTorsionIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolTorsionIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolTorsionIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolTorsionIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolTorsionIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolTorsionIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolTorsionIter__SWIG_2) { OpenBabel::OBMolTorsionIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolTorsionIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolTorsionIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolTorsionIter. Expected SWIGTYPE_p_OpenBabel__OBMolTorsionIter"); }
     }  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter((OpenBabel::OBMolTorsionIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolTorsionIter, 1); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolTorsionIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolTorsionIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolTorsionIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolTorsionIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolTorsionIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolTorsionIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolTorsionIter *arg1 = (OpenBabel::OBMolTorsionIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolTorsionIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolTorsionIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolTorsionIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolTorsionIter___ref__) { OpenBabel::OBMolTorsionIter *arg1 = (OpenBabel::OBMolTorsionIter *) 0 ;
  zval **args[1]; std::vector< unsigned int > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolTorsionIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolTorsionIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolTorsionIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBMolTorsionIter const *)arg1)->operator *(); {
    std::vector< unsigned int > * resultobj = new std::vector< unsigned int >((const std::vector< unsigned int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolPairIter__SWIG_0) { OpenBabel::OBMolPairIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolPairIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolPairIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolPairIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolPairIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolPairIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolPairIter__SWIG_2) { OpenBabel::OBMolPairIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolPairIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolPairIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolPairIter. Expected SWIGTYPE_p_OpenBabel__OBMolPairIter"); }
     }  result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter((OpenBabel::OBMolPairIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolPairIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolPairIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolPairIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolPairIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolPairIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolPairIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolPairIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolPairIter *arg1 = (OpenBabel::OBMolPairIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolPairIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolPairIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolPairIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolPairIter___ref__) { OpenBabel::OBMolPairIter *arg1 = (OpenBabel::OBMolPairIter *) 0 ;
  zval **args[1]; std::vector< unsigned int > result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolPairIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolPairIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolPairIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OpenBabel::OBMolPairIter const *)arg1)->operator *(); {
    std::vector< unsigned int > * resultobj = new std::vector< unsigned int >((const std::vector< unsigned int > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_int_t, 1); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolRingIter__SWIG_0) { OpenBabel::OBMolRingIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) { WRONG_PARAM_COUNT; }  result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolRingIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolRingIter__SWIG_1) { OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; zval **args[1];
  OpenBabel::OBMolRingIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolRingIter. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  } 
  result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter(arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolRingIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolRingIter__SWIG_2) { OpenBabel::OBMolRingIter *arg1 = 0 ; zval **args[1];
  OpenBabel::OBMolRingIter *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OBMolRingIter. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter((OpenBabel::OBMolRingIter const &)*arg1);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMolRingIter, 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_new_OBMolRingIter) { int argc; zval **argv[1]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 0) {
    _wrap_new_OBMolRingIter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  if (argc == 1) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBMol, 0) >= 0); } }  if (!_v) goto check_2;
    _wrap_new_OBMolRingIter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_2: if (argc == 1) {
    _wrap_new_OBMolRingIter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OBMolRingIter'"; SWIG_FAIL(TSRMLS_C); }
static void __wrap_delete_OBMolRingIter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ; void *ptr=value->ptr ; int newobject=value->newobject ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; efree(value); if (! newobject) return; 
  arg1 = (OpenBabel::OBMolRingIter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OpenBabel__OBMolRingIter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OpenBabel::OBMolRingIter resource already free'd"); delete arg1; return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter___deref__) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; OpenBabel::OBRing *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter___deref__. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBRing *)((OpenBabel::OBMolRingIter const *)arg1)->operator ->();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter___ref__) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; OpenBabel::OBRing *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter___ref__. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OpenBabel::OBRing *) &((OpenBabel::OBMolRingIter const *)arg1)->operator *();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBRing, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_ring_id_set) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  int arg2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_ring_id_set. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; if (arg1) (*arg1)->ring_id = arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_ring_id_get) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_ring_id_get. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (int) ((*arg1)->ring_id); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter__path_set) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  std::vector< int > *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter__path_set. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolRingIter__path_set. Expected SWIGTYPE_p_std__vectorT_int_t"); }
     }  if (arg1) (*arg1)->_path = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter__path_get) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; std::vector< int > *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter__path_get. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (std::vector< int > *) & ((*arg1)->_path);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter__pathset_set) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter__pathset_set. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBitVec, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolRingIter__pathset_set. Expected SWIGTYPE_p_OpenBabel__OBBitVec"); }
     }  if (arg1) (*arg1)->_pathset = *arg2; return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter__pathset_get) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; OpenBabel::OBBitVec *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter__pathset_get. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBBitVec *) & ((*arg1)->_pathset);
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBBitVec, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_Size) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_Size. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->Size(); { ZVAL_LONG(return_value,result); }
   return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_PathSize) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; size_t result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_PathSize. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (*arg1)->PathSize(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_IsAromatic) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_IsAromatic. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (bool)(*arg1)->IsAromatic(); {
    ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_SetType__SWIG_0) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  char *arg2 = (char *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  if ((*args[1])->type==IS_NULL) { arg2 = (char *) 0; }
   else { convert_to_string_ex(args[1]); arg2 = (char *) Z_STRVAL_PP(args[1]); }  ; (*arg1)->SetType(arg2); return; fail:
  SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_SetType__SWIG_1) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_SetType. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1])); arg2 = &temp2; (*arg1)->SetType(*arg2);
  ZVAL_STRINGL(*(args[1]), const_cast<char*>(arg2->data()), arg2->size(), 1); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_SetType) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__string, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolRingIter_SetType__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBMolRingIter_SetType__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolRingIter_SetType'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_GetType) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; char *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_GetType. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (char *)(*arg1)->GetType(); { if(!result) {
      ZVAL_NULL(return_value); }  else { ZVAL_STRING(return_value, (char *)result, 1); }  }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_GetRootAtom) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; unsigned int result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_GetRootAtom. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (unsigned int)(*arg1)->GetRootAtom(); {
    ZVAL_LONG(return_value,result); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_IsMember__SWIG_0) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_IsMember. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBAtom, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolRingIter_IsMember. Expected SWIGTYPE_p_OpenBabel__OBAtom"); }  }
   result = (bool)(*arg1)->IsMember(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_IsMember__SWIG_1) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_IsMember. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBBond, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolRingIter_IsMember. Expected SWIGTYPE_p_OpenBabel__OBBond"); }  }
   result = (bool)(*arg1)->IsMember(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_IsMember) { int argc; zval **argv[2]; argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv); if (argc == 2) { int _v = 0; { { void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OpenBabel__OBAtom, 0) >= 0); } }  if (!_v) goto check_1;
    _wrap_OBMolRingIter_IsMember__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  check_1: if (argc == 2) {
    _wrap_OBMolRingIter_IsMember__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;}  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OBMolRingIter_IsMember'"; SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_IsInRing) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; int arg2 ;
  zval **args[2]; bool result; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_IsInRing. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]); ; result = (bool)(*arg1)->IsInRing(arg2); { ZVAL_BOOL(return_value,(result)?1:0); }  return;
  fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_SetParent) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; zval **args[2]; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__OBMol, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolRingIter_SetParent. Expected SWIGTYPE_p_OpenBabel__OBMol"); }  }
   (*arg1)->SetParent(arg2); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_GetParent) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  zval **args[1]; OpenBabel::OBMol *result = 0 ; SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) { WRONG_PARAM_COUNT; }  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_GetParent. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OpenBabel__OBMol, 0); return; fail: SWIG_FAIL(TSRMLS_C); }
ZEND_NAMED_FUNCTION(_wrap_OBMolRingIter_findCenterAndNormal) { OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; zval **args[4]; bool result;
  SWIG_ResetError(TSRMLS_C); if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) { WRONG_PARAM_COUNT; }
   { if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OpenBabel__OBMolRingIter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OBMolRingIter_findCenterAndNormal. Expected SWIGTYPE_p_OpenBabel__OBMolRingIter"); }
     }  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL"); {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OBMolRingIter_findCenterAndNormal. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OBMolRingIter_findCenterAndNormal. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  { if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_OpenBabel__vector3, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OBMolRingIter_findCenterAndNormal. Expected SWIGTYPE_p_OpenBabel__vector3"); }
     }  result = (bool)(*arg1)->findCenterAndNormal(*arg2,*arg3,*arg4); { ZVAL_BOOL(return_value,(result)?1:0); }  return; fail:
  SWIG_FAIL(TSRMLS_C); }
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_void) {
  /* No destructor for simple type _p_void */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBPairTemplateT_double_t) {
  /* No destructor for simple type _p_OpenBabel__OBPairTemplateT_double_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_double_t) {
  __wrap_delete_vectorDouble(rsrc, SWIGTYPE_p_std__vectorT_double_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBPairTemplateT_bool_t) {
  /* No destructor for simple type _p_OpenBabel__OBPairTemplateT_bool_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBIsomorphismMapper__Functor) {
  /* No destructor for simple type _p_OpenBabel__OBIsomorphismMapper__Functor */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_char) {
  /* No destructor for simple type _p_unsigned_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBGlobalDataBase) {
  __wrap_delete_OBGlobalDataBase(rsrc, SWIGTYPE_p_OpenBabel__OBGlobalDataBase->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__pairT_std__string_std__string_t_t) {
  /* No destructor for simple type _p_std__vectorT_std__pairT_std__string_std__string_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__string) {
  /* No destructor for simple type _p_std__string */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFFConstraint) {
  __wrap_delete_OBFFConstraint(rsrc, SWIGTYPE_p_OpenBabel__OBFFConstraint->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAngle) {
  __wrap_delete_OBAngle(rsrc, SWIGTYPE_p_OpenBabel__OBAngle->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBVectorData) {
  __wrap_delete_OBVectorData(rsrc, SWIGTYPE_p_OpenBabel__OBVectorData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBCisTransStereo_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSqrtTbl) {
  __wrap_delete_OBSqrtTbl(rsrc, SWIGTYPE_p_OpenBabel__OBSqrtTbl->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_uint32_t_t) {
  /* No destructor for simple type _p_std__vectorT_uint32_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBStereoUnit_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBStereoUnit_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRotor) {
  __wrap_delete_OBRotor(rsrc, SWIGTYPE_p_OpenBabel__OBRotor->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolPairIter) {
  __wrap_delete_OBMolPairIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolPairIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_double_p_t) {
  /* No destructor for simple type _p_std__vectorT_double_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBIsotopeTable) {
  __wrap_delete_OBIsotopeTable(rsrc, SWIGTYPE_p_OpenBabel__OBIsotopeTable->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBTypeTable) {
  __wrap_delete_OBTypeTable(rsrc, SWIGTYPE_p_OpenBabel__OBTypeTable->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__AliasData) {
  __wrap_delete_AliasData(rsrc, SWIGTYPE_p_OpenBabel__AliasData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_a_4__char) {
  /* No destructor for simple type _p_a_4__char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBResidue) {
  __wrap_delete_OBResidue(rsrc, SWIGTYPE_p_OpenBabel__OBResidue->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_OpenBabel__OBDescriptor) {
  /* No destructor for simple type _p_p_OpenBabel__OBDescriptor */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBDescriptor) {
  __wrap_delete_OBDescriptor(rsrc, SWIGTYPE_p_OpenBabel__OBDescriptor->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBExternalBond) {
  __wrap_delete_OBExternalBond(rsrc, SWIGTYPE_p_OpenBabel__OBExternalBond->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBUnitCell) {
  __wrap_delete_OBUnitCell(rsrc, SWIGTYPE_p_OpenBabel__OBUnitCell->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBStereoUnit) {
  __wrap_delete_OBStereoUnit(rsrc, SWIGTYPE_p_OpenBabel__OBStereoUnit->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSymmetryData) {
  __wrap_delete_OBSymmetryData(rsrc, SWIGTYPE_p_OpenBabel__OBSymmetryData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__FptIndexHeader) {
  __wrap_delete_FptIndexHeader(rsrc, SWIGTYPE_p_OpenBabel__FptIndexHeader->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBBitVec) {
  __wrap_delete_OBBitVec(rsrc, SWIGTYPE_p_OpenBabel__OBBitVec->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBStopwatch) {
  __wrap_delete_OBStopwatch(rsrc, SWIGTYPE_p_OpenBabel__OBStopwatch->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__FastSearch) {
  __wrap_delete_FastSearch(rsrc, SWIGTYPE_p_OpenBabel__FastSearch->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpMap) {
  /* No destructor for simple type _p_OpMap */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSmartsMatcher) {
  __wrap_delete_OBSmartsMatcher(rsrc, SWIGTYPE_p_OpenBabel__OBSmartsMatcher->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRateData) {
  /* No destructor for simple type _p_OpenBabel__OBRateData */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__FptIndex) {
  /* No destructor for simple type _p_OpenBabel__FptIndex */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Ref) {
  /* No destructor for simple type _p_Ref */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBAtom_p_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBAtom_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__mapT_int_OpenBabel__OBAtom_p_t) {
  /* No destructor for simple type _p_std__mapT_int_OpenBabel__OBAtom_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBQueryAtom_p_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBQueryAtom_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRotamerList) {
  __wrap_delete_OBRotamerList(rsrc, SWIGTYPE_p_OpenBabel__OBRotamerList->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_int) {
  /* No destructor for simple type _p_unsigned_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBElement) {
  __wrap_delete_OBElement(rsrc, SWIGTYPE_p_OpenBabel__OBElement->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__SpaceGroup) {
  __wrap_delete_SpaceGroup(rsrc, SWIGTYPE_p_OpenBabel__SpaceGroup->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__stringbuf) {
  __wrap_delete_stringbuf(rsrc, SWIGTYPE_p_std__stringbuf->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_OpenBabel__OBOp) {
  /* No destructor for simple type _p_p_OpenBabel__OBOp */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBOp) {
  __wrap_delete_OBOp(rsrc, SWIGTYPE_p_OpenBabel__OBOp->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBReaction) {
  __wrap_delete_OBReaction(rsrc, SWIGTYPE_p_OpenBabel__OBReaction->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBOrbital) {
  __wrap_delete_OBOrbital(rsrc, SWIGTYPE_p_OpenBabel__OBOrbital->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBRing_t) {
  __wrap_delete_vectorOBRing(rsrc, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__obLogBuf) {
  __wrap_delete_obLogBuf(rsrc, SWIGTYPE_p_OpenBabel__obLogBuf->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__dequeT_int_t) {
  /* No destructor for simple type _p_std__dequeT_int_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__pairT_int_int_t) {
  /* No destructor for simple type _p_std__pairT_int_int_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBPairTemplateT_int_t) {
  /* No destructor for simple type _p_OpenBabel__OBPairTemplateT_int_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__pairT_unsigned_int_unsigned_int_t) {
  __wrap_delete_pairUIntUInt(rsrc, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_int_t) {
  __wrap_delete_vectorInt(rsrc, SWIGTYPE_p_std__vectorT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_int_t) {
  __wrap_delete_vectorUnsignedInt(rsrc, SWIGTYPE_p_std__vectorT_unsigned_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBNasaThermoData) {
  /* No destructor for simple type _p_OpenBabel__OBNasaThermoData */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBElementTable) {
  __wrap_delete_OBElementTable(rsrc, SWIGTYPE_p_OpenBabel__OBElementTable->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__multimapT_double_unsigned_int_t) {
  /* No destructor for simple type _p_std__multimapT_double_unsigned_int_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBIsomorphismMapper) {
  __wrap_delete_OBIsomorphismMapper(rsrc, SWIGTYPE_p_OpenBabel__OBIsomorphismMapper->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAtom) {
  __wrap_delete_OBAtom(rsrc, SWIGTYPE_p_OpenBabel__OBAtom->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__transform3d) {
  __wrap_delete_transform3d(rsrc, SWIGTYPE_p_OpenBabel__transform3d->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_OpenBabel__OBForceField) {
  /* No destructor for simple type _p_p_OpenBabel__OBForceField */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBForceField) {
  __wrap_delete_OBForceField(rsrc, SWIGTYPE_p_OpenBabel__OBForceField->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBResidue_t) {
  __wrap_delete_vectorOBResidue(rsrc, SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__vectorT_int_t_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_std__vectorT_int_t_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_double_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_double_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBResidue_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBResidue_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBBond_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBBond_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBAtom_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_PluginIterator) {
  /* No destructor for simple type _p_PluginIterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBRing_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBRing_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_double_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_double_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBRotor_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_char_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_unsigned_char_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBGenericData_p_t) {
  __wrap_delete_vectorpOBGenericData(rsrc, SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRingSearch) {
  __wrap_delete_OBRingSearch(rsrc, SWIGTYPE_p_OpenBabel__OBRingSearch->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSSMatch) {
  __wrap_delete_OBSSMatch(rsrc, SWIGTYPE_p_OpenBabel__OBSSMatch->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRingTyper) {
  __wrap_delete_OBRingTyper(rsrc, SWIGTYPE_p_OpenBabel__OBRingTyper->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__listT_OpenBabel__transform3d_p_t__const_iterator) {
  /* No destructor for simple type _p_std__listT_OpenBabel__transform3d_p_t__const_iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t) {
  /* No destructor for simple type _p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMol) {
  __wrap_delete_OBMol(rsrc, SWIGTYPE_p_OpenBabel__OBMol->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__Template) {
  /* No destructor for simple type _p_OpenBabel__Template */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBQueryAtom) {
  __wrap_delete_OBQueryAtom(rsrc, SWIGTYPE_p_OpenBabel__OBQueryAtom->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolRingIter) {
  __wrap_delete_OBMolRingIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolRingIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__istream) {
  /* No destructor for simple type _p_std__istream */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__ostream) {
  /* No destructor for simple type _p_std__ostream */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__CharPtrLess) {
  __wrap_delete_CharPtrLess(rsrc, SWIGTYPE_p_OpenBabel__CharPtrLess->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBOrbitalData) {
  __wrap_delete_OBOrbitalData(rsrc, SWIGTYPE_p_OpenBabel__OBOrbitalData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBChiralData) {
  __wrap_delete_OBChiralData(rsrc, SWIGTYPE_p_OpenBabel__OBChiralData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__FastSearchIndexer) {
  __wrap_delete_FastSearchIndexer(rsrc, SWIGTYPE_p_OpenBabel__FastSearchIndexer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolBondIter) {
  __wrap_delete_OBMolBondIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolBondIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAtomBondIter) {
  __wrap_delete_OBAtomBondIter(rsrc, SWIGTYPE_p_OpenBabel__OBAtomBondIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBInternalCoord) {
  __wrap_delete_OBInternalCoord(rsrc, SWIGTYPE_p_OpenBabel__OBInternalCoord->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__mapT_std__string_std__string_t) {
  /* No destructor for simple type _p_std__mapT_std__string_std__string_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__string_t) {
  __wrap_delete_vectorString(rsrc, SWIGTYPE_p_std__vectorT_std__string_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBChainsParser) {
  __wrap_delete_OBChainsParser(rsrc, SWIGTYPE_p_OpenBabel__OBChainsParser->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__pairT_std__string_std__string_t) {
  /* No destructor for simple type _p_std__pairT_std__string_std__string_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBPairData) {
  __wrap_delete_OBPairData(rsrc, SWIGTYPE_p_OpenBabel__OBPairData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__type_info) {
  /* No destructor for simple type _p_std__type_info */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__listT_OpenBabel__vector3_t) {
  /* No destructor for simple type _p_std__listT_OpenBabel__vector3_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__vector3_t) {
  __wrap_delete_vectorVector3(rsrc, SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBResidueIter) {
  __wrap_delete_OBResidueIter(rsrc, SWIGTYPE_p_OpenBabel__OBResidueIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFormat) {
  __wrap_delete_OBFormat(rsrc, SWIGTYPE_p_OpenBabel__OBFormat->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_OpenBabel__OBFormat) {
  /* No destructor for simple type _p_p_OpenBabel__OBFormat */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolAtomDFSIter) {
  __wrap_delete_OBMolAtomDFSIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t) {
  /* No destructor for simple type _p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBInternalCoord_p_t) {
  __wrap_delete_vectorpOBInternalCoord(rsrc, SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolAtomBFSIter) {
  __wrap_delete_OBMolAtomBFSIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolBondBFSIter) {
  __wrap_delete_OBMolBondBFSIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolBondBFSIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t) {
  /* No destructor for simple type _p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator) {
  /* No destructor for simple type _p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBCommentData) {
  __wrap_delete_OBCommentData(rsrc, SWIGTYPE_p_OpenBabel__OBCommentData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_word_vector) {
  /* No destructor for simple type _p_word_vector */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBStereo) {
  __wrap_delete_OBStereo(rsrc, SWIGTYPE_p_OpenBabel__OBStereo->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBTetrahedralStereo) {
  /* No destructor for simple type _p_OpenBabel__OBTetrahedralStereo */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSquarePlanarStereo) {
  /* No destructor for simple type _p_OpenBabel__OBSquarePlanarStereo */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t) {
  __wrap_delete_vvpairUIntUInt(rsrc, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t) {
  __wrap_delete_vpairUIntUInt(rsrc, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBDOSData) {
  __wrap_delete_OBDOSData(rsrc, SWIGTYPE_p_OpenBabel__OBDOSData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMatrixData) {
  __wrap_delete_OBMatrixData(rsrc, SWIGTYPE_p_OpenBabel__OBMatrixData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRotorList) {
  __wrap_delete_OBRotorList(rsrc, SWIGTYPE_p_OpenBabel__OBRotorList->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRing) {
  __wrap_delete_OBRing(rsrc, SWIGTYPE_p_OpenBabel__OBRing->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRotorKeys) {
  __wrap_delete_OBRotorKeys(rsrc, SWIGTYPE_p_OpenBabel__OBRotorKeys->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRotorRules) {
  __wrap_delete_OBRotorRules(rsrc, SWIGTYPE_p_OpenBabel__OBRotorRules->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBStereoFacade) {
  __wrap_delete_OBStereoFacade(rsrc, SWIGTYPE_p_OpenBabel__OBStereoFacade->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFFConstraints) {
  __wrap_delete_OBFFConstraints(rsrc, SWIGTYPE_p_OpenBabel__OBFFConstraints->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFreeGridPoint) {
  __wrap_delete_OBFreeGridPoint(rsrc, SWIGTYPE_p_OpenBabel__OBFreeGridPoint->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__rotor_digit) {
  __wrap_delete_rotor_digit(rsrc, SWIGTYPE_p_OpenBabel__rotor_digit->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAtomClassData) {
  __wrap_delete_OBAtomClassData(rsrc, SWIGTYPE_p_OpenBabel__OBAtomClassData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBOrbital_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBOrbital_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAromaticTyper) {
  __wrap_delete_OBAromaticTyper(rsrc, SWIGTYPE_p_OpenBabel__OBAromaticTyper->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBPlugin) {
  __wrap_delete_OBPlugin(rsrc, SWIGTYPE_p_OpenBabel__OBPlugin->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_int) {
  /* No destructor for simple type _p_p_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_int) {
  /* No destructor for simple type _p_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBGraphSym) {
  __wrap_delete_OBGraphSym(rsrc, SWIGTYPE_p_OpenBabel__OBGraphSym->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__Pattern) {
  /* No destructor for simple type _p_OpenBabel__Pattern */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSmartsPattern) {
  __wrap_delete_OBSmartsPattern(rsrc, SWIGTYPE_p_OpenBabel__OBSmartsPattern->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__DoubleType) {
  __wrap_delete_DoubleType(rsrc, SWIGTYPE_p_OpenBabel__DoubleType->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__matrix3x3) {
  __wrap_delete_matrix3x3(rsrc, SWIGTYPE_p_OpenBabel__matrix3x3->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Refs) {
  /* No destructor for simple type _p_Refs */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRotorRule) {
  __wrap_delete_OBRotorRule(rsrc, SWIGTYPE_p_OpenBabel__OBRotorRule->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolAngleIter) {
  __wrap_delete_OBMolAngleIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolAngleIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBCisTransStereo) {
  /* No destructor for simple type _p_OpenBabel__OBCisTransStereo */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMessageHandler) {
  __wrap_delete_OBMessageHandler(rsrc, SWIGTYPE_p_OpenBabel__OBMessageHandler->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bool) {
  /* No destructor for simple type _p_bool */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_value_type) {
  /* No destructor for simple type _p_value_type */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_difference_type) {
  /* No destructor for simple type _p_difference_type */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__pairT_int_int_t_t) {
  /* No destructor for simple type _p_std__vectorT_std__pairT_int_int_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__vectorT_unsigned_int_t_t) {
  /* No destructor for simple type _p_std__vectorT_std__vectorT_unsigned_int_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__vectorT_int_t_t) {
  __wrap_delete_vectorvInt(rsrc, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAtomTyper) {
  __wrap_delete_OBAtomTyper(rsrc, SWIGTYPE_p_OpenBabel__OBAtomTyper->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Mapping) {
  /* No destructor for simple type _p_Mapping */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolTorsionIter) {
  __wrap_delete_OBMolTorsionIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolTorsionIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBBond) {
  __wrap_delete_OBBond(rsrc, SWIGTYPE_p_OpenBabel__OBBond->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRTree) {
  __wrap_delete_OBRTree(rsrc, SWIGTYPE_p_OpenBabel__OBRTree->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAtomicHeatOfFormationTable) {
  __wrap_delete_OBAtomicHeatOfFormationTable(rsrc, SWIGTYPE_p_OpenBabel__OBAtomicHeatOfFormationTable->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRandom) {
  __wrap_delete_OBRandom(rsrc, SWIGTYPE_p_OpenBabel__OBRandom->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_double) {
  /* No destructor for simple type _p_p_double */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_double) {
  /* No destructor for simple type _p_double */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_double) {
  /* No destructor for simple type _double */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_a_3__double) {
  /* No destructor for simple type _p_a_3__double */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_PluginMapType) {
  /* No destructor for simple type _p_PluginMapType */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRingData) {
  __wrap_delete_OBRingData(rsrc, SWIGTYPE_p_OpenBabel__OBRingData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_long_t) {
  /* No destructor for simple type _p_std__vectorT_unsigned_long_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t) {
  /* No destructor for simple type _p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBBase) {
  __wrap_delete_OBBase(rsrc, SWIGTYPE_p_OpenBabel__OBBase->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBQuery) {
  __wrap_delete_OBQuery(rsrc, SWIGTYPE_p_OpenBabel__OBQuery->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Mappings) {
  /* No destructor for simple type _p_Mappings */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBQueryBond) {
  __wrap_delete_OBQueryBond(rsrc, SWIGTYPE_p_OpenBabel__OBQueryBond->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBConversion) {
  __wrap_delete_OBConversion(rsrc, SWIGTYPE_p_OpenBabel__OBConversion->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBExternalBond_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBExternalBond_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBBond_t) {
  __wrap_delete_vectorOBBond(rsrc, SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__binary_functionT_char_const_p_char_const_p_bool_t) {
  __wrap_delete_dummy(rsrc, SWIGTYPE_p_std__binary_functionT_char_const_p_char_const_p_bool_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBExternalBondData) {
  __wrap_delete_OBExternalBondData(rsrc, SWIGTYPE_p_OpenBabel__OBExternalBondData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBRing_p_t) {
  __wrap_delete_vectorpOBRing(rsrc, SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSetData) {
  __wrap_delete_OBSetData(rsrc, SWIGTYPE_p_OpenBabel__OBSetData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBResidueData) {
  __wrap_delete_OBResidueData(rsrc, SWIGTYPE_p_OpenBabel__OBResidueData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_OpenBabel__OBChargeModel) {
  /* No destructor for simple type _p_p_OpenBabel__OBChargeModel */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBChargeModel) {
  __wrap_delete_OBChargeModel(rsrc, SWIGTYPE_p_OpenBabel__OBChargeModel->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBStereoBase) {
  __wrap_delete_OBStereoBase(rsrc, SWIGTYPE_p_OpenBabel__OBStereoBase->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFingerprint) {
  __wrap_delete_OBFingerprint(rsrc, SWIGTYPE_p_OpenBabel__OBFingerprint->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_OpenBabel__OBFingerprint) {
  /* No destructor for simple type _p_p_OpenBabel__OBFingerprint */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_size_type) {
  /* No destructor for simple type _p_size_type */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSpectrophore) {
  __wrap_delete_OBSpectrophore(rsrc, SWIGTYPE_p_OpenBabel__OBSpectrophore->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAtomHOF) {
  __wrap_delete_OBAtomHOF(rsrc, SWIGTYPE_p_OpenBabel__OBAtomHOF->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBConformerData) {
  __wrap_delete_OBConformerData(rsrc, SWIGTYPE_p_OpenBabel__OBConformerData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBBond_p_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBBond_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBQueryBond_p_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBQueryBond_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__setT_OpenBabel__OBBond_p_t) {
  /* No destructor for simple type _p_std__setT_OpenBabel__OBBond_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_obsharedptrT_OpenBabel__OBMol_t) {
  /* No destructor for simple type _p_obsharedptrT_OpenBabel__OBMol_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Unit) {
  /* No destructor for simple type _p_Unit */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBMol_t) {
  __wrap_delete_vectorOBMol(rsrc, SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__LineSearchType) {
  __wrap_delete_LineSearchType(rsrc, SWIGTYPE_p_OpenBabel__LineSearchType->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBMolAtomIter) {
  __wrap_delete_OBMolAtomIter(rsrc, SWIGTYPE_p_OpenBabel__OBMolAtomIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAtomAtomIter) {
  __wrap_delete_OBAtomAtomIter(rsrc, SWIGTYPE_p_OpenBabel__OBAtomAtomIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBResidueAtomIter) {
  __wrap_delete_OBResidueAtomIter(rsrc, SWIGTYPE_p_OpenBabel__OBResidueAtomIter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBBase_p_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBBase_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_RefIter) {
  /* No destructor for simple type _p_RefIter */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ConstRefIter) {
  /* No destructor for simple type _p_ConstRefIter */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_short_t) {
  /* No destructor for simple type _p_std__vectorT_unsigned_short_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_OpenBabel__OBTorsion_t) {
  /* No destructor for simple type _p_std__vectorT_OpenBabel__OBTorsion_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBGridData) {
  __wrap_delete_OBGridData(rsrc, SWIGTYPE_p_OpenBabel__OBGridData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBTorsion) {
  __wrap_delete_OBTorsion(rsrc, SWIGTYPE_p_OpenBabel__OBTorsion->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_int) {
  /* No destructor for simple type _int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBGenericData) {
  __wrap_delete_OBGenericData(rsrc, SWIGTYPE_p_OpenBabel__OBGenericData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBError) {
  __wrap_delete_OBError(rsrc, SWIGTYPE_p_OpenBabel__OBError->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__streampos) {
  /* No destructor for simple type _p_std__streampos */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFFCalculation2) {
  __wrap_delete_OBFFCalculation2(rsrc, SWIGTYPE_p_OpenBabel__OBFFCalculation2->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFFCalculation3) {
  __wrap_delete_OBFFCalculation3(rsrc, SWIGTYPE_p_OpenBabel__OBFFCalculation3->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFFCalculation4) {
  __wrap_delete_OBFFCalculation4(rsrc, SWIGTYPE_p_OpenBabel__OBFFCalculation4->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t) {
  /* No destructor for simple type _p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBAngleData) {
  __wrap_delete_OBAngleData(rsrc, SWIGTYPE_p_OpenBabel__OBAngleData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBBuilder) {
  __wrap_delete_OBBuilder(rsrc, SWIGTYPE_p_OpenBabel__OBBuilder->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t) {
  /* No destructor for simple type _p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFFParameter) {
  __wrap_delete_OBFFParameter(rsrc, SWIGTYPE_p_OpenBabel__OBFFParameter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBFreeGrid) {
  __wrap_delete_OBFreeGrid(rsrc, SWIGTYPE_p_OpenBabel__OBFreeGrid->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBSerialNums) {
  __wrap_delete_OBSerialNums(rsrc, SWIGTYPE_p_OpenBabel__OBSerialNums->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t) {
  __wrap_delete_vectorvVector3(rsrc, SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t) {
  /* No destructor for simple type _p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_char) {
  /* No destructor for simple type _p_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__vector3) {
  __wrap_delete_vector3(rsrc, SWIGTYPE_p_OpenBabel__vector3->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBElectronicTransitionData) {
  __wrap_delete_OBElectronicTransitionData(rsrc, SWIGTYPE_p_OpenBabel__OBElectronicTransitionData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBRotationData) {
  __wrap_delete_OBRotationData(rsrc, SWIGTYPE_p_OpenBabel__OBRotationData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBTorsionData) {
  __wrap_delete_OBTorsionData(rsrc, SWIGTYPE_p_OpenBabel__OBTorsionData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBVibrationData) {
  __wrap_delete_OBVibrationData(rsrc, SWIGTYPE_p_OpenBabel__OBVibrationData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OpenBabel__OBVirtualBond) {
  __wrap_delete_OBVirtualBond(rsrc, SWIGTYPE_p_OpenBabel__OBVirtualBond->name TSRMLS_CC);
}
/* end wrapper section */
/* class entry subsection */


/* arginfo subsection */
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorint_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorint_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorint_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorint_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorunsignedint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorunsignedint_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorunsignedint_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorunsignedint_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorunsignedint_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorvint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvint_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvint_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvint_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvint_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectordouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectordouble_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectordouble_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectordouble_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectordouble_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorstring_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorstring_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorstring_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorstring_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorvector3, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvector3_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvector3_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvector3_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvector3_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorvvector3, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvvector3_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvvector3_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvvector3_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorvvector3_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorobmol, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobmol_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobmol_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobmol_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobmol_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorobbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobbond_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobbond_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobbond_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobbond_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorobresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobresidue_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobresidue_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobresidue_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobresidue_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorobring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobring_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobring_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobring_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorobring_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorpobring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobring_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobring_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobring_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobring_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorpobgenericdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobgenericdata_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobgenericdata_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobgenericdata_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobgenericdata_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vectorpobinternalcoord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobinternalcoord_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobinternalcoord_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobinternalcoord_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorpobinternalcoord_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_pairuintuint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pairuintuint_first_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pairuintuint_first_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pairuintuint_second_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pairuintuint_second_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vpairuintuint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vpairuintuint_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vpairuintuint_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vpairuintuint_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vpairuintuint_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vvpairuintuint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_capacity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_reserve, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_push, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_is_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_pop, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vvpairuintuint_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_toaliasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_toangledata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_toatomclassdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tochiraldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tocommentdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_toconformerdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_toexternalbonddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_togriddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tomatrixdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tonasathermodata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_topairdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_toratedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_torotamerlist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_torotationdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_toserialnums, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tosetdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tosymmetrydata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_totorsiondata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tounitcell, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tovectordata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tovibrationdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tovirtualbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obglobaldatabase, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obglobaldatabase_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obglobaldatabase_getsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obglobaldatabase_setreaddirectory, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obglobaldatabase_setenvironmentvariable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obglobaldatabase_parseline, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obelement, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getsymbol, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getcovalentrad, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getvdwrad, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getmaxbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getelectroneg, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getallredrochowelectroneg, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getionization, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getelectronaffinity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getred, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getgreen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelement_getblue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obelementtable, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getnumberofelements, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getsymbol, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getvdwrad, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getcovalentrad, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_correctedbondrad, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_correctedvdwrad, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getmaxbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getelectroneg, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getallredrochowelectroneg, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getionization, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getelectronaffinity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getrgb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelementtable_getname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obisotopetable, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obisotopetable_getexactmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obatomhof, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomhof_element, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomhof_charge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomhof_method, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomhof_desc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomhof_t, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomhof_value, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomhof_multiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomhof_unit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obatomicheatofformationtable, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomicheatofformationtable_getheatofformation, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obtypetable, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtypetable_setfromtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtypetable_settotype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtypetable_translate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtypetable_getfromtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtypetable_gettotype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obresiduedata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresiduedata_setresname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresiduedata_lookupbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresiduedata_lookuptype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresiduedata_assignbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubletype_hi_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubletype_hi_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubletype_lo_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubletype_lo_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_doubletype, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doublemultiply, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doubleadd, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_doublemodulus, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrandom, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrandom_seed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrandom_timeseed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrandom_nextint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrandom_nextfloat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstopwatch_start, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstopwatch_lap, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstopwatch_elapsed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obstopwatch, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obsqrttbl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsqrttbl_sqrt, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsqrttbl_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_rotate_coords, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_calc_rms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_vector3, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_begin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_end, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_setx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_sety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_setz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_getx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_gety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_getz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_asarray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_add, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_randomunitvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_normalize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_canbenormalized, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_length_2, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_length, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_x, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_y, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_z, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_isapprox, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_distsq, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vector3_createorthovector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_cross, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vectorangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_calctorsionangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_point2planesigned, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_point2plane, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_point2planeangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_point2line, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vzero_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vx_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vy_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_vz_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_matrix3x3, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_getarray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_inverse, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_transpose, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_randomrotation, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_determinant, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_issymmetric, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_isorthogonal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_isdiagonal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_isunitmatrix, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_setcolumn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_setrow, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_getcolumn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_getrow, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_setuprotmat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_planereflection, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_rotaboutaxisbyangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_fillorth, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_findeigenvectorsifsymmetric, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_matrix3x3_jacobi, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_transform3d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_transform3d_describeasstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_transform3d_describeasvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_transform3d_normalize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_spacegroup, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_sethmname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_sethallname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_addtransform, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_gethmname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_gethallname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_getoriginalternative, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_transform, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_begintransform, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_nexttransform, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_getspacegroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_find, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_spacegroup_isvalid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreleaseversion, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obgenericdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgenericdata_c_clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgenericdata_setattribute, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgenericdata_setorigin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgenericdata_getattribute, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgenericdata_getdatatype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgenericdata_getvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgenericdata_getorigin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_classdescription, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbase_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obbase, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obcommentdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obcommentdata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obcommentdata_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obexternalbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obexternalbond_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obexternalbond_getatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obexternalbond_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obexternalbond_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obexternalbond_setatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obexternalbond_setbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obexternalbonddata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obexternalbonddata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obexternalbonddata_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obpairdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obpairdata_setvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obsetdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsetdata_adddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsetdata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsetdata_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsetdata_getbegin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsetdata_getend, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsetdata_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obvirtualbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvirtualbond_getbgn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvirtualbond_getend, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvirtualbond_getorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvirtualbond_getstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obringdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringdata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringdata_pushback, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringdata_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringdata_beginrings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringdata_endrings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringdata_beginring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringdata_nextring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obunitcell, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_setoffset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_setspacegroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_setlatticetype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_fillunitcell, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_geta, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getalpha, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getbeta, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getgamma, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getoffset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getspacegroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getspacegroupname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getlatticetype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getcellvectors, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getcellmatrix, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getorthomatrix, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getorientationmatrix, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getfractionalmatrix, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_fractionaltocartesian, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_cartesiantofractional, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_wrapcartesiancoordinate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_wrapfractionalcoordinate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getspacegroupnumber, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obunitcell_getcellvolume, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obconformerdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_setdimension, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_setenergies, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_setforces, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_setvelocities, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_setdisplacements, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_getdimension, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_getenergies, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_getforces, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_getvelocities, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_getdisplacements, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconformerdata_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obsymmetrydata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsymmetrydata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsymmetrydata_setpointgroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsymmetrydata_setspacegroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsymmetrydata_getpointgroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsymmetrydata_getspacegroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obtorsion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_c_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_addtorsion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_setangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_getbondidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_getsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_getbc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_getads, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsion_isprotonrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsiondata_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsiondata_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsiondata_getsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsiondata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obtorsiondata_filltorsionarray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obangle_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obangle_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obangle_setangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obangle_setatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obangledata_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obangledata_fillanglearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obangledata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obangledata_getsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obchiraldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchiraldata_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchiraldata_getatom4refs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchiraldata_getatomref, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchiraldata_setatom4refs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchiraldata_addatomref, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchiraldata_getsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obserialnums, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obserialnums_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obserialnums_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obvibrationdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvibrationdata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvibrationdata_getlx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvibrationdata_getfrequencies, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvibrationdata_getintensities, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvibrationdata_getramanactivities, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvibrationdata_getnumberoffrequencies, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obdosdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdosdata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdosdata_getfermienergy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdosdata_getenergies, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdosdata_getdensities, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdosdata_getintegration, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbital_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbital_getenergy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbital_getoccupation, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbital_getsymbol, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_oborbital, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_oborbitaldata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_setalphaorbitals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_setbetaorbitals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_sethomo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_setopenshell, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_isopenshell, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_getalphahomo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_getbetahomo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_getalphaorbitals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_getbetaorbitals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_loadclosedshellorbitals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_loadalphaorbitals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oborbitaldata_loadbetaorbitals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obelectronictransitiondata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_setedipole, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_setrotatorystrengthsvelocity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_setrotatorystrengthslength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_getwavelengths, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_getforces, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_getedipole, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_getrotatorystrengthsvelocity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obelectronictransitiondata_getrotatorystrengthslength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrotationdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotationdata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotationdata_getrotconsts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotationdata_getsymmetrynumber, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotationdata_getrotortype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obvectordata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvectordata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obvectordata_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmatrixdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmatrixdata_setdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmatrixdata_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obfreegridpoint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegridpoint_getx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegridpoint_gety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegridpoint_getz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegridpoint_getv, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegridpoint_setx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegridpoint_sety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegridpoint_setz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegridpoint_setv, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obfreegrid, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegrid_numpoints, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegrid_addpoint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegrid_beginpoints, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegrid_endpoints, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegrid_beginpoint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfreegrid_nextpoint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obgriddata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getxaxis, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getyaxis, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getzaxis, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getaxes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getnumberofpoints, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getnumberofsteps, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getunit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getminvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getmaxvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getoriginvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getmaxvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getunrestricted, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_getnumsymmetries, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_setnumberofpoints, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_setlimits, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_setvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_setvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_setunit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_setunrestricted, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgriddata_setnumsymmetries, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obchainsparser, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchainsparser_perceivechains, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obatomtyper, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomtyper_assignhyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomtyper_assigntypes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomtyper_assignimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomtyper_correctaromaticnitrogens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obaromatictyper, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obaromatictyper_assignaromaticflags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obaromatictyper_propagatepotentialaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obaromatictyper_selectrootatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obaromatictyper_excludesmallring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obaromatictyper_checkaromaticity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obaromatictyper_traversecycle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obringtyper, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringtyper_assigntypes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_dummy, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_charptrless, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_description, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_typeid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_display, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_makeinstance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_getplugin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_listasvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_c_list, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_listasstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_firstline, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_begin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_end, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_getmap, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obplugin_loadallplugins, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_stringbuf, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_oberror, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberror_message, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberror_getmethod, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberror_geterror, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberror_getexplanation, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberror_getpossiblecause, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberror_getsuggestedremedy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberror_getlevel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmessagehandler, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_throwerror, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getmessagesoflevel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_startlogging, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_stoplogging, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_setmaxlogentries, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getmaxlogentries, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_clearlog, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_setoutputlevel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getoutputlevel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_setoutputstream, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getoutputstream, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_starterrorwrap, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_stoperrorwrap, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_geterrormessagecount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getwarningmessagecount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getinfomessagecount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getauditmessagecount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getdebugmessagecount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmessagehandler_getmessagesummary, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberrorlog_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_oberrorlog_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_oblogbuf, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_c_default, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_findtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_readmolecule, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_readchemobject, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_writemolecule, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_writechemobject, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_targetclassdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_specificationurl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_getmimetype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_flags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_skipobjects, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_makenewinstance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_registerformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_display, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obformat_formatfrommime, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obconversion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_registerformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_findformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_formatfromext, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_formatfrommime, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_description, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getinstream, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getoutstream, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setinstream, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setoutstream, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setinandoutformats, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setinformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setoutformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getinformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getoutformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getingzipped, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getoutgzipped, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getinfilename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getoutfilename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getinpos, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getinlen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getauxconv, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setauxconv, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_isoption, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getoptions, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_addoption, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_removeoption, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setoptions, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_registeroptionparam, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getoptionparams, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_copyoptions, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getsupportedinputformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getsupportedoutputformat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_convert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_fullconvert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_addchemobject, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getchemobject, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_islast, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_isfirstinput, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setfirstinput, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getoutputindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setoutputindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setmorefilestocome, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setoneobjectonly, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_setlast, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_islastfile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_getdefaultformat, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_write, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_writestring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_writefile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_closeoutfile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_read, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_readstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_readfile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_openinandoutfiles, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_reportnumberconverted, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obconversion_numinputobjects, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_addatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_insertatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_removeatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_setname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_setnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_setchain, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_setchainnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_setinsertioncode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_setatomid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_sethetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_setserialnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getnumstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getnumatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getchain, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getchainnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getreskey, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getatomid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getserialnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getinsertioncode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getaminoacidproperty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getatomproperty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_getresidueproperty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_ishetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_isresiduetype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_beginatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_endatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_beginatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidue_nextatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_residue_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_residue_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_elemdesc_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_elemdesc_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_resno_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_resno_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_elemno_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_elemno_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__a_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__a_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__b_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__b_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__c_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__c_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__dst_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__dst_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__ang_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__ang_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__tor_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obinternalcoord__tor_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obinternalcoord, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obatom, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_duplicate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_sethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_incrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_decrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setclockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setanticlockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setpositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_unsetstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_setchiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_clearcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getatomicmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getexactmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getcoordinateidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getcidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_gethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_gethvyvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getheterovalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_gety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_x, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_y, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_z, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getcoordinate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getnewbondvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getnextatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_beginbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_endbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_beginbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_nextbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_beginnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_nextnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_newresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_addresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_deleteresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_addbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_insertbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_deletebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_clearbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_htomethyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_sethybandgeom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_forcenoh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hasnohforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_forceimplh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hasimplhforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_countfreeoxygens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_countfreesulfurs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_implicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_explicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_memberofringcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_memberofringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_countringbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_smallestbondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_averagebondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_bosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_kbosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_lewisacidbasecounts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hasresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ishetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ishydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_iscarbon, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isnitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_issulfur, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isphosphorus, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isinringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isheteroatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isnotcorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isconnected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isonethree, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isonefour, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_iscarboxyloxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isphosphateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_issulfateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isnitrooxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isamidenitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ispolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isnonpolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isaromaticnoxide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ischiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isaxial, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isclockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isanticlockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ispositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_isnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_haschiralityspecified, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_haschiralvolume, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ishbondacceptor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ishbondacceptorsimple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ishbonddonor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ishbonddonorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_ismetal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hasalphabetaunsat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hasbondoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_countbondsoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_highestbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hasnonsinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hassinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hasdoublebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_hasaromaticbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatom_matchessmarts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obbond, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setbegin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setend, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setksingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setkdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setktriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setwedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_sethash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setwedgeorhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_setclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_unsethash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_unsetwedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_unsetup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_unsetdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_unsetkekule, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getflags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getbeginatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getendatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getbeginatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getendatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getequiblength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_getnbratomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_findsmallestring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isprimaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_issecondaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_istertiaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isester, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_iscarbonyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_issingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_istriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isksingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_iskdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isktriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_iswedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_ishash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_iswedgeorhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_iscisortrans, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbond_isdoublebondgeometry, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obreaction, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_numreactants, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_numproducts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_addreactant, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_addproduct, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_settransitionstate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_addagent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_getreactant, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_getproduct, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_gettransitionstate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_getagent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_getcomment, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_setcomment, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_isreversible, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_setreversible, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obreaction_classdescription, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmol, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_add, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_reserveatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_createatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_createbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_createresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_destroyatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_destroybond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_destroyresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_addatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_insertatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_addbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_addresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_newatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_newbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_newresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_deleteatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_deletebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_deleteresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_beginmodify, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_endmodify, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getmod, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_incrementmod, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_decrementmod, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getflags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_numatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_numbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_numhvyatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_numresidues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_numrotors, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getatombyid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getfirstatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getbondbyid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getinternalcoord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_gettorsion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_areinsamering, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getformula, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getspacedformula, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getmolwt, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getexactmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_gettotalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_gettotalspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getdimension, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getcoordinates, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getsssr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getlssr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_automaticformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_automaticpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setformula, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setenergy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setdimension, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_settotalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_settotalspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setinternalcoord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setautomaticformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setautomaticpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setaromaticperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setsssrperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setlssrperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setringatomsandbondsperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setatomtypesperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setringtypesperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setchainsperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setchiralityperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setpartialchargesperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_sethybridizationperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setimplicitvalenceperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setkekuleperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setclosurebondsperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_sethydrogensadded, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setcorrectedforph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setaromaticcorrected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setspinmultiplicityassigned, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setflags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_unsetaromaticperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_unsetsssrperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_unsetlssrperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_unsetringtypesperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_unsetpartialchargesperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_unsetimplicitvalenceperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_unsethydrogensadded, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_unsetflag, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_classdescription, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_renumberatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setcoordinates, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_toinertialframe, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_translate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_rotate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_kekulize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_perceivekekulebonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_newperceivekekulebonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_deletehydrogens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_deletepolarhydrogens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_deletenonpolarhydrogens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_deletehydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_addhydrogens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_addpolarhydrogens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_addnonpolarhydrogens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_addnewhydrogens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_stripsalts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_separate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getnextfragment, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_convertdativebonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_makedativebonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_convertzerobonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_correctforph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_assignspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_assigntotalchargetoatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setispatternstructure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_center, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_findsssr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_findlssr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_findringatomsandbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_findchiralcenters, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_findchildren, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_findlargestfragment, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_contigfraglist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_align, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_connectthedots, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_perceivebondorders, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_findangles, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_findtorsions, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getgtdvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getgivector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getgidvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_has2d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_has3d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasnonzerocoords, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasaromaticperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hassssrperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_haslssrperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasringatomsandbondsperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasatomtypesperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasringtypesperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_haschiralityperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_haspartialchargesperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hashybridizationperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasimplicitvalenceperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_haskekuleperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasclosurebondsperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_haschainsperceived, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hashydrogensadded, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasaromaticcorrected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_iscorrectedforph, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_hasspinmultiplicityassigned, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_ischiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_c_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_numconformers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setconformers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_addconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_copyconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_deleteconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_setenergies, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getenergies, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getenergy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_beginconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_nextconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_getconformers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_begininternalcoord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_nextinternalcoord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmol_settorsion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_throwerror, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_cartesiantointernal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_internaltocartesian, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_newextension, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_etab_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_etab_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ttab_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ttab_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_isotab_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_isotab_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aromtyper_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aromtyper_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_atomtyper_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_atomtyper_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_chainsparser_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_chainsparser_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_resdat_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_resdat_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_noid_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_get_rmat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_ob_make_rmat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_qtrfit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_superimpose, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_ring_id_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_ring_id_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring__path_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring__path_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring__pathset_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring__pathset_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_pathsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_getrootatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_ismember, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obring_findcenterandnormal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_compareringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obringsearch, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringsearch_sortrings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringsearch_removeredundant, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringsearch_addringfromclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringsearch_saveuniquering, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringsearch_writerings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringsearch_beginrings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obringsearch_endrings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrtree, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrtree_getatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrtree_pathtoroot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obsmartspattern, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_getsmarts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_c_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_isvalid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_numatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_numbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_getcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_getvectorbinding, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_match, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_hasmatch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_restrictedmatch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_nummatches, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_getmaplist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_beginmlist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_endmlist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_getumaplist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartspattern_writemaplist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obsmartsmatcher, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obsmartsmatcher_match, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obssmatch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obssmatch_match, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_smartslexreplace, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aliasdatatype_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_aliasdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aliasdata_setalias, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aliasdata_getalias, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aliasdata_getcolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aliasdata_setcolor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aliasdata_isexpanded, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aliasdata_reverttoaliasform, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_aliasdata_expand, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obatomclassdata, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomclassdata_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomclassdata_add, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomclassdata_hasclass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomclassdata_getclass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomclassdata_getclassstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomclassdata_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_c_default, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_findtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_setbit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_getbit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_fold, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_getfingerprint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_flags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_setflags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_describebits, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_tanimoto, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_getbitsperint, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obfingerprint_findfingerprint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_headerlength_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_headerlength_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_nentries_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_nentries_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_words_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_words_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_fpid_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_fpid_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_datafilename_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fptindexheader_datafilename_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fptindexheader, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsearch_readindexfile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsearch_readindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsearch_find, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsearch_findmatch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsearch_findsimilar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsearch_getfingerprint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsearch_getindexheader, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fastsearch, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fastsearchindexer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fastsearchindexer_add, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_c_default, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obdescriptor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_findtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_predict, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_predictandsave, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_getstringvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_compare, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_display, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_order, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_filtercompare, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_addproperties, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_deleteproperties, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_getvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obdescriptor_getidentifier, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_linesearchtype, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_a_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_a_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_b_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_b_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_c_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_c_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_d_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_d_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__a_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__a_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__b_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__b_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__c_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__c_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__d_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__d_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__ipar_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__ipar_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__dpar_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter__dpar_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffparameter_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obffparameter, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_energy_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_energy_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_a_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_a_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_b_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_b_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_idx_a_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_idx_a_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_idx_b_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_idx_b_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_pos_a_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_pos_a_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_pos_b_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_pos_b_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_force_a_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_force_a_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_force_b_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_force_b_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation2_setuppointers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obffcalculation2, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation3_c_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation3_c_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation3_idx_c_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation3_idx_c_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation3_pos_c_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation3_pos_c_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation3_force_c_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation3_force_c_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obffcalculation3, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation4_d_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation4_d_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation4_idx_d_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation4_idx_d_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation4_pos_d_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation4_pos_d_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation4_force_d_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffcalculation4_force_d_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obffcalculation4, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_factor_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_factor_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_constraint_value_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_constraint_value_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_rab0_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_rab0_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_rbc0_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_rbc0_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_type_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_type_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_ia_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_ia_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_ib_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_ib_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_ic_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_ic_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_id_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_id_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_a_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_a_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_b_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_b_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_c_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_c_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_d_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_d_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_grada_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_grada_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_gradb_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_gradb_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_gradc_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_gradc_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_gradd_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_gradd_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obffconstraint, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraint_getgradient, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obffconstraints, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getconstraintenergy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getgradient, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_setup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_setfactor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_addignore, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_addatomconstraint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_addatomxconstraint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_addatomyconstraint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_addatomzconstraint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_adddistanceconstraint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_addangleconstraint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_addtorsionconstraint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_deleteconstraint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getfactor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getconstrainttype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getconstraintvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getconstraintatoma, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getconstraintatomb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getconstraintatomc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getconstraintatomd, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_isignored, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_isfixed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_isxfixed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_isyfixed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_iszfixed, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getignoredbitvec, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obffconstraints_getfixedbitvec, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_c_default, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_findtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_makenewinstance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_findforcefield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setparameterfile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getunit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_hasanalyticalgradients, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_parseparamfile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_settypes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setformalcharges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setpartialcharges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setupcalculations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setuppointers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_issetupneeded, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getatomtypes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getpartialcharges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getcoordinates, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_updatecoordinates, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getconformers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_updateconformers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setcoordinates, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setconformers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getgrid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_addintragroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_addintergroup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_addintergroups, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_cleargroups, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_hasgroups, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_enablecutoff, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_iscutoffenabled, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setvdwcutoff, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getvdwcutoff, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setelectrostaticcutoff, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getelectrostaticcutoff, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setupdatefrequency, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getupdatefrequency, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_updatepairssimple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getnumpairs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getnumelectrostaticpairs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getnumvdwpairs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_enableallpairs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_energy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_e_bond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_e_angle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_e_strbnd, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_e_torsion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_e_oop, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_e_vdw, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_e_electrostatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_printtypes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_printformalcharges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_printpartialcharges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_printvelocities, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setlogfile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setloglevel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getloglevel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_obfflog, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_distancegeometry, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_systematicrotorsearch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_systematicrotorsearchinitialize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_systematicrotorsearchnextconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_randomrotorsearch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_randomrotorsearchinitialize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_randomrotorsearchnextconformer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_weightedrotorsearch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_fastrotorsearch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setlinesearchtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getlinesearchtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_linesearch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_newton2numlinesearch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_linesearchtakestep, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_steepestdescent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_steepestdescentinitialize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_steepestdescenttakensteps, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_conjugategradients, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_conjugategradientsinitialize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_conjugategradientstakensteps, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_generatevelocities, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_correctvelocities, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_moleculardynamicstakensteps, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_getconstraints, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setconstraints, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setfixatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_unsetfixatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setignoreatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_unsetignoreatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_ignorecalculation, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_detectexplosion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_validatelinesearch, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_validatesteepestdescent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_validateconjugategradients, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_validate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_validategradients, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_validategradienterror, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorbondderivative, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectordistancederivative, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorlengthderivative, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectoranglederivative, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectoroopderivative, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectortorsionderivative, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorsubtract, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectoradd, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectordivide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectormultiply, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorselfmultiply, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectornormalize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorcopy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectordistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectortorsion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectoroop, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorclear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectordot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_vectorcross, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_printvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setlogtostdout, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obforcefield_setlogtostderr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obbuilder, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_build, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_setkeeprings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_unsetkeeprings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_loadfragments, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_getnewbondvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_connect, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_swap, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_correctstereobonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_correctstereoatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_isspiroatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_getfragment, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbuilder_addnbrs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obop_c_default, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obop_findtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obop_c_do, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obop_workswith, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obop_processvec, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obop_opoptions, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obop_doops, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchargemodel_c_default, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obchargemodel, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchargemodel_findtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchargemodel_computecharges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchargemodel_getformalcharges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchargemodel_getpartialcharges, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obchargemodel_getdipolemoment, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obgraphsym, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgraphsym_nosymmetryclass_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgraphsym_getsymmetry, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obgraphsym_clearsymmetry, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obisomorphismmapper_getinstance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obisomorphismmapper_mapfirst, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obisomorphismmapper_mapunique, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obisomorphismmapper_mapall, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obisomorphismmapper_mapgeneric, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obisomorphismmapper_settimeout, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_mapsto, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_findautomorphisms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obqueryatom, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obqueryatom_getindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obqueryatom_getbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obqueryatom_getnbrs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obqueryatom_matches, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obquerybond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquerybond_getindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquerybond_getbeginatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquerybond_getendatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquerybond_matches, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquery_numatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquery_numbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquery_getatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquery_getbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquery_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquery_addatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obquery_addbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obquery, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_compilemoleculequery, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_compilesmilesquery, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_canonicallabels, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereo_makerefs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereo_containssamerefs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereo_containsref, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereo_numinversions, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereo_permutate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereo_permutated, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obstereo, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obstereounit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereounit_type_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereounit_type_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereounit_id_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereounit_id_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereounit_para_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereounit_para_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereobase_getmolecule, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereobase_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereobase_setspecified, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereobase_isspecified, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obstereofacade, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_numtetrahedralstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_hastetrahedralstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_gettetrahedralstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_numcistransstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_hascistransstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_getcistransstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_numsquareplanarstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_hassquareplanarstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obstereofacade_getsquareplanarstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_perceivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stereofrom2d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stereofrom3d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stereofrom0d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tetrahedralfrom3d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tetrahedralfrom2d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tetrahedralfrom0d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_cistransfrom3d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_cistransfrom2d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tetstereotowedgehash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_getunspecifiedcistrans, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_stereoreftoimplicit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_implicitreftostereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_cistransfrom0d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_findstereogenicunits, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obbitvec, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_setbiton, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_setbitoff, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_setrangeon, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_setrangeoff, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_fold, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_firstbit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_nextbit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_endbit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_getsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_countbits, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_c_empty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_isempty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_resize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_resizewords, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_bitisset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_bitison, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_fromvecint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_fromstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_tovecint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_negate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_getwords, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obbitvec_add, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tanimoto, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrotorrule, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrule_isvalid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrule_getreferenceatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrule_setdelta, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrule_getdelta, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrule_gettorsionvals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrule_getsmartsstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrule_getsmartspattern, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrotorrules, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrules_setfilename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrules_getrotorincrements, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorrules_quiet, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrotor, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setrings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setdihedralatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setrotatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_settorsionvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setfixedbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_settoangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_precompute, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_precalc, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getdihedralatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_gettorsionvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getfixedbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_calctorsion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_calcbondlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_begintorincrement, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_endtorincrement, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_removesymtorsionvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setdelta, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getdelta, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getfixedatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setfixedatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getevalatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setevalatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getrotatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_getresolution, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotor_setnumcoords, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrotorlist, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_isfixedbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_hasfixedbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_removesymvals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_hasringrotors, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_setup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_setfixedbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_init, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_setquiet, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_setrotatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_findrotors, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_setevalatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_assigntorvals, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_beginrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_nextrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_beginrotors, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_endrotors, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_identifyevalatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_setfixatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_hasfixedatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_ignoresymmetryremoval, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorlist_setrotatomsbyfix, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_rotor_digit, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_rotor_digit_set_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_rotor_digit_set_state, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_rotor_digit_get_state, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_rotor_digit_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_rotor_digit_next, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrotorkeys, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorkeys_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorkeys_numkeys, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorkeys_addrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorkeys_next, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotorkeys_getkey, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obrotamerlist, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_setup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_numrotors, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_numrotamers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_addrotamer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_addrotamers, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_getreferencearray, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_beginrotamer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_endrotamer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_createconformerlist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_expandconformerlist, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_setcurrentcoordinates, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_setbasecoordinatesets, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_numbasecoordinatesets, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_getbasecoordinateset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obrotamerlist_numatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obspectrophore, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_setresolution, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_setaccuracy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_setstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_setnormalization, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_getaccuracy, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_getresolution, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_getstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_getnormalization, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obspectrophore_getspectrophore, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmolatomiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_duplicate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_sethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_incrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_decrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setclockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setanticlockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setpositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_unsetstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_setchiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_clearcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getatomicmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getexactmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getcoordinateidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getcidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_gethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_gethvyvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getheterovalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_gety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_x, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_y, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_z, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getcoordinate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getnewbondvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getnextatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_beginbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_endbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_beginbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_nextbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_beginnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_nextnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_newresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_addresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_deleteresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_addbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_insertbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_deletebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_clearbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_htomethyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_sethybandgeom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_forcenoh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasnohforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_forceimplh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasimplhforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_countfreeoxygens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_countfreesulfurs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_implicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_explicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_memberofringcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_memberofringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_countringbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_smallestbondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_averagebondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_bosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_kbosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_lewisacidbasecounts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ishetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ishydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_iscarbon, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isnitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_issulfur, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isphosphorus, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isinringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isheteroatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isnotcorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isconnected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isonethree, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isonefour, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_iscarboxyloxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isphosphateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_issulfateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isnitrooxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isamidenitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ispolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isnonpolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isaromaticnoxide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ischiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isaxial, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isclockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isanticlockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ispositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_isnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_haschiralityspecified, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_haschiralvolume, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ishbondacceptor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ishbondacceptorsimple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ishbonddonor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ishbonddonorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_ismetal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasalphabetaunsat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasbondoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_countbondsoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_highestbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasnonsinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hassinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasdoublebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasaromaticbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_matchessmarts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomiter_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmolatomdfsiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_next, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_duplicate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_sethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_incrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_decrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setclockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setanticlockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setpositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_unsetstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_setchiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_clearcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getatomicmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getexactmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getcoordinateidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getcidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_gethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_gethvyvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getheterovalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_gety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_x, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_y, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_z, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getcoordinate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getnewbondvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getnextatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_beginbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_endbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_beginbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_nextbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_beginnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_nextnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_newresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_addresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_deleteresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_addbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_insertbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_deletebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_clearbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_htomethyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_sethybandgeom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_forcenoh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasnohforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_forceimplh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasimplhforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_countfreeoxygens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_countfreesulfurs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_implicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_explicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_memberofringcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_memberofringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_countringbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_smallestbondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_averagebondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_bosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_kbosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_lewisacidbasecounts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ishetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ishydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_iscarbon, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isnitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_issulfur, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isphosphorus, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isinringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isheteroatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isnotcorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isconnected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isonethree, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isonefour, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_iscarboxyloxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isphosphateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_issulfateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isnitrooxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isamidenitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ispolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isnonpolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isaromaticnoxide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ischiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isaxial, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isclockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isanticlockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ispositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_isnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_haschiralityspecified, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_haschiralvolume, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ishbondacceptor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ishbondacceptorsimple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ishbonddonor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ishbonddonorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_ismetal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasalphabetaunsat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasbondoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_countbondsoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_highestbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasnonsinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hassinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasdoublebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasaromaticbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_matchessmarts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatomdfsiter_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmolatombfsiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_currentdepth, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_duplicate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_sethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_incrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_decrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setclockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setanticlockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setpositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_unsetstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_setchiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_clearcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getatomicmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getexactmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getcoordinateidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getcidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_gethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_gethvyvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getheterovalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_gety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_x, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_y, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_z, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getcoordinate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getnewbondvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getnextatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_beginbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_endbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_beginbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_nextbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_beginnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_nextnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_newresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_addresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_deleteresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_addbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_insertbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_deletebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_clearbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_htomethyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_sethybandgeom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_forcenoh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasnohforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_forceimplh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasimplhforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_countfreeoxygens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_countfreesulfurs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_implicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_explicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_memberofringcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_memberofringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_countringbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_smallestbondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_averagebondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_bosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_kbosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_lewisacidbasecounts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ishetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ishydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_iscarbon, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isnitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_issulfur, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isphosphorus, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isinringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isheteroatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isnotcorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isconnected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isonethree, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isonefour, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_iscarboxyloxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isphosphateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_issulfateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isnitrooxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isamidenitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ispolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isnonpolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isaromaticnoxide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ischiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isaxial, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isclockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isanticlockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ispositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_isnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_haschiralityspecified, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_haschiralvolume, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ishbondacceptor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ishbondacceptorsimple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ishbonddonor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ishbonddonorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_ismetal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasalphabetaunsat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasbondoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_countbondsoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_highestbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasnonsinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hassinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasdoublebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasaromaticbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_matchessmarts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolatombfsiter_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmolbondbfsiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_currentdepth, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setbegin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setend, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setksingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setkdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setktriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setwedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_sethash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setwedgeorhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_setclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_unsethash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_unsetwedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_unsetup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_unsetdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_unsetkekule, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getflags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getbeginatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getendatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getbeginatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getendatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getequiblength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getnbratomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_findsmallestring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isprimaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_issecondaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_istertiaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isester, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_iscarbonyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_issingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_istriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isksingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_iskdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isktriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_iswedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_ishash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_iswedgeorhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_iscisortrans, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_isdoublebondgeometry, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbondbfsiter_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmolbonditer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setbegin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setend, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setksingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setkdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setktriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setwedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_sethash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setwedgeorhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_setclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_unsethash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_unsetwedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_unsetup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_unsetdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_unsetkekule, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getflags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getbeginatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getendatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getbeginatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getendatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getequiblength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getnbratomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_findsmallestring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isprimaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_issecondaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_istertiaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isester, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_iscarbonyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_issingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_istriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isksingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_iskdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isktriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_iswedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_ishash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_iswedgeorhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_iscisortrans, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_isdoublebondgeometry, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolbonditer_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obatomatomiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_duplicate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_sethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_incrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_decrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setclockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setanticlockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setpositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_unsetstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_setchiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_clearcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getatomicmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getexactmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getcoordinateidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getcidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_gethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_gethvyvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getheterovalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_gety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_x, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_y, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_z, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getcoordinate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getnewbondvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getnextatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_beginbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_endbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_beginbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_nextbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_beginnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_nextnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_newresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_addresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_deleteresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_addbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_insertbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_deletebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_clearbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_htomethyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_sethybandgeom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_forcenoh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasnohforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_forceimplh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasimplhforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_countfreeoxygens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_countfreesulfurs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_implicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_explicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_memberofringcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_memberofringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_countringbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_smallestbondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_averagebondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_bosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_kbosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_lewisacidbasecounts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ishetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ishydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_iscarbon, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isnitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_issulfur, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isphosphorus, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isinringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isheteroatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isnotcorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isconnected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isonethree, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isonefour, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_iscarboxyloxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isphosphateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_issulfateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isnitrooxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isamidenitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ispolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isnonpolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isaromaticnoxide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ischiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isaxial, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isclockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isanticlockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ispositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_isnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_haschiralityspecified, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_haschiralvolume, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ishbondacceptor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ishbondacceptorsimple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ishbonddonor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ishbonddonorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_ismetal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasalphabetaunsat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasbondoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_countbondsoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_highestbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasnonsinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hassinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasdoublebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasaromaticbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_matchessmarts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatomatomiter_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obatombonditer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setbegin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setend, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setksingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setkdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setktriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setwedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_sethash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setwedgeorhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_setclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_unsethash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_unsetwedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_unsetup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_unsetdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_unsetkekule, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getbo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getflags, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getbeginatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getendatomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getbeginatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getendatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getequiblength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getnbratomidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_findsmallestring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isrotor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isprimaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_issecondaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_istertiaryamide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isester, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_iscarbonyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_issingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_istriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isksingle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_iskdouble, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isktriple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isclosure, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isdown, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_iswedge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_ishash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_iswedgeorhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_iscisortrans, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_isdoublebondgeometry, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obatombonditer_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obresidueiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_addatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_insertatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_removeatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_setname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_setnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_setchain, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_setchainnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_setinsertioncode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_setatomid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_sethetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_setserialnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getnumstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getnumatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getchain, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getchainnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getreskey, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getatomid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getserialnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getinsertioncode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getaminoacidproperty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getatomproperty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getresidueproperty, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_ishetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_isresiduetype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_beginatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_endatoms, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_beginatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_nextatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueiter_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obresidueatomiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_visit_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_visit_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_duplicate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_sethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_incrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_decrementimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_unsetaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setclockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setanticlockwisestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setpositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_unsetstereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_setchiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_clearcoordptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getformalcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getatomicnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getisotope, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getspinmultiplicity, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getatomicmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getexactmass, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getcoordinateidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getcidx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_gethyb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getimplicitvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_gethvyvalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getheterovalence, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getx, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_gety, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getz, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_x, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_y, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_z, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getcoordinate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getpartialcharge, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getnewbondvector, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getnextatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_beginbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_endbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_beginbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_nextbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_beginnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_nextnbratom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getdistance, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_newresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_addresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_deleteresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_addbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_insertbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_deletebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_clearbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_htomethyl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_sethybandgeom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_forcenoh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasnohforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_forceimplh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasimplhforced, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_countfreeoxygens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_countfreesulfurs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_implicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_explicithydrogencount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_memberofringcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_memberofringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_countringbonds, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_smallestbondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_averagebondangle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_bosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_kbosum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_lewisacidbasecounts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasresidue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ishetatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ishydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_iscarbon, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isnitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_issulfur, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isphosphorus, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isinringsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isheteroatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isnotcorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isconnected, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isonethree, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isonefour, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_iscarboxyloxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isphosphateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_issulfateoxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isnitrooxygen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isamidenitrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ispolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isnonpolarhydrogen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isaromaticnoxide, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ischiral, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isaxial, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isclockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isanticlockwise, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ispositivestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_isnegativestereo, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_haschiralityspecified, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_haschiralvolume, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ishbondacceptor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ishbondacceptorsimple, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ishbonddonor, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ishbonddonorh, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_ismetal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasalphabetaunsat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasbondoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_countbondsoforder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_highestbondorder, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasnonsinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hassinglebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasdoublebond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasaromaticbond, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_matchessmarts, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_dotransformations, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_classdescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_gettitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_settitle, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_hasdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_deletedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_clonedata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_datasize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getdata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_getalldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_begindata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obresidueatomiter_enddata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmolangleiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolangleiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmoltorsioniter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmoltorsioniter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmolpairiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolpairiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_obmolringiter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter___deref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter___ref__, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_ring_id_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_ring_id_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter__path_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter__path_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter__pathset_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter__pathset_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_pathsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_isaromatic, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_gettype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_getrootatom, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_ismember, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_isinring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_setparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_getparent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_obmolringiter_findcenterandnormal, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry openbabel_functions[] = {
 SWIG_ZEND_NAMED_FE(new_vectorint,_wrap_new_vectorInt,swig_arginfo_new_vectorint)
 SWIG_ZEND_NAMED_FE(vectorint_size,_wrap_vectorInt_size,swig_arginfo_vectorint_size)
 SWIG_ZEND_NAMED_FE(vectorint_is_empty,_wrap_vectorInt_is_empty,swig_arginfo_vectorint_is_empty)
 SWIG_ZEND_NAMED_FE(vectorint_get,_wrap_vectorInt_get,swig_arginfo_vectorint_get)
 SWIG_ZEND_NAMED_FE(vectorint_set,_wrap_vectorInt_set,swig_arginfo_vectorint_set)
 SWIG_ZEND_NAMED_FE(new_vectorunsignedint,_wrap_new_vectorUnsignedInt,swig_arginfo_new_vectorunsignedint)
 SWIG_ZEND_NAMED_FE(vectorunsignedint_size,_wrap_vectorUnsignedInt_size,swig_arginfo_vectorunsignedint_size)
 SWIG_ZEND_NAMED_FE(vectorunsignedint_is_empty,_wrap_vectorUnsignedInt_is_empty,swig_arginfo_vectorunsignedint_is_empty)
 SWIG_ZEND_NAMED_FE(vectorunsignedint_get,_wrap_vectorUnsignedInt_get,swig_arginfo_vectorunsignedint_get)
 SWIG_ZEND_NAMED_FE(vectorunsignedint_set,_wrap_vectorUnsignedInt_set,swig_arginfo_vectorunsignedint_set)
 SWIG_ZEND_NAMED_FE(new_vectorvint,_wrap_new_vectorvInt,swig_arginfo_new_vectorvint)
 SWIG_ZEND_NAMED_FE(vectorvint_size,_wrap_vectorvInt_size,swig_arginfo_vectorvint_size)
 SWIG_ZEND_NAMED_FE(vectorvint_is_empty,_wrap_vectorvInt_is_empty,swig_arginfo_vectorvint_is_empty)
 SWIG_ZEND_NAMED_FE(vectorvint_get,_wrap_vectorvInt_get,swig_arginfo_vectorvint_get)
 SWIG_ZEND_NAMED_FE(vectorvint_set,_wrap_vectorvInt_set,swig_arginfo_vectorvint_set)
 SWIG_ZEND_NAMED_FE(new_vectordouble,_wrap_new_vectorDouble,swig_arginfo_new_vectordouble)
 SWIG_ZEND_NAMED_FE(vectordouble_size,_wrap_vectorDouble_size,swig_arginfo_vectordouble_size)
 SWIG_ZEND_NAMED_FE(vectordouble_is_empty,_wrap_vectorDouble_is_empty,swig_arginfo_vectordouble_is_empty)
 SWIG_ZEND_NAMED_FE(vectordouble_get,_wrap_vectorDouble_get,swig_arginfo_vectordouble_get)
 SWIG_ZEND_NAMED_FE(vectordouble_set,_wrap_vectorDouble_set,swig_arginfo_vectordouble_set)
 SWIG_ZEND_NAMED_FE(new_vectorstring,_wrap_new_vectorString,swig_arginfo_new_vectorstring)
 SWIG_ZEND_NAMED_FE(vectorstring_size,_wrap_vectorString_size,swig_arginfo_vectorstring_size)
 SWIG_ZEND_NAMED_FE(vectorstring_is_empty,_wrap_vectorString_is_empty,swig_arginfo_vectorstring_is_empty)
 SWIG_ZEND_NAMED_FE(vectorstring_get,_wrap_vectorString_get,swig_arginfo_vectorstring_get)
 SWIG_ZEND_NAMED_FE(vectorstring_set,_wrap_vectorString_set,swig_arginfo_vectorstring_set)
 SWIG_ZEND_NAMED_FE(new_vectorvector3,_wrap_new_vectorVector3,swig_arginfo_new_vectorvector3)
 SWIG_ZEND_NAMED_FE(vectorvector3_size,_wrap_vectorVector3_size,swig_arginfo_vectorvector3_size)
 SWIG_ZEND_NAMED_FE(vectorvector3_is_empty,_wrap_vectorVector3_is_empty,swig_arginfo_vectorvector3_is_empty)
 SWIG_ZEND_NAMED_FE(vectorvector3_get,_wrap_vectorVector3_get,swig_arginfo_vectorvector3_get)
 SWIG_ZEND_NAMED_FE(vectorvector3_set,_wrap_vectorVector3_set,swig_arginfo_vectorvector3_set)
 SWIG_ZEND_NAMED_FE(new_vectorvvector3,_wrap_new_vectorvVector3,swig_arginfo_new_vectorvvector3)
 SWIG_ZEND_NAMED_FE(vectorvvector3_size,_wrap_vectorvVector3_size,swig_arginfo_vectorvvector3_size)
 SWIG_ZEND_NAMED_FE(vectorvvector3_is_empty,_wrap_vectorvVector3_is_empty,swig_arginfo_vectorvvector3_is_empty)
 SWIG_ZEND_NAMED_FE(vectorvvector3_get,_wrap_vectorvVector3_get,swig_arginfo_vectorvvector3_get)
 SWIG_ZEND_NAMED_FE(vectorvvector3_set,_wrap_vectorvVector3_set,swig_arginfo_vectorvvector3_set)
 SWIG_ZEND_NAMED_FE(new_vectorobmol,_wrap_new_vectorOBMol,swig_arginfo_new_vectorobmol)
 SWIG_ZEND_NAMED_FE(vectorobmol_size,_wrap_vectorOBMol_size,swig_arginfo_vectorobmol_size)
 SWIG_ZEND_NAMED_FE(vectorobmol_is_empty,_wrap_vectorOBMol_is_empty,swig_arginfo_vectorobmol_is_empty)
 SWIG_ZEND_NAMED_FE(vectorobmol_get,_wrap_vectorOBMol_get,swig_arginfo_vectorobmol_get)
 SWIG_ZEND_NAMED_FE(vectorobmol_set,_wrap_vectorOBMol_set,swig_arginfo_vectorobmol_set)
 SWIG_ZEND_NAMED_FE(new_vectorobbond,_wrap_new_vectorOBBond,swig_arginfo_new_vectorobbond)
 SWIG_ZEND_NAMED_FE(vectorobbond_size,_wrap_vectorOBBond_size,swig_arginfo_vectorobbond_size)
 SWIG_ZEND_NAMED_FE(vectorobbond_is_empty,_wrap_vectorOBBond_is_empty,swig_arginfo_vectorobbond_is_empty)
 SWIG_ZEND_NAMED_FE(vectorobbond_get,_wrap_vectorOBBond_get,swig_arginfo_vectorobbond_get)
 SWIG_ZEND_NAMED_FE(vectorobbond_set,_wrap_vectorOBBond_set,swig_arginfo_vectorobbond_set)
 SWIG_ZEND_NAMED_FE(new_vectorobresidue,_wrap_new_vectorOBResidue,swig_arginfo_new_vectorobresidue)
 SWIG_ZEND_NAMED_FE(vectorobresidue_size,_wrap_vectorOBResidue_size,swig_arginfo_vectorobresidue_size)
 SWIG_ZEND_NAMED_FE(vectorobresidue_is_empty,_wrap_vectorOBResidue_is_empty,swig_arginfo_vectorobresidue_is_empty)
 SWIG_ZEND_NAMED_FE(vectorobresidue_get,_wrap_vectorOBResidue_get,swig_arginfo_vectorobresidue_get)
 SWIG_ZEND_NAMED_FE(vectorobresidue_set,_wrap_vectorOBResidue_set,swig_arginfo_vectorobresidue_set)
 SWIG_ZEND_NAMED_FE(new_vectorobring,_wrap_new_vectorOBRing,swig_arginfo_new_vectorobring)
 SWIG_ZEND_NAMED_FE(vectorobring_size,_wrap_vectorOBRing_size,swig_arginfo_vectorobring_size)
 SWIG_ZEND_NAMED_FE(vectorobring_is_empty,_wrap_vectorOBRing_is_empty,swig_arginfo_vectorobring_is_empty)
 SWIG_ZEND_NAMED_FE(vectorobring_get,_wrap_vectorOBRing_get,swig_arginfo_vectorobring_get)
 SWIG_ZEND_NAMED_FE(vectorobring_set,_wrap_vectorOBRing_set,swig_arginfo_vectorobring_set)
 SWIG_ZEND_NAMED_FE(new_vectorpobring,_wrap_new_vectorpOBRing,swig_arginfo_new_vectorpobring)
 SWIG_ZEND_NAMED_FE(vectorpobring_size,_wrap_vectorpOBRing_size,swig_arginfo_vectorpobring_size)
 SWIG_ZEND_NAMED_FE(vectorpobring_is_empty,_wrap_vectorpOBRing_is_empty,swig_arginfo_vectorpobring_is_empty)
 SWIG_ZEND_NAMED_FE(vectorpobring_get,_wrap_vectorpOBRing_get,swig_arginfo_vectorpobring_get)
 SWIG_ZEND_NAMED_FE(vectorpobring_set,_wrap_vectorpOBRing_set,swig_arginfo_vectorpobring_set)
 SWIG_ZEND_NAMED_FE(new_vectorpobgenericdata,_wrap_new_vectorpOBGenericData,swig_arginfo_new_vectorpobgenericdata)
 SWIG_ZEND_NAMED_FE(vectorpobgenericdata_size,_wrap_vectorpOBGenericData_size,swig_arginfo_vectorpobgenericdata_size)
 SWIG_ZEND_NAMED_FE(vectorpobgenericdata_is_empty,_wrap_vectorpOBGenericData_is_empty,swig_arginfo_vectorpobgenericdata_is_empty)
 SWIG_ZEND_NAMED_FE(vectorpobgenericdata_get,_wrap_vectorpOBGenericData_get,swig_arginfo_vectorpobgenericdata_get)
 SWIG_ZEND_NAMED_FE(vectorpobgenericdata_set,_wrap_vectorpOBGenericData_set,swig_arginfo_vectorpobgenericdata_set)
 SWIG_ZEND_NAMED_FE(new_vectorpobinternalcoord,_wrap_new_vectorpOBInternalCoord,swig_arginfo_new_vectorpobinternalcoord)
 SWIG_ZEND_NAMED_FE(vectorpobinternalcoord_size,_wrap_vectorpOBInternalCoord_size,swig_arginfo_vectorpobinternalcoord_size)
 SWIG_ZEND_NAMED_FE(vectorpobinternalcoord_is_empty,_wrap_vectorpOBInternalCoord_is_empty,swig_arginfo_vectorpobinternalcoord_is_empty)
 SWIG_ZEND_NAMED_FE(vectorpobinternalcoord_get,_wrap_vectorpOBInternalCoord_get,swig_arginfo_vectorpobinternalcoord_get)
 SWIG_ZEND_NAMED_FE(vectorpobinternalcoord_set,_wrap_vectorpOBInternalCoord_set,swig_arginfo_vectorpobinternalcoord_set)
 SWIG_ZEND_NAMED_FE(new_pairuintuint,_wrap_new_pairUIntUInt,swig_arginfo_new_pairuintuint)
 SWIG_ZEND_NAMED_FE(pairuintuint_first_set,_wrap_pairUIntUInt_first_set,swig_arginfo_pairuintuint_first_set)
 SWIG_ZEND_NAMED_FE(pairuintuint_first_get,_wrap_pairUIntUInt_first_get,swig_arginfo_pairuintuint_first_get)
 SWIG_ZEND_NAMED_FE(pairuintuint_second_set,_wrap_pairUIntUInt_second_set,swig_arginfo_pairuintuint_second_set)
 SWIG_ZEND_NAMED_FE(pairuintuint_second_get,_wrap_pairUIntUInt_second_get,swig_arginfo_pairuintuint_second_get)
 SWIG_ZEND_NAMED_FE(new_vpairuintuint,_wrap_new_vpairUIntUInt,swig_arginfo_new_vpairuintuint)
 SWIG_ZEND_NAMED_FE(vpairuintuint_size,_wrap_vpairUIntUInt_size,swig_arginfo_vpairuintuint_size)
 SWIG_ZEND_NAMED_FE(vpairuintuint_is_empty,_wrap_vpairUIntUInt_is_empty,swig_arginfo_vpairuintuint_is_empty)
 SWIG_ZEND_NAMED_FE(vpairuintuint_get,_wrap_vpairUIntUInt_get,swig_arginfo_vpairuintuint_get)
 SWIG_ZEND_NAMED_FE(vpairuintuint_set,_wrap_vpairUIntUInt_set,swig_arginfo_vpairuintuint_set)
 SWIG_ZEND_NAMED_FE(new_vvpairuintuint,_wrap_new_vvpairUIntUInt,swig_arginfo_new_vvpairuintuint)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_size,_wrap_vvpairUIntUInt_size,swig_arginfo_vvpairuintuint_size)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_capacity,_wrap_vvpairUIntUInt_capacity,swig_arginfo_vvpairuintuint_capacity)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_reserve,_wrap_vvpairUIntUInt_reserve,swig_arginfo_vvpairuintuint_reserve)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_clear,_wrap_vvpairUIntUInt_clear,swig_arginfo_vvpairuintuint_clear)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_push,_wrap_vvpairUIntUInt_push,swig_arginfo_vvpairuintuint_push)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_is_empty,_wrap_vvpairUIntUInt_is_empty,swig_arginfo_vvpairuintuint_is_empty)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_pop,_wrap_vvpairUIntUInt_pop,swig_arginfo_vvpairuintuint_pop)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_get,_wrap_vvpairUIntUInt_get,swig_arginfo_vvpairuintuint_get)
 SWIG_ZEND_NAMED_FE(vvpairuintuint_set,_wrap_vvpairUIntUInt_set,swig_arginfo_vvpairuintuint_set)
 SWIG_ZEND_NAMED_FE(toaliasdata,_wrap_toAliasData,swig_arginfo_toaliasdata)
 SWIG_ZEND_NAMED_FE(toangledata,_wrap_toAngleData,swig_arginfo_toangledata)
 SWIG_ZEND_NAMED_FE(toatomclassdata,_wrap_toAtomClassData,swig_arginfo_toatomclassdata)
 SWIG_ZEND_NAMED_FE(tochiraldata,_wrap_toChiralData,swig_arginfo_tochiraldata)
 SWIG_ZEND_NAMED_FE(tocommentdata,_wrap_toCommentData,swig_arginfo_tocommentdata)
 SWIG_ZEND_NAMED_FE(toconformerdata,_wrap_toConformerData,swig_arginfo_toconformerdata)
 SWIG_ZEND_NAMED_FE(toexternalbonddata,_wrap_toExternalBondData,swig_arginfo_toexternalbonddata)
 SWIG_ZEND_NAMED_FE(togriddata,_wrap_toGridData,swig_arginfo_togriddata)
 SWIG_ZEND_NAMED_FE(tomatrixdata,_wrap_toMatrixData,swig_arginfo_tomatrixdata)
 SWIG_ZEND_NAMED_FE(tonasathermodata,_wrap_toNasaThermoData,swig_arginfo_tonasathermodata)
 SWIG_ZEND_NAMED_FE(topairdata,_wrap_toPairData,swig_arginfo_topairdata)
 SWIG_ZEND_NAMED_FE(toratedata,_wrap_toRateData,swig_arginfo_toratedata)
 SWIG_ZEND_NAMED_FE(torotamerlist,_wrap_toRotamerList,swig_arginfo_torotamerlist)
 SWIG_ZEND_NAMED_FE(torotationdata,_wrap_toRotationData,swig_arginfo_torotationdata)
 SWIG_ZEND_NAMED_FE(toserialnums,_wrap_toSerialNums,swig_arginfo_toserialnums)
 SWIG_ZEND_NAMED_FE(tosetdata,_wrap_toSetData,swig_arginfo_tosetdata)
 SWIG_ZEND_NAMED_FE(tosymmetrydata,_wrap_toSymmetryData,swig_arginfo_tosymmetrydata)
 SWIG_ZEND_NAMED_FE(totorsiondata,_wrap_toTorsionData,swig_arginfo_totorsiondata)
 SWIG_ZEND_NAMED_FE(tounitcell,_wrap_toUnitCell,swig_arginfo_tounitcell)
 SWIG_ZEND_NAMED_FE(tovectordata,_wrap_toVectorData,swig_arginfo_tovectordata)
 SWIG_ZEND_NAMED_FE(tovibrationdata,_wrap_toVibrationData,swig_arginfo_tovibrationdata)
 SWIG_ZEND_NAMED_FE(tovirtualbond,_wrap_toVirtualBond,swig_arginfo_tovirtualbond)
 SWIG_ZEND_NAMED_FE(new_obglobaldatabase,_wrap_new_OBGlobalDataBase,swig_arginfo_new_obglobaldatabase)
 SWIG_ZEND_NAMED_FE(obglobaldatabase_init,_wrap_OBGlobalDataBase_Init,swig_arginfo_obglobaldatabase_init)
 SWIG_ZEND_NAMED_FE(obglobaldatabase_getsize,_wrap_OBGlobalDataBase_GetSize,swig_arginfo_obglobaldatabase_getsize)
 SWIG_ZEND_NAMED_FE(obglobaldatabase_setreaddirectory,_wrap_OBGlobalDataBase_SetReadDirectory,swig_arginfo_obglobaldatabase_setreaddirectory)
 SWIG_ZEND_NAMED_FE(obglobaldatabase_setenvironmentvariable,_wrap_OBGlobalDataBase_SetEnvironmentVariable,swig_arginfo_obglobaldatabase_setenvironmentvariable)
 SWIG_ZEND_NAMED_FE(obglobaldatabase_parseline,_wrap_OBGlobalDataBase_ParseLine,swig_arginfo_obglobaldatabase_parseline)
 SWIG_ZEND_NAMED_FE(new_obelement,_wrap_new_OBElement,swig_arginfo_new_obelement)
 SWIG_ZEND_NAMED_FE(obelement_getatomicnum,_wrap_OBElement_GetAtomicNum,swig_arginfo_obelement_getatomicnum)
 SWIG_ZEND_NAMED_FE(obelement_getsymbol,_wrap_OBElement_GetSymbol,swig_arginfo_obelement_getsymbol)
 SWIG_ZEND_NAMED_FE(obelement_getcovalentrad,_wrap_OBElement_GetCovalentRad,swig_arginfo_obelement_getcovalentrad)
 SWIG_ZEND_NAMED_FE(obelement_getvdwrad,_wrap_OBElement_GetVdwRad,swig_arginfo_obelement_getvdwrad)
 SWIG_ZEND_NAMED_FE(obelement_getmass,_wrap_OBElement_GetMass,swig_arginfo_obelement_getmass)
 SWIG_ZEND_NAMED_FE(obelement_getmaxbonds,_wrap_OBElement_GetMaxBonds,swig_arginfo_obelement_getmaxbonds)
 SWIG_ZEND_NAMED_FE(obelement_getelectroneg,_wrap_OBElement_GetElectroNeg,swig_arginfo_obelement_getelectroneg)
 SWIG_ZEND_NAMED_FE(obelement_getallredrochowelectroneg,_wrap_OBElement_GetAllredRochowElectroNeg,swig_arginfo_obelement_getallredrochowelectroneg)
 SWIG_ZEND_NAMED_FE(obelement_getionization,_wrap_OBElement_GetIonization,swig_arginfo_obelement_getionization)
 SWIG_ZEND_NAMED_FE(obelement_getelectronaffinity,_wrap_OBElement_GetElectronAffinity,swig_arginfo_obelement_getelectronaffinity)
 SWIG_ZEND_NAMED_FE(obelement_getname,_wrap_OBElement_GetName,swig_arginfo_obelement_getname)
 SWIG_ZEND_NAMED_FE(obelement_getred,_wrap_OBElement_GetRed,swig_arginfo_obelement_getred)
 SWIG_ZEND_NAMED_FE(obelement_getgreen,_wrap_OBElement_GetGreen,swig_arginfo_obelement_getgreen)
 SWIG_ZEND_NAMED_FE(obelement_getblue,_wrap_OBElement_GetBlue,swig_arginfo_obelement_getblue)
 SWIG_ZEND_NAMED_FE(new_obelementtable,_wrap_new_OBElementTable,swig_arginfo_new_obelementtable)
 SWIG_ZEND_NAMED_FE(obelementtable_getnumberofelements,_wrap_OBElementTable_GetNumberOfElements,swig_arginfo_obelementtable_getnumberofelements)
 SWIG_ZEND_NAMED_FE(obelementtable_getatomicnum,_wrap_OBElementTable_GetAtomicNum,swig_arginfo_obelementtable_getatomicnum)
 SWIG_ZEND_NAMED_FE(obelementtable_getsymbol,_wrap_OBElementTable_GetSymbol,swig_arginfo_obelementtable_getsymbol)
 SWIG_ZEND_NAMED_FE(obelementtable_getvdwrad,_wrap_OBElementTable_GetVdwRad,swig_arginfo_obelementtable_getvdwrad)
 SWIG_ZEND_NAMED_FE(obelementtable_getcovalentrad,_wrap_OBElementTable_GetCovalentRad,swig_arginfo_obelementtable_getcovalentrad)
 SWIG_ZEND_NAMED_FE(obelementtable_getmass,_wrap_OBElementTable_GetMass,swig_arginfo_obelementtable_getmass)
 SWIG_ZEND_NAMED_FE(obelementtable_correctedbondrad,_wrap_OBElementTable_CorrectedBondRad,swig_arginfo_obelementtable_correctedbondrad)
 SWIG_ZEND_NAMED_FE(obelementtable_correctedvdwrad,_wrap_OBElementTable_CorrectedVdwRad,swig_arginfo_obelementtable_correctedvdwrad)
 SWIG_ZEND_NAMED_FE(obelementtable_getmaxbonds,_wrap_OBElementTable_GetMaxBonds,swig_arginfo_obelementtable_getmaxbonds)
 SWIG_ZEND_NAMED_FE(obelementtable_getelectroneg,_wrap_OBElementTable_GetElectroNeg,swig_arginfo_obelementtable_getelectroneg)
 SWIG_ZEND_NAMED_FE(obelementtable_getallredrochowelectroneg,_wrap_OBElementTable_GetAllredRochowElectroNeg,swig_arginfo_obelementtable_getallredrochowelectroneg)
 SWIG_ZEND_NAMED_FE(obelementtable_getionization,_wrap_OBElementTable_GetIonization,swig_arginfo_obelementtable_getionization)
 SWIG_ZEND_NAMED_FE(obelementtable_getelectronaffinity,_wrap_OBElementTable_GetElectronAffinity,swig_arginfo_obelementtable_getelectronaffinity)
 SWIG_ZEND_NAMED_FE(obelementtable_getrgb,_wrap_OBElementTable_GetRGB,swig_arginfo_obelementtable_getrgb)
 SWIG_ZEND_NAMED_FE(obelementtable_getname,_wrap_OBElementTable_GetName,swig_arginfo_obelementtable_getname)
 SWIG_ZEND_NAMED_FE(new_obisotopetable,_wrap_new_OBIsotopeTable,swig_arginfo_new_obisotopetable)
 SWIG_ZEND_NAMED_FE(obisotopetable_getexactmass,_wrap_OBIsotopeTable_GetExactMass,swig_arginfo_obisotopetable_getexactmass)
 SWIG_ZEND_NAMED_FE(new_obatomhof,_wrap_new_OBAtomHOF,swig_arginfo_new_obatomhof)
 SWIG_ZEND_NAMED_FE(obatomhof_element,_wrap_OBAtomHOF_Element,swig_arginfo_obatomhof_element)
 SWIG_ZEND_NAMED_FE(obatomhof_charge,_wrap_OBAtomHOF_Charge,swig_arginfo_obatomhof_charge)
 SWIG_ZEND_NAMED_FE(obatomhof_method,_wrap_OBAtomHOF_Method,swig_arginfo_obatomhof_method)
 SWIG_ZEND_NAMED_FE(obatomhof_desc,_wrap_OBAtomHOF_Desc,swig_arginfo_obatomhof_desc)
 SWIG_ZEND_NAMED_FE(obatomhof_t,_wrap_OBAtomHOF_T,swig_arginfo_obatomhof_t)
 SWIG_ZEND_NAMED_FE(obatomhof_value,_wrap_OBAtomHOF_Value,swig_arginfo_obatomhof_value)
 SWIG_ZEND_NAMED_FE(obatomhof_multiplicity,_wrap_OBAtomHOF_Multiplicity,swig_arginfo_obatomhof_multiplicity)
 SWIG_ZEND_NAMED_FE(obatomhof_unit,_wrap_OBAtomHOF_Unit,swig_arginfo_obatomhof_unit)
 SWIG_ZEND_NAMED_FE(new_obatomicheatofformationtable,_wrap_new_OBAtomicHeatOfFormationTable,swig_arginfo_new_obatomicheatofformationtable)
 SWIG_ZEND_NAMED_FE(obatomicheatofformationtable_getheatofformation,_wrap_OBAtomicHeatOfFormationTable_GetHeatOfFormation,swig_arginfo_obatomicheatofformationtable_getheatofformation)
 SWIG_ZEND_NAMED_FE(new_obtypetable,_wrap_new_OBTypeTable,swig_arginfo_new_obtypetable)
 SWIG_ZEND_NAMED_FE(obtypetable_setfromtype,_wrap_OBTypeTable_SetFromType,swig_arginfo_obtypetable_setfromtype)
 SWIG_ZEND_NAMED_FE(obtypetable_settotype,_wrap_OBTypeTable_SetToType,swig_arginfo_obtypetable_settotype)
 SWIG_ZEND_NAMED_FE(obtypetable_translate,_wrap_OBTypeTable_Translate,swig_arginfo_obtypetable_translate)
 SWIG_ZEND_NAMED_FE(obtypetable_getfromtype,_wrap_OBTypeTable_GetFromType,swig_arginfo_obtypetable_getfromtype)
 SWIG_ZEND_NAMED_FE(obtypetable_gettotype,_wrap_OBTypeTable_GetToType,swig_arginfo_obtypetable_gettotype)
 SWIG_ZEND_NAMED_FE(new_obresiduedata,_wrap_new_OBResidueData,swig_arginfo_new_obresiduedata)
 SWIG_ZEND_NAMED_FE(obresiduedata_setresname,_wrap_OBResidueData_SetResName,swig_arginfo_obresiduedata_setresname)
 SWIG_ZEND_NAMED_FE(obresiduedata_lookupbo,_wrap_OBResidueData_LookupBO,swig_arginfo_obresiduedata_lookupbo)
 SWIG_ZEND_NAMED_FE(obresiduedata_lookuptype,_wrap_OBResidueData_LookupType,swig_arginfo_obresiduedata_lookuptype)
 SWIG_ZEND_NAMED_FE(obresiduedata_assignbonds,_wrap_OBResidueData_AssignBonds,swig_arginfo_obresiduedata_assignbonds)
 SWIG_ZEND_NAMED_FE(doubletype_hi_set,_wrap_DoubleType_hi_set,swig_arginfo_doubletype_hi_set)
 SWIG_ZEND_NAMED_FE(doubletype_hi_get,_wrap_DoubleType_hi_get,swig_arginfo_doubletype_hi_get)
 SWIG_ZEND_NAMED_FE(doubletype_lo_set,_wrap_DoubleType_lo_set,swig_arginfo_doubletype_lo_set)
 SWIG_ZEND_NAMED_FE(doubletype_lo_get,_wrap_DoubleType_lo_get,swig_arginfo_doubletype_lo_get)
 SWIG_ZEND_NAMED_FE(new_doubletype,_wrap_new_DoubleType,swig_arginfo_new_doubletype)
 SWIG_ZEND_NAMED_FE(doublemultiply,_wrap_DoubleMultiply,swig_arginfo_doublemultiply)
 SWIG_ZEND_NAMED_FE(doubleadd,_wrap_DoubleAdd,swig_arginfo_doubleadd)
 SWIG_ZEND_NAMED_FE(doublemodulus,_wrap_DoubleModulus,swig_arginfo_doublemodulus)
 SWIG_ZEND_NAMED_FE(new_obrandom,_wrap_new_OBRandom,swig_arginfo_new_obrandom)
 SWIG_ZEND_NAMED_FE(obrandom_seed,_wrap_OBRandom_Seed,swig_arginfo_obrandom_seed)
 SWIG_ZEND_NAMED_FE(obrandom_timeseed,_wrap_OBRandom_TimeSeed,swig_arginfo_obrandom_timeseed)
 SWIG_ZEND_NAMED_FE(obrandom_nextint,_wrap_OBRandom_NextInt,swig_arginfo_obrandom_nextint)
 SWIG_ZEND_NAMED_FE(obrandom_nextfloat,_wrap_OBRandom_NextFloat,swig_arginfo_obrandom_nextfloat)
 SWIG_ZEND_NAMED_FE(obstopwatch_start,_wrap_OBStopwatch_Start,swig_arginfo_obstopwatch_start)
 SWIG_ZEND_NAMED_FE(obstopwatch_lap,_wrap_OBStopwatch_Lap,swig_arginfo_obstopwatch_lap)
 SWIG_ZEND_NAMED_FE(obstopwatch_elapsed,_wrap_OBStopwatch_Elapsed,swig_arginfo_obstopwatch_elapsed)
 SWIG_ZEND_NAMED_FE(new_obstopwatch,_wrap_new_OBStopwatch,swig_arginfo_new_obstopwatch)
 SWIG_ZEND_NAMED_FE(new_obsqrttbl,_wrap_new_OBSqrtTbl,swig_arginfo_new_obsqrttbl)
 SWIG_ZEND_NAMED_FE(obsqrttbl_sqrt,_wrap_OBSqrtTbl_Sqrt,swig_arginfo_obsqrttbl_sqrt)
 SWIG_ZEND_NAMED_FE(obsqrttbl_init,_wrap_OBSqrtTbl_Init,swig_arginfo_obsqrttbl_init)
 SWIG_ZEND_NAMED_FE(rotate_coords,_wrap_rotate_coords,swig_arginfo_rotate_coords)
 SWIG_ZEND_NAMED_FE(calc_rms,_wrap_calc_rms,swig_arginfo_calc_rms)
 SWIG_ZEND_NAMED_FE(new_vector3,_wrap_new_vector3,swig_arginfo_new_vector3)
 SWIG_ZEND_NAMED_FE(vector3_begin,_wrap_vector3_begin,swig_arginfo_vector3_begin)
 SWIG_ZEND_NAMED_FE(vector3_end,_wrap_vector3_end,swig_arginfo_vector3_end)
 SWIG_ZEND_NAMED_FE(vector3_set,_wrap_vector3_Set,swig_arginfo_vector3_set)
 SWIG_ZEND_NAMED_FE(vector3_setx,_wrap_vector3_SetX,swig_arginfo_vector3_setx)
 SWIG_ZEND_NAMED_FE(vector3_sety,_wrap_vector3_SetY,swig_arginfo_vector3_sety)
 SWIG_ZEND_NAMED_FE(vector3_setz,_wrap_vector3_SetZ,swig_arginfo_vector3_setz)
 SWIG_ZEND_NAMED_FE(vector3_getx,_wrap_vector3_GetX,swig_arginfo_vector3_getx)
 SWIG_ZEND_NAMED_FE(vector3_gety,_wrap_vector3_GetY,swig_arginfo_vector3_gety)
 SWIG_ZEND_NAMED_FE(vector3_getz,_wrap_vector3_GetZ,swig_arginfo_vector3_getz)
 SWIG_ZEND_NAMED_FE(vector3_get,_wrap_vector3_Get,swig_arginfo_vector3_get)
 SWIG_ZEND_NAMED_FE(vector3_asarray,_wrap_vector3_AsArray,swig_arginfo_vector3_asarray)
 SWIG_ZEND_NAMED_FE(vector3_add,_wrap_vector3_add,swig_arginfo_vector3_add)
 SWIG_ZEND_NAMED_FE(vector3_randomunitvector,_wrap_vector3_randomUnitVector,swig_arginfo_vector3_randomunitvector)
 SWIG_ZEND_NAMED_FE(vector3_normalize,_wrap_vector3_normalize,swig_arginfo_vector3_normalize)
 SWIG_ZEND_NAMED_FE(vector3_canbenormalized,_wrap_vector3_CanBeNormalized,swig_arginfo_vector3_canbenormalized)
 SWIG_ZEND_NAMED_FE(vector3_length_2,_wrap_vector3_length_2,swig_arginfo_vector3_length_2)
 SWIG_ZEND_NAMED_FE(vector3_length,_wrap_vector3_length,swig_arginfo_vector3_length)
 SWIG_ZEND_NAMED_FE(vector3_x,_wrap_vector3_x,swig_arginfo_vector3_x)
 SWIG_ZEND_NAMED_FE(vector3_y,_wrap_vector3_y,swig_arginfo_vector3_y)
 SWIG_ZEND_NAMED_FE(vector3_z,_wrap_vector3_z,swig_arginfo_vector3_z)
 SWIG_ZEND_NAMED_FE(vector3_isapprox,_wrap_vector3_IsApprox,swig_arginfo_vector3_isapprox)
 SWIG_ZEND_NAMED_FE(vector3_distsq,_wrap_vector3_distSq,swig_arginfo_vector3_distsq)
 SWIG_ZEND_NAMED_FE(vector3_createorthovector,_wrap_vector3_createOrthoVector,swig_arginfo_vector3_createorthovector)
 SWIG_ZEND_NAMED_FE(dot,_wrap_dot,swig_arginfo_dot)
 SWIG_ZEND_NAMED_FE(cross,_wrap_cross,swig_arginfo_cross)
 SWIG_ZEND_NAMED_FE(vectorangle,_wrap_vectorAngle,swig_arginfo_vectorangle)
 SWIG_ZEND_NAMED_FE(calctorsionangle,_wrap_CalcTorsionAngle,swig_arginfo_calctorsionangle)
 SWIG_ZEND_NAMED_FE(point2planesigned,_wrap_Point2PlaneSigned,swig_arginfo_point2planesigned)
 SWIG_ZEND_NAMED_FE(point2plane,_wrap_Point2Plane,swig_arginfo_point2plane)
 SWIG_ZEND_NAMED_FE(point2planeangle,_wrap_Point2PlaneAngle,swig_arginfo_point2planeangle)
 SWIG_ZEND_NAMED_FE(point2line,_wrap_Point2Line,swig_arginfo_point2line)
 SWIG_ZEND_NAMED_FE(vzero_get,_wrap_VZero_get,swig_arginfo_vzero_get)
 SWIG_ZEND_NAMED_FE(vx_get,_wrap_VX_get,swig_arginfo_vx_get)
 SWIG_ZEND_NAMED_FE(vy_get,_wrap_VY_get,swig_arginfo_vy_get)
 SWIG_ZEND_NAMED_FE(vz_get,_wrap_VZ_get,swig_arginfo_vz_get)
 SWIG_ZEND_NAMED_FE(new_matrix3x3,_wrap_new_matrix3x3,swig_arginfo_new_matrix3x3)
 SWIG_ZEND_NAMED_FE(matrix3x3_getarray,_wrap_matrix3x3_GetArray,swig_arginfo_matrix3x3_getarray)
 SWIG_ZEND_NAMED_FE(matrix3x3_inverse,_wrap_matrix3x3_inverse,swig_arginfo_matrix3x3_inverse)
 SWIG_ZEND_NAMED_FE(matrix3x3_transpose,_wrap_matrix3x3_transpose,swig_arginfo_matrix3x3_transpose)
 SWIG_ZEND_NAMED_FE(matrix3x3_randomrotation,_wrap_matrix3x3_randomRotation,swig_arginfo_matrix3x3_randomrotation)
 SWIG_ZEND_NAMED_FE(matrix3x3_determinant,_wrap_matrix3x3_determinant,swig_arginfo_matrix3x3_determinant)
 SWIG_ZEND_NAMED_FE(matrix3x3_issymmetric,_wrap_matrix3x3_isSymmetric,swig_arginfo_matrix3x3_issymmetric)
 SWIG_ZEND_NAMED_FE(matrix3x3_isorthogonal,_wrap_matrix3x3_isOrthogonal,swig_arginfo_matrix3x3_isorthogonal)
 SWIG_ZEND_NAMED_FE(matrix3x3_isdiagonal,_wrap_matrix3x3_isDiagonal,swig_arginfo_matrix3x3_isdiagonal)
 SWIG_ZEND_NAMED_FE(matrix3x3_isunitmatrix,_wrap_matrix3x3_isUnitMatrix,swig_arginfo_matrix3x3_isunitmatrix)
 SWIG_ZEND_NAMED_FE(matrix3x3_get,_wrap_matrix3x3_Get,swig_arginfo_matrix3x3_get)
 SWIG_ZEND_NAMED_FE(matrix3x3_set,_wrap_matrix3x3_Set,swig_arginfo_matrix3x3_set)
 SWIG_ZEND_NAMED_FE(matrix3x3_setcolumn,_wrap_matrix3x3_SetColumn,swig_arginfo_matrix3x3_setcolumn)
 SWIG_ZEND_NAMED_FE(matrix3x3_setrow,_wrap_matrix3x3_SetRow,swig_arginfo_matrix3x3_setrow)
 SWIG_ZEND_NAMED_FE(matrix3x3_getcolumn,_wrap_matrix3x3_GetColumn,swig_arginfo_matrix3x3_getcolumn)
 SWIG_ZEND_NAMED_FE(matrix3x3_getrow,_wrap_matrix3x3_GetRow,swig_arginfo_matrix3x3_getrow)
 SWIG_ZEND_NAMED_FE(matrix3x3_setuprotmat,_wrap_matrix3x3_SetupRotMat,swig_arginfo_matrix3x3_setuprotmat)
 SWIG_ZEND_NAMED_FE(matrix3x3_planereflection,_wrap_matrix3x3_PlaneReflection,swig_arginfo_matrix3x3_planereflection)
 SWIG_ZEND_NAMED_FE(matrix3x3_rotaboutaxisbyangle,_wrap_matrix3x3_RotAboutAxisByAngle,swig_arginfo_matrix3x3_rotaboutaxisbyangle)
 SWIG_ZEND_NAMED_FE(matrix3x3_fillorth,_wrap_matrix3x3_FillOrth,swig_arginfo_matrix3x3_fillorth)
 SWIG_ZEND_NAMED_FE(matrix3x3_findeigenvectorsifsymmetric,_wrap_matrix3x3_findEigenvectorsIfSymmetric,swig_arginfo_matrix3x3_findeigenvectorsifsymmetric)
 SWIG_ZEND_NAMED_FE(matrix3x3_jacobi,_wrap_matrix3x3_jacobi,swig_arginfo_matrix3x3_jacobi)
 SWIG_ZEND_NAMED_FE(new_transform3d,_wrap_new_transform3d,swig_arginfo_new_transform3d)
 SWIG_ZEND_NAMED_FE(transform3d_describeasstring,_wrap_transform3d_DescribeAsString,swig_arginfo_transform3d_describeasstring)
 SWIG_ZEND_NAMED_FE(transform3d_describeasvalues,_wrap_transform3d_DescribeAsValues,swig_arginfo_transform3d_describeasvalues)
 SWIG_ZEND_NAMED_FE(transform3d_normalize,_wrap_transform3d_Normalize,swig_arginfo_transform3d_normalize)
 SWIG_ZEND_NAMED_FE(new_spacegroup,_wrap_new_SpaceGroup,swig_arginfo_new_spacegroup)
 SWIG_ZEND_NAMED_FE(spacegroup_sethmname,_wrap_SpaceGroup_SetHMName,swig_arginfo_spacegroup_sethmname)
 SWIG_ZEND_NAMED_FE(spacegroup_sethallname,_wrap_SpaceGroup_SetHallName,swig_arginfo_spacegroup_sethallname)
 SWIG_ZEND_NAMED_FE(spacegroup_setid,_wrap_SpaceGroup_SetId,swig_arginfo_spacegroup_setid)
 SWIG_ZEND_NAMED_FE(spacegroup_addtransform,_wrap_SpaceGroup_AddTransform,swig_arginfo_spacegroup_addtransform)
 SWIG_ZEND_NAMED_FE(spacegroup_gethmname,_wrap_SpaceGroup_GetHMName,swig_arginfo_spacegroup_gethmname)
 SWIG_ZEND_NAMED_FE(spacegroup_gethallname,_wrap_SpaceGroup_GetHallName,swig_arginfo_spacegroup_gethallname)
 SWIG_ZEND_NAMED_FE(spacegroup_getid,_wrap_SpaceGroup_GetId,swig_arginfo_spacegroup_getid)
 SWIG_ZEND_NAMED_FE(spacegroup_getoriginalternative,_wrap_SpaceGroup_GetOriginAlternative,swig_arginfo_spacegroup_getoriginalternative)
 SWIG_ZEND_NAMED_FE(spacegroup_transform,_wrap_SpaceGroup_Transform,swig_arginfo_spacegroup_transform)
 SWIG_ZEND_NAMED_FE(spacegroup_begintransform,_wrap_SpaceGroup_BeginTransform,swig_arginfo_spacegroup_begintransform)
 SWIG_ZEND_NAMED_FE(spacegroup_nexttransform,_wrap_SpaceGroup_NextTransform,swig_arginfo_spacegroup_nexttransform)
 SWIG_ZEND_NAMED_FE(spacegroup_getspacegroup,_wrap_SpaceGroup_GetSpaceGroup,swig_arginfo_spacegroup_getspacegroup)
 SWIG_ZEND_NAMED_FE(spacegroup_find,_wrap_SpaceGroup_Find,swig_arginfo_spacegroup_find)
 SWIG_ZEND_NAMED_FE(spacegroup_isvalid,_wrap_SpaceGroup_IsValid,swig_arginfo_spacegroup_isvalid)
 SWIG_ZEND_NAMED_FE(obreleaseversion,_wrap_OBReleaseVersion,swig_arginfo_obreleaseversion)
 SWIG_ZEND_NAMED_FE(new_obgenericdata,_wrap_new_OBGenericData,swig_arginfo_new_obgenericdata)
 SWIG_ZEND_NAMED_FE(obgenericdata_c_clone,_wrap_OBGenericData_c_Clone,swig_arginfo_obgenericdata_c_clone)
 SWIG_ZEND_NAMED_FE(obgenericdata_setattribute,_wrap_OBGenericData_SetAttribute,swig_arginfo_obgenericdata_setattribute)
 SWIG_ZEND_NAMED_FE(obgenericdata_setorigin,_wrap_OBGenericData_SetOrigin,swig_arginfo_obgenericdata_setorigin)
 SWIG_ZEND_NAMED_FE(obgenericdata_getattribute,_wrap_OBGenericData_GetAttribute,swig_arginfo_obgenericdata_getattribute)
 SWIG_ZEND_NAMED_FE(obgenericdata_getdatatype,_wrap_OBGenericData_GetDataType,swig_arginfo_obgenericdata_getdatatype)
 SWIG_ZEND_NAMED_FE(obgenericdata_getvalue,_wrap_OBGenericData_GetValue,swig_arginfo_obgenericdata_getvalue)
 SWIG_ZEND_NAMED_FE(obgenericdata_getorigin,_wrap_OBGenericData_GetOrigin,swig_arginfo_obgenericdata_getorigin)
 SWIG_ZEND_NAMED_FE(obbase_clear,_wrap_OBBase_Clear,swig_arginfo_obbase_clear)
 SWIG_ZEND_NAMED_FE(obbase_dotransformations,_wrap_OBBase_DoTransformations,swig_arginfo_obbase_dotransformations)
 SWIG_ZEND_NAMED_FE(obbase_classdescription,_wrap_OBBase_ClassDescription,swig_arginfo_obbase_classdescription)
 SWIG_ZEND_NAMED_FE(obbase_gettitle,_wrap_OBBase_GetTitle,swig_arginfo_obbase_gettitle)
 SWIG_ZEND_NAMED_FE(obbase_settitle,_wrap_OBBase_SetTitle,swig_arginfo_obbase_settitle)
 SWIG_ZEND_NAMED_FE(obbase_hasdata,_wrap_OBBase_HasData,swig_arginfo_obbase_hasdata)
 SWIG_ZEND_NAMED_FE(obbase_deletedata,_wrap_OBBase_DeleteData,swig_arginfo_obbase_deletedata)
 SWIG_ZEND_NAMED_FE(obbase_clonedata,_wrap_OBBase_CloneData,swig_arginfo_obbase_clonedata)
 SWIG_ZEND_NAMED_FE(obbase_datasize,_wrap_OBBase_DataSize,swig_arginfo_obbase_datasize)
 SWIG_ZEND_NAMED_FE(obbase_getalldata,_wrap_OBBase_GetAllData,swig_arginfo_obbase_getalldata)
 SWIG_ZEND_NAMED_FE(obbase_getdata,_wrap_OBBase_GetData,swig_arginfo_obbase_getdata)
 SWIG_ZEND_NAMED_FE(obbase_begindata,_wrap_OBBase_BeginData,swig_arginfo_obbase_begindata)
 SWIG_ZEND_NAMED_FE(obbase_enddata,_wrap_OBBase_EndData,swig_arginfo_obbase_enddata)
 SWIG_ZEND_NAMED_FE(new_obbase,_wrap_new_OBBase,swig_arginfo_new_obbase)
 SWIG_ZEND_NAMED_FE(new_obcommentdata,_wrap_new_OBCommentData,swig_arginfo_new_obcommentdata)
 SWIG_ZEND_NAMED_FE(obcommentdata_setdata,_wrap_OBCommentData_SetData,swig_arginfo_obcommentdata_setdata)
 SWIG_ZEND_NAMED_FE(obcommentdata_getdata,_wrap_OBCommentData_GetData,swig_arginfo_obcommentdata_getdata)
 SWIG_ZEND_NAMED_FE(new_obexternalbond,_wrap_new_OBExternalBond,swig_arginfo_new_obexternalbond)
 SWIG_ZEND_NAMED_FE(obexternalbond_getidx,_wrap_OBExternalBond_GetIdx,swig_arginfo_obexternalbond_getidx)
 SWIG_ZEND_NAMED_FE(obexternalbond_getatom,_wrap_OBExternalBond_GetAtom,swig_arginfo_obexternalbond_getatom)
 SWIG_ZEND_NAMED_FE(obexternalbond_getbond,_wrap_OBExternalBond_GetBond,swig_arginfo_obexternalbond_getbond)
 SWIG_ZEND_NAMED_FE(obexternalbond_setidx,_wrap_OBExternalBond_SetIdx,swig_arginfo_obexternalbond_setidx)
 SWIG_ZEND_NAMED_FE(obexternalbond_setatom,_wrap_OBExternalBond_SetAtom,swig_arginfo_obexternalbond_setatom)
 SWIG_ZEND_NAMED_FE(obexternalbond_setbond,_wrap_OBExternalBond_SetBond,swig_arginfo_obexternalbond_setbond)
 SWIG_ZEND_NAMED_FE(new_obexternalbonddata,_wrap_new_OBExternalBondData,swig_arginfo_new_obexternalbonddata)
 SWIG_ZEND_NAMED_FE(obexternalbonddata_setdata,_wrap_OBExternalBondData_SetData,swig_arginfo_obexternalbonddata_setdata)
 SWIG_ZEND_NAMED_FE(obexternalbonddata_getdata,_wrap_OBExternalBondData_GetData,swig_arginfo_obexternalbonddata_getdata)
 SWIG_ZEND_NAMED_FE(new_obpairdata,_wrap_new_OBPairData,swig_arginfo_new_obpairdata)
 SWIG_ZEND_NAMED_FE(obpairdata_setvalue,_wrap_OBPairData_SetValue,swig_arginfo_obpairdata_setvalue)
 SWIG_ZEND_NAMED_FE(new_obsetdata,_wrap_new_OBSetData,swig_arginfo_new_obsetdata)
 SWIG_ZEND_NAMED_FE(obsetdata_adddata,_wrap_OBSetData_AddData,swig_arginfo_obsetdata_adddata)
 SWIG_ZEND_NAMED_FE(obsetdata_setdata,_wrap_OBSetData_SetData,swig_arginfo_obsetdata_setdata)
 SWIG_ZEND_NAMED_FE(obsetdata_getdata,_wrap_OBSetData_GetData,swig_arginfo_obsetdata_getdata)
 SWIG_ZEND_NAMED_FE(obsetdata_getbegin,_wrap_OBSetData_GetBegin,swig_arginfo_obsetdata_getbegin)
 SWIG_ZEND_NAMED_FE(obsetdata_getend,_wrap_OBSetData_GetEnd,swig_arginfo_obsetdata_getend)
 SWIG_ZEND_NAMED_FE(obsetdata_deletedata,_wrap_OBSetData_DeleteData,swig_arginfo_obsetdata_deletedata)
 SWIG_ZEND_NAMED_FE(new_obvirtualbond,_wrap_new_OBVirtualBond,swig_arginfo_new_obvirtualbond)
 SWIG_ZEND_NAMED_FE(obvirtualbond_getbgn,_wrap_OBVirtualBond_GetBgn,swig_arginfo_obvirtualbond_getbgn)
 SWIG_ZEND_NAMED_FE(obvirtualbond_getend,_wrap_OBVirtualBond_GetEnd,swig_arginfo_obvirtualbond_getend)
 SWIG_ZEND_NAMED_FE(obvirtualbond_getorder,_wrap_OBVirtualBond_GetOrder,swig_arginfo_obvirtualbond_getorder)
 SWIG_ZEND_NAMED_FE(obvirtualbond_getstereo,_wrap_OBVirtualBond_GetStereo,swig_arginfo_obvirtualbond_getstereo)
 SWIG_ZEND_NAMED_FE(new_obringdata,_wrap_new_OBRingData,swig_arginfo_new_obringdata)
 SWIG_ZEND_NAMED_FE(obringdata_setdata,_wrap_OBRingData_SetData,swig_arginfo_obringdata_setdata)
 SWIG_ZEND_NAMED_FE(obringdata_pushback,_wrap_OBRingData_PushBack,swig_arginfo_obringdata_pushback)
 SWIG_ZEND_NAMED_FE(obringdata_getdata,_wrap_OBRingData_GetData,swig_arginfo_obringdata_getdata)
 SWIG_ZEND_NAMED_FE(obringdata_beginrings,_wrap_OBRingData_BeginRings,swig_arginfo_obringdata_beginrings)
 SWIG_ZEND_NAMED_FE(obringdata_endrings,_wrap_OBRingData_EndRings,swig_arginfo_obringdata_endrings)
 SWIG_ZEND_NAMED_FE(obringdata_beginring,_wrap_OBRingData_BeginRing,swig_arginfo_obringdata_beginring)
 SWIG_ZEND_NAMED_FE(obringdata_nextring,_wrap_OBRingData_NextRing,swig_arginfo_obringdata_nextring)
 SWIG_ZEND_NAMED_FE(new_obunitcell,_wrap_new_OBUnitCell,swig_arginfo_new_obunitcell)
 SWIG_ZEND_NAMED_FE(obunitcell_setdata,_wrap_OBUnitCell_SetData,swig_arginfo_obunitcell_setdata)
 SWIG_ZEND_NAMED_FE(obunitcell_setoffset,_wrap_OBUnitCell_SetOffset,swig_arginfo_obunitcell_setoffset)
 SWIG_ZEND_NAMED_FE(obunitcell_setspacegroup,_wrap_OBUnitCell_SetSpaceGroup,swig_arginfo_obunitcell_setspacegroup)
 SWIG_ZEND_NAMED_FE(obunitcell_setlatticetype,_wrap_OBUnitCell_SetLatticeType,swig_arginfo_obunitcell_setlatticetype)
 SWIG_ZEND_NAMED_FE(obunitcell_fillunitcell,_wrap_OBUnitCell_FillUnitCell,swig_arginfo_obunitcell_fillunitcell)
 SWIG_ZEND_NAMED_FE(obunitcell_geta,_wrap_OBUnitCell_GetA,swig_arginfo_obunitcell_geta)
 SWIG_ZEND_NAMED_FE(obunitcell_getb,_wrap_OBUnitCell_GetB,swig_arginfo_obunitcell_getb)
 SWIG_ZEND_NAMED_FE(obunitcell_getc,_wrap_OBUnitCell_GetC,swig_arginfo_obunitcell_getc)
 SWIG_ZEND_NAMED_FE(obunitcell_getalpha,_wrap_OBUnitCell_GetAlpha,swig_arginfo_obunitcell_getalpha)
 SWIG_ZEND_NAMED_FE(obunitcell_getbeta,_wrap_OBUnitCell_GetBeta,swig_arginfo_obunitcell_getbeta)
 SWIG_ZEND_NAMED_FE(obunitcell_getgamma,_wrap_OBUnitCell_GetGamma,swig_arginfo_obunitcell_getgamma)
 SWIG_ZEND_NAMED_FE(obunitcell_getoffset,_wrap_OBUnitCell_GetOffset,swig_arginfo_obunitcell_getoffset)
 SWIG_ZEND_NAMED_FE(obunitcell_getspacegroup,_wrap_OBUnitCell_GetSpaceGroup,swig_arginfo_obunitcell_getspacegroup)
 SWIG_ZEND_NAMED_FE(obunitcell_getspacegroupname,_wrap_OBUnitCell_GetSpaceGroupName,swig_arginfo_obunitcell_getspacegroupname)
 SWIG_ZEND_NAMED_FE(obunitcell_getlatticetype,_wrap_OBUnitCell_GetLatticeType,swig_arginfo_obunitcell_getlatticetype)
 SWIG_ZEND_NAMED_FE(obunitcell_getcellvectors,_wrap_OBUnitCell_GetCellVectors,swig_arginfo_obunitcell_getcellvectors)
 SWIG_ZEND_NAMED_FE(obunitcell_getcellmatrix,_wrap_OBUnitCell_GetCellMatrix,swig_arginfo_obunitcell_getcellmatrix)
 SWIG_ZEND_NAMED_FE(obunitcell_getorthomatrix,_wrap_OBUnitCell_GetOrthoMatrix,swig_arginfo_obunitcell_getorthomatrix)
 SWIG_ZEND_NAMED_FE(obunitcell_getorientationmatrix,_wrap_OBUnitCell_GetOrientationMatrix,swig_arginfo_obunitcell_getorientationmatrix)
 SWIG_ZEND_NAMED_FE(obunitcell_getfractionalmatrix,_wrap_OBUnitCell_GetFractionalMatrix,swig_arginfo_obunitcell_getfractionalmatrix)
 SWIG_ZEND_NAMED_FE(obunitcell_fractionaltocartesian,_wrap_OBUnitCell_FractionalToCartesian,swig_arginfo_obunitcell_fractionaltocartesian)
 SWIG_ZEND_NAMED_FE(obunitcell_cartesiantofractional,_wrap_OBUnitCell_CartesianToFractional,swig_arginfo_obunitcell_cartesiantofractional)
 SWIG_ZEND_NAMED_FE(obunitcell_wrapcartesiancoordinate,_wrap_OBUnitCell_WrapCartesianCoordinate,swig_arginfo_obunitcell_wrapcartesiancoordinate)
 SWIG_ZEND_NAMED_FE(obunitcell_wrapfractionalcoordinate,_wrap_OBUnitCell_WrapFractionalCoordinate,swig_arginfo_obunitcell_wrapfractionalcoordinate)
 SWIG_ZEND_NAMED_FE(obunitcell_getspacegroupnumber,_wrap_OBUnitCell_GetSpaceGroupNumber,swig_arginfo_obunitcell_getspacegroupnumber)
 SWIG_ZEND_NAMED_FE(obunitcell_getcellvolume,_wrap_OBUnitCell_GetCellVolume,swig_arginfo_obunitcell_getcellvolume)
 SWIG_ZEND_NAMED_FE(new_obconformerdata,_wrap_new_OBConformerData,swig_arginfo_new_obconformerdata)
 SWIG_ZEND_NAMED_FE(obconformerdata_setdimension,_wrap_OBConformerData_SetDimension,swig_arginfo_obconformerdata_setdimension)
 SWIG_ZEND_NAMED_FE(obconformerdata_setenergies,_wrap_OBConformerData_SetEnergies,swig_arginfo_obconformerdata_setenergies)
 SWIG_ZEND_NAMED_FE(obconformerdata_setforces,_wrap_OBConformerData_SetForces,swig_arginfo_obconformerdata_setforces)
 SWIG_ZEND_NAMED_FE(obconformerdata_setvelocities,_wrap_OBConformerData_SetVelocities,swig_arginfo_obconformerdata_setvelocities)
 SWIG_ZEND_NAMED_FE(obconformerdata_setdisplacements,_wrap_OBConformerData_SetDisplacements,swig_arginfo_obconformerdata_setdisplacements)
 SWIG_ZEND_NAMED_FE(obconformerdata_setdata,_wrap_OBConformerData_SetData,swig_arginfo_obconformerdata_setdata)
 SWIG_ZEND_NAMED_FE(obconformerdata_getdimension,_wrap_OBConformerData_GetDimension,swig_arginfo_obconformerdata_getdimension)
 SWIG_ZEND_NAMED_FE(obconformerdata_getenergies,_wrap_OBConformerData_GetEnergies,swig_arginfo_obconformerdata_getenergies)
 SWIG_ZEND_NAMED_FE(obconformerdata_getforces,_wrap_OBConformerData_GetForces,swig_arginfo_obconformerdata_getforces)
 SWIG_ZEND_NAMED_FE(obconformerdata_getvelocities,_wrap_OBConformerData_GetVelocities,swig_arginfo_obconformerdata_getvelocities)
 SWIG_ZEND_NAMED_FE(obconformerdata_getdisplacements,_wrap_OBConformerData_GetDisplacements,swig_arginfo_obconformerdata_getdisplacements)
 SWIG_ZEND_NAMED_FE(obconformerdata_getdata,_wrap_OBConformerData_GetData,swig_arginfo_obconformerdata_getdata)
 SWIG_ZEND_NAMED_FE(new_obsymmetrydata,_wrap_new_OBSymmetryData,swig_arginfo_new_obsymmetrydata)
 SWIG_ZEND_NAMED_FE(obsymmetrydata_setdata,_wrap_OBSymmetryData_SetData,swig_arginfo_obsymmetrydata_setdata)
 SWIG_ZEND_NAMED_FE(obsymmetrydata_setpointgroup,_wrap_OBSymmetryData_SetPointGroup,swig_arginfo_obsymmetrydata_setpointgroup)
 SWIG_ZEND_NAMED_FE(obsymmetrydata_setspacegroup,_wrap_OBSymmetryData_SetSpaceGroup,swig_arginfo_obsymmetrydata_setspacegroup)
 SWIG_ZEND_NAMED_FE(obsymmetrydata_getpointgroup,_wrap_OBSymmetryData_GetPointGroup,swig_arginfo_obsymmetrydata_getpointgroup)
 SWIG_ZEND_NAMED_FE(obsymmetrydata_getspacegroup,_wrap_OBSymmetryData_GetSpaceGroup,swig_arginfo_obsymmetrydata_getspacegroup)
 SWIG_ZEND_NAMED_FE(new_obtorsion,_wrap_new_OBTorsion,swig_arginfo_new_obtorsion)
 SWIG_ZEND_NAMED_FE(obtorsion_clear,_wrap_OBTorsion_Clear,swig_arginfo_obtorsion_clear)
 SWIG_ZEND_NAMED_FE(obtorsion_c_empty,_wrap_OBTorsion_c_Empty,swig_arginfo_obtorsion_c_empty)
 SWIG_ZEND_NAMED_FE(obtorsion_addtorsion,_wrap_OBTorsion_AddTorsion,swig_arginfo_obtorsion_addtorsion)
 SWIG_ZEND_NAMED_FE(obtorsion_setangle,_wrap_OBTorsion_SetAngle,swig_arginfo_obtorsion_setangle)
 SWIG_ZEND_NAMED_FE(obtorsion_setdata,_wrap_OBTorsion_SetData,swig_arginfo_obtorsion_setdata)
 SWIG_ZEND_NAMED_FE(obtorsion_getangle,_wrap_OBTorsion_GetAngle,swig_arginfo_obtorsion_getangle)
 SWIG_ZEND_NAMED_FE(obtorsion_getbondidx,_wrap_OBTorsion_GetBondIdx,swig_arginfo_obtorsion_getbondidx)
 SWIG_ZEND_NAMED_FE(obtorsion_getsize,_wrap_OBTorsion_GetSize,swig_arginfo_obtorsion_getsize)
 SWIG_ZEND_NAMED_FE(obtorsion_getbc,_wrap_OBTorsion_GetBC,swig_arginfo_obtorsion_getbc)
 SWIG_ZEND_NAMED_FE(obtorsion_getads,_wrap_OBTorsion_GetADs,swig_arginfo_obtorsion_getads)
 SWIG_ZEND_NAMED_FE(obtorsion_isprotonrotor,_wrap_OBTorsion_IsProtonRotor,swig_arginfo_obtorsion_isprotonrotor)
 SWIG_ZEND_NAMED_FE(obtorsiondata_clear,_wrap_OBTorsionData_Clear,swig_arginfo_obtorsiondata_clear)
 SWIG_ZEND_NAMED_FE(obtorsiondata_getdata,_wrap_OBTorsionData_GetData,swig_arginfo_obtorsiondata_getdata)
 SWIG_ZEND_NAMED_FE(obtorsiondata_getsize,_wrap_OBTorsionData_GetSize,swig_arginfo_obtorsiondata_getsize)
 SWIG_ZEND_NAMED_FE(obtorsiondata_setdata,_wrap_OBTorsionData_SetData,swig_arginfo_obtorsiondata_setdata)
 SWIG_ZEND_NAMED_FE(obtorsiondata_filltorsionarray,_wrap_OBTorsionData_FillTorsionArray,swig_arginfo_obtorsiondata_filltorsionarray)
 SWIG_ZEND_NAMED_FE(new_obangle,_wrap_new_OBAngle,swig_arginfo_new_obangle)
 SWIG_ZEND_NAMED_FE(obangle_clear,_wrap_OBAngle_Clear,swig_arginfo_obangle_clear)
 SWIG_ZEND_NAMED_FE(obangle_getangle,_wrap_OBAngle_GetAngle,swig_arginfo_obangle_getangle)
 SWIG_ZEND_NAMED_FE(obangle_setangle,_wrap_OBAngle_SetAngle,swig_arginfo_obangle_setangle)
 SWIG_ZEND_NAMED_FE(obangle_setatoms,_wrap_OBAngle_SetAtoms,swig_arginfo_obangle_setatoms)
 SWIG_ZEND_NAMED_FE(obangledata_clear,_wrap_OBAngleData_Clear,swig_arginfo_obangledata_clear)
 SWIG_ZEND_NAMED_FE(obangledata_fillanglearray,_wrap_OBAngleData_FillAngleArray,swig_arginfo_obangledata_fillanglearray)
 SWIG_ZEND_NAMED_FE(obangledata_setdata,_wrap_OBAngleData_SetData,swig_arginfo_obangledata_setdata)
 SWIG_ZEND_NAMED_FE(obangledata_getsize,_wrap_OBAngleData_GetSize,swig_arginfo_obangledata_getsize)
 SWIG_ZEND_NAMED_FE(new_obchiraldata,_wrap_new_OBChiralData,swig_arginfo_new_obchiraldata)
 SWIG_ZEND_NAMED_FE(obchiraldata_clear,_wrap_OBChiralData_Clear,swig_arginfo_obchiraldata_clear)
 SWIG_ZEND_NAMED_FE(obchiraldata_getatom4refs,_wrap_OBChiralData_GetAtom4Refs,swig_arginfo_obchiraldata_getatom4refs)
 SWIG_ZEND_NAMED_FE(obchiraldata_getatomref,_wrap_OBChiralData_GetAtomRef,swig_arginfo_obchiraldata_getatomref)
 SWIG_ZEND_NAMED_FE(obchiraldata_setatom4refs,_wrap_OBChiralData_SetAtom4Refs,swig_arginfo_obchiraldata_setatom4refs)
 SWIG_ZEND_NAMED_FE(obchiraldata_addatomref,_wrap_OBChiralData_AddAtomRef,swig_arginfo_obchiraldata_addatomref)
 SWIG_ZEND_NAMED_FE(obchiraldata_getsize,_wrap_OBChiralData_GetSize,swig_arginfo_obchiraldata_getsize)
 SWIG_ZEND_NAMED_FE(new_obserialnums,_wrap_new_OBSerialNums,swig_arginfo_new_obserialnums)
 SWIG_ZEND_NAMED_FE(obserialnums_getdata,_wrap_OBSerialNums_GetData,swig_arginfo_obserialnums_getdata)
 SWIG_ZEND_NAMED_FE(obserialnums_setdata,_wrap_OBSerialNums_SetData,swig_arginfo_obserialnums_setdata)
 SWIG_ZEND_NAMED_FE(new_obvibrationdata,_wrap_new_OBVibrationData,swig_arginfo_new_obvibrationdata)
 SWIG_ZEND_NAMED_FE(obvibrationdata_setdata,_wrap_OBVibrationData_SetData,swig_arginfo_obvibrationdata_setdata)
 SWIG_ZEND_NAMED_FE(obvibrationdata_getlx,_wrap_OBVibrationData_GetLx,swig_arginfo_obvibrationdata_getlx)
 SWIG_ZEND_NAMED_FE(obvibrationdata_getfrequencies,_wrap_OBVibrationData_GetFrequencies,swig_arginfo_obvibrationdata_getfrequencies)
 SWIG_ZEND_NAMED_FE(obvibrationdata_getintensities,_wrap_OBVibrationData_GetIntensities,swig_arginfo_obvibrationdata_getintensities)
 SWIG_ZEND_NAMED_FE(obvibrationdata_getramanactivities,_wrap_OBVibrationData_GetRamanActivities,swig_arginfo_obvibrationdata_getramanactivities)
 SWIG_ZEND_NAMED_FE(obvibrationdata_getnumberoffrequencies,_wrap_OBVibrationData_GetNumberOfFrequencies,swig_arginfo_obvibrationdata_getnumberoffrequencies)
 SWIG_ZEND_NAMED_FE(new_obdosdata,_wrap_new_OBDOSData,swig_arginfo_new_obdosdata)
 SWIG_ZEND_NAMED_FE(obdosdata_setdata,_wrap_OBDOSData_SetData,swig_arginfo_obdosdata_setdata)
 SWIG_ZEND_NAMED_FE(obdosdata_getfermienergy,_wrap_OBDOSData_GetFermiEnergy,swig_arginfo_obdosdata_getfermienergy)
 SWIG_ZEND_NAMED_FE(obdosdata_getenergies,_wrap_OBDOSData_GetEnergies,swig_arginfo_obdosdata_getenergies)
 SWIG_ZEND_NAMED_FE(obdosdata_getdensities,_wrap_OBDOSData_GetDensities,swig_arginfo_obdosdata_getdensities)
 SWIG_ZEND_NAMED_FE(obdosdata_getintegration,_wrap_OBDOSData_GetIntegration,swig_arginfo_obdosdata_getintegration)
 SWIG_ZEND_NAMED_FE(oborbital_setdata,_wrap_OBOrbital_SetData,swig_arginfo_oborbital_setdata)
 SWIG_ZEND_NAMED_FE(oborbital_getenergy,_wrap_OBOrbital_GetEnergy,swig_arginfo_oborbital_getenergy)
 SWIG_ZEND_NAMED_FE(oborbital_getoccupation,_wrap_OBOrbital_GetOccupation,swig_arginfo_oborbital_getoccupation)
 SWIG_ZEND_NAMED_FE(oborbital_getsymbol,_wrap_OBOrbital_GetSymbol,swig_arginfo_oborbital_getsymbol)
 SWIG_ZEND_NAMED_FE(new_oborbital,_wrap_new_OBOrbital,swig_arginfo_new_oborbital)
 SWIG_ZEND_NAMED_FE(new_oborbitaldata,_wrap_new_OBOrbitalData,swig_arginfo_new_oborbitaldata)
 SWIG_ZEND_NAMED_FE(oborbitaldata_setalphaorbitals,_wrap_OBOrbitalData_SetAlphaOrbitals,swig_arginfo_oborbitaldata_setalphaorbitals)
 SWIG_ZEND_NAMED_FE(oborbitaldata_setbetaorbitals,_wrap_OBOrbitalData_SetBetaOrbitals,swig_arginfo_oborbitaldata_setbetaorbitals)
 SWIG_ZEND_NAMED_FE(oborbitaldata_sethomo,_wrap_OBOrbitalData_SetHOMO,swig_arginfo_oborbitaldata_sethomo)
 SWIG_ZEND_NAMED_FE(oborbitaldata_setopenshell,_wrap_OBOrbitalData_SetOpenShell,swig_arginfo_oborbitaldata_setopenshell)
 SWIG_ZEND_NAMED_FE(oborbitaldata_isopenshell,_wrap_OBOrbitalData_IsOpenShell,swig_arginfo_oborbitaldata_isopenshell)
 SWIG_ZEND_NAMED_FE(oborbitaldata_getalphahomo,_wrap_OBOrbitalData_GetAlphaHOMO,swig_arginfo_oborbitaldata_getalphahomo)
 SWIG_ZEND_NAMED_FE(oborbitaldata_getbetahomo,_wrap_OBOrbitalData_GetBetaHOMO,swig_arginfo_oborbitaldata_getbetahomo)
 SWIG_ZEND_NAMED_FE(oborbitaldata_getalphaorbitals,_wrap_OBOrbitalData_GetAlphaOrbitals,swig_arginfo_oborbitaldata_getalphaorbitals)
 SWIG_ZEND_NAMED_FE(oborbitaldata_getbetaorbitals,_wrap_OBOrbitalData_GetBetaOrbitals,swig_arginfo_oborbitaldata_getbetaorbitals)
 SWIG_ZEND_NAMED_FE(oborbitaldata_loadclosedshellorbitals,_wrap_OBOrbitalData_LoadClosedShellOrbitals,swig_arginfo_oborbitaldata_loadclosedshellorbitals)
 SWIG_ZEND_NAMED_FE(oborbitaldata_loadalphaorbitals,_wrap_OBOrbitalData_LoadAlphaOrbitals,swig_arginfo_oborbitaldata_loadalphaorbitals)
 SWIG_ZEND_NAMED_FE(oborbitaldata_loadbetaorbitals,_wrap_OBOrbitalData_LoadBetaOrbitals,swig_arginfo_oborbitaldata_loadbetaorbitals)
 SWIG_ZEND_NAMED_FE(new_obelectronictransitiondata,_wrap_new_OBElectronicTransitionData,swig_arginfo_new_obelectronictransitiondata)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_setdata,_wrap_OBElectronicTransitionData_SetData,swig_arginfo_obelectronictransitiondata_setdata)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_setedipole,_wrap_OBElectronicTransitionData_SetEDipole,swig_arginfo_obelectronictransitiondata_setedipole)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_setrotatorystrengthsvelocity,_wrap_OBElectronicTransitionData_SetRotatoryStrengthsVelocity,swig_arginfo_obelectronictransitiondata_setrotatorystrengthsvelocity)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_setrotatorystrengthslength,_wrap_OBElectronicTransitionData_SetRotatoryStrengthsLength,swig_arginfo_obelectronictransitiondata_setrotatorystrengthslength)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_getwavelengths,_wrap_OBElectronicTransitionData_GetWavelengths,swig_arginfo_obelectronictransitiondata_getwavelengths)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_getforces,_wrap_OBElectronicTransitionData_GetForces,swig_arginfo_obelectronictransitiondata_getforces)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_getedipole,_wrap_OBElectronicTransitionData_GetEDipole,swig_arginfo_obelectronictransitiondata_getedipole)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_getrotatorystrengthsvelocity,_wrap_OBElectronicTransitionData_GetRotatoryStrengthsVelocity,swig_arginfo_obelectronictransitiondata_getrotatorystrengthsvelocity)
 SWIG_ZEND_NAMED_FE(obelectronictransitiondata_getrotatorystrengthslength,_wrap_OBElectronicTransitionData_GetRotatoryStrengthsLength,swig_arginfo_obelectronictransitiondata_getrotatorystrengthslength)
 SWIG_ZEND_NAMED_FE(new_obrotationdata,_wrap_new_OBRotationData,swig_arginfo_new_obrotationdata)
 SWIG_ZEND_NAMED_FE(obrotationdata_setdata,_wrap_OBRotationData_SetData,swig_arginfo_obrotationdata_setdata)
 SWIG_ZEND_NAMED_FE(obrotationdata_getrotconsts,_wrap_OBRotationData_GetRotConsts,swig_arginfo_obrotationdata_getrotconsts)
 SWIG_ZEND_NAMED_FE(obrotationdata_getsymmetrynumber,_wrap_OBRotationData_GetSymmetryNumber,swig_arginfo_obrotationdata_getsymmetrynumber)
 SWIG_ZEND_NAMED_FE(obrotationdata_getrotortype,_wrap_OBRotationData_GetRotorType,swig_arginfo_obrotationdata_getrotortype)
 SWIG_ZEND_NAMED_FE(new_obvectordata,_wrap_new_OBVectorData,swig_arginfo_new_obvectordata)
 SWIG_ZEND_NAMED_FE(obvectordata_setdata,_wrap_OBVectorData_SetData,swig_arginfo_obvectordata_setdata)
 SWIG_ZEND_NAMED_FE(obvectordata_getdata,_wrap_OBVectorData_GetData,swig_arginfo_obvectordata_getdata)
 SWIG_ZEND_NAMED_FE(new_obmatrixdata,_wrap_new_OBMatrixData,swig_arginfo_new_obmatrixdata)
 SWIG_ZEND_NAMED_FE(obmatrixdata_setdata,_wrap_OBMatrixData_SetData,swig_arginfo_obmatrixdata_setdata)
 SWIG_ZEND_NAMED_FE(obmatrixdata_getdata,_wrap_OBMatrixData_GetData,swig_arginfo_obmatrixdata_getdata)
 SWIG_ZEND_NAMED_FE(new_obfreegridpoint,_wrap_new_OBFreeGridPoint,swig_arginfo_new_obfreegridpoint)
 SWIG_ZEND_NAMED_FE(obfreegridpoint_getx,_wrap_OBFreeGridPoint_GetX,swig_arginfo_obfreegridpoint_getx)
 SWIG_ZEND_NAMED_FE(obfreegridpoint_gety,_wrap_OBFreeGridPoint_GetY,swig_arginfo_obfreegridpoint_gety)
 SWIG_ZEND_NAMED_FE(obfreegridpoint_getz,_wrap_OBFreeGridPoint_GetZ,swig_arginfo_obfreegridpoint_getz)
 SWIG_ZEND_NAMED_FE(obfreegridpoint_getv,_wrap_OBFreeGridPoint_GetV,swig_arginfo_obfreegridpoint_getv)
 SWIG_ZEND_NAMED_FE(obfreegridpoint_setx,_wrap_OBFreeGridPoint_SetX,swig_arginfo_obfreegridpoint_setx)
 SWIG_ZEND_NAMED_FE(obfreegridpoint_sety,_wrap_OBFreeGridPoint_SetY,swig_arginfo_obfreegridpoint_sety)
 SWIG_ZEND_NAMED_FE(obfreegridpoint_setz,_wrap_OBFreeGridPoint_SetZ,swig_arginfo_obfreegridpoint_setz)
 SWIG_ZEND_NAMED_FE(obfreegridpoint_setv,_wrap_OBFreeGridPoint_SetV,swig_arginfo_obfreegridpoint_setv)
 SWIG_ZEND_NAMED_FE(new_obfreegrid,_wrap_new_OBFreeGrid,swig_arginfo_new_obfreegrid)
 SWIG_ZEND_NAMED_FE(obfreegrid_numpoints,_wrap_OBFreeGrid_NumPoints,swig_arginfo_obfreegrid_numpoints)
 SWIG_ZEND_NAMED_FE(obfreegrid_addpoint,_wrap_OBFreeGrid_AddPoint,swig_arginfo_obfreegrid_addpoint)
 SWIG_ZEND_NAMED_FE(obfreegrid_beginpoints,_wrap_OBFreeGrid_BeginPoints,swig_arginfo_obfreegrid_beginpoints)
 SWIG_ZEND_NAMED_FE(obfreegrid_endpoints,_wrap_OBFreeGrid_EndPoints,swig_arginfo_obfreegrid_endpoints)
 SWIG_ZEND_NAMED_FE(obfreegrid_beginpoint,_wrap_OBFreeGrid_BeginPoint,swig_arginfo_obfreegrid_beginpoint)
 SWIG_ZEND_NAMED_FE(obfreegrid_nextpoint,_wrap_OBFreeGrid_NextPoint,swig_arginfo_obfreegrid_nextpoint)
 SWIG_ZEND_NAMED_FE(new_obgriddata,_wrap_new_OBGridData,swig_arginfo_new_obgriddata)
 SWIG_ZEND_NAMED_FE(obgriddata_getxaxis,_wrap_OBGridData_GetXAxis,swig_arginfo_obgriddata_getxaxis)
 SWIG_ZEND_NAMED_FE(obgriddata_getyaxis,_wrap_OBGridData_GetYAxis,swig_arginfo_obgriddata_getyaxis)
 SWIG_ZEND_NAMED_FE(obgriddata_getzaxis,_wrap_OBGridData_GetZAxis,swig_arginfo_obgriddata_getzaxis)
 SWIG_ZEND_NAMED_FE(obgriddata_getaxes,_wrap_OBGridData_GetAxes,swig_arginfo_obgriddata_getaxes)
 SWIG_ZEND_NAMED_FE(obgriddata_getnumberofpoints,_wrap_OBGridData_GetNumberOfPoints,swig_arginfo_obgriddata_getnumberofpoints)
 SWIG_ZEND_NAMED_FE(obgriddata_getnumberofsteps,_wrap_OBGridData_GetNumberOfSteps,swig_arginfo_obgriddata_getnumberofsteps)
 SWIG_ZEND_NAMED_FE(obgriddata_getvalues,_wrap_OBGridData_GetValues,swig_arginfo_obgriddata_getvalues)
 SWIG_ZEND_NAMED_FE(obgriddata_getvalue,_wrap_OBGridData_GetValue,swig_arginfo_obgriddata_getvalue)
 SWIG_ZEND_NAMED_FE(obgriddata_getunit,_wrap_OBGridData_GetUnit,swig_arginfo_obgriddata_getunit)
 SWIG_ZEND_NAMED_FE(obgriddata_getminvalue,_wrap_OBGridData_GetMinValue,swig_arginfo_obgriddata_getminvalue)
 SWIG_ZEND_NAMED_FE(obgriddata_getmaxvalue,_wrap_OBGridData_GetMaxValue,swig_arginfo_obgriddata_getmaxvalue)
 SWIG_ZEND_NAMED_FE(obgriddata_getoriginvector,_wrap_OBGridData_GetOriginVector,swig_arginfo_obgriddata_getoriginvector)
 SWIG_ZEND_NAMED_FE(obgriddata_getmaxvector,_wrap_OBGridData_GetMaxVector,swig_arginfo_obgriddata_getmaxvector)
 SWIG_ZEND_NAMED_FE(obgriddata_getunrestricted,_wrap_OBGridData_GetUnrestricted,swig_arginfo_obgriddata_getunrestricted)
 SWIG_ZEND_NAMED_FE(obgriddata_getnumsymmetries,_wrap_OBGridData_GetNumSymmetries,swig_arginfo_obgriddata_getnumsymmetries)
 SWIG_ZEND_NAMED_FE(obgriddata_setnumberofpoints,_wrap_OBGridData_SetNumberOfPoints,swig_arginfo_obgriddata_setnumberofpoints)
 SWIG_ZEND_NAMED_FE(obgriddata_setlimits,_wrap_OBGridData_SetLimits,swig_arginfo_obgriddata_setlimits)
 SWIG_ZEND_NAMED_FE(obgriddata_setvalue,_wrap_OBGridData_SetValue,swig_arginfo_obgriddata_setvalue)
 SWIG_ZEND_NAMED_FE(obgriddata_setvalues,_wrap_OBGridData_SetValues,swig_arginfo_obgriddata_setvalues)
 SWIG_ZEND_NAMED_FE(obgriddata_setunit,_wrap_OBGridData_SetUnit,swig_arginfo_obgriddata_setunit)
 SWIG_ZEND_NAMED_FE(obgriddata_setunrestricted,_wrap_OBGridData_SetUnrestricted,swig_arginfo_obgriddata_setunrestricted)
 SWIG_ZEND_NAMED_FE(obgriddata_setnumsymmetries,_wrap_OBGridData_SetNumSymmetries,swig_arginfo_obgriddata_setnumsymmetries)
 SWIG_ZEND_NAMED_FE(new_obchainsparser,_wrap_new_OBChainsParser,swig_arginfo_new_obchainsparser)
 SWIG_ZEND_NAMED_FE(obchainsparser_perceivechains,_wrap_OBChainsParser_PerceiveChains,swig_arginfo_obchainsparser_perceivechains)
 SWIG_ZEND_NAMED_FE(new_obatomtyper,_wrap_new_OBAtomTyper,swig_arginfo_new_obatomtyper)
 SWIG_ZEND_NAMED_FE(obatomtyper_assignhyb,_wrap_OBAtomTyper_AssignHyb,swig_arginfo_obatomtyper_assignhyb)
 SWIG_ZEND_NAMED_FE(obatomtyper_assigntypes,_wrap_OBAtomTyper_AssignTypes,swig_arginfo_obatomtyper_assigntypes)
 SWIG_ZEND_NAMED_FE(obatomtyper_assignimplicitvalence,_wrap_OBAtomTyper_AssignImplicitValence,swig_arginfo_obatomtyper_assignimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatomtyper_correctaromaticnitrogens,_wrap_OBAtomTyper_CorrectAromaticNitrogens,swig_arginfo_obatomtyper_correctaromaticnitrogens)
 SWIG_ZEND_NAMED_FE(new_obaromatictyper,_wrap_new_OBAromaticTyper,swig_arginfo_new_obaromatictyper)
 SWIG_ZEND_NAMED_FE(obaromatictyper_assignaromaticflags,_wrap_OBAromaticTyper_AssignAromaticFlags,swig_arginfo_obaromatictyper_assignaromaticflags)
 SWIG_ZEND_NAMED_FE(obaromatictyper_propagatepotentialaromatic,_wrap_OBAromaticTyper_PropagatePotentialAromatic,swig_arginfo_obaromatictyper_propagatepotentialaromatic)
 SWIG_ZEND_NAMED_FE(obaromatictyper_selectrootatoms,_wrap_OBAromaticTyper_SelectRootAtoms,swig_arginfo_obaromatictyper_selectrootatoms)
 SWIG_ZEND_NAMED_FE(obaromatictyper_excludesmallring,_wrap_OBAromaticTyper_ExcludeSmallRing,swig_arginfo_obaromatictyper_excludesmallring)
 SWIG_ZEND_NAMED_FE(obaromatictyper_checkaromaticity,_wrap_OBAromaticTyper_CheckAromaticity,swig_arginfo_obaromatictyper_checkaromaticity)
 SWIG_ZEND_NAMED_FE(obaromatictyper_traversecycle,_wrap_OBAromaticTyper_TraverseCycle,swig_arginfo_obaromatictyper_traversecycle)
 SWIG_ZEND_NAMED_FE(new_obringtyper,_wrap_new_OBRingTyper,swig_arginfo_new_obringtyper)
 SWIG_ZEND_NAMED_FE(obringtyper_assigntypes,_wrap_OBRingTyper_AssignTypes,swig_arginfo_obringtyper_assigntypes)
 SWIG_ZEND_NAMED_FE(new_dummy,_wrap_new_dummy,swig_arginfo_new_dummy)
 SWIG_ZEND_NAMED_FE(new_charptrless,_wrap_new_CharPtrLess,swig_arginfo_new_charptrless)
 SWIG_ZEND_NAMED_FE(obplugin_description,_wrap_OBPlugin_Description,swig_arginfo_obplugin_description)
 SWIG_ZEND_NAMED_FE(obplugin_typeid,_wrap_OBPlugin_TypeID,swig_arginfo_obplugin_typeid)
 SWIG_ZEND_NAMED_FE(obplugin_display,_wrap_OBPlugin_Display,swig_arginfo_obplugin_display)
 SWIG_ZEND_NAMED_FE(obplugin_makeinstance,_wrap_OBPlugin_MakeInstance,swig_arginfo_obplugin_makeinstance)
 SWIG_ZEND_NAMED_FE(obplugin_init,_wrap_OBPlugin_Init,swig_arginfo_obplugin_init)
 SWIG_ZEND_NAMED_FE(obplugin_getplugin,_wrap_OBPlugin_GetPlugin,swig_arginfo_obplugin_getplugin)
 SWIG_ZEND_NAMED_FE(obplugin_getid,_wrap_OBPlugin_GetID,swig_arginfo_obplugin_getid)
 SWIG_ZEND_NAMED_FE(obplugin_listasvector,_wrap_OBPlugin_ListAsVector,swig_arginfo_obplugin_listasvector)
 SWIG_ZEND_NAMED_FE(obplugin_c_list,_wrap_OBPlugin_c_List,swig_arginfo_obplugin_c_list)
 SWIG_ZEND_NAMED_FE(obplugin_listasstring,_wrap_OBPlugin_ListAsString,swig_arginfo_obplugin_listasstring)
 SWIG_ZEND_NAMED_FE(obplugin_firstline,_wrap_OBPlugin_FirstLine,swig_arginfo_obplugin_firstline)
 SWIG_ZEND_NAMED_FE(obplugin_begin,_wrap_OBPlugin_Begin,swig_arginfo_obplugin_begin)
 SWIG_ZEND_NAMED_FE(obplugin_end,_wrap_OBPlugin_End,swig_arginfo_obplugin_end)
 SWIG_ZEND_NAMED_FE(obplugin_getmap,_wrap_OBPlugin_GetMap,swig_arginfo_obplugin_getmap)
 SWIG_ZEND_NAMED_FE(obplugin_loadallplugins,_wrap_OBPlugin_LoadAllPlugins,swig_arginfo_obplugin_loadallplugins)
 SWIG_ZEND_NAMED_FE(new_stringbuf,_wrap_new_stringbuf,swig_arginfo_new_stringbuf)
 SWIG_ZEND_NAMED_FE(new_oberror,_wrap_new_OBError,swig_arginfo_new_oberror)
 SWIG_ZEND_NAMED_FE(oberror_message,_wrap_OBError_message,swig_arginfo_oberror_message)
 SWIG_ZEND_NAMED_FE(oberror_getmethod,_wrap_OBError_GetMethod,swig_arginfo_oberror_getmethod)
 SWIG_ZEND_NAMED_FE(oberror_geterror,_wrap_OBError_GetError,swig_arginfo_oberror_geterror)
 SWIG_ZEND_NAMED_FE(oberror_getexplanation,_wrap_OBError_GetExplanation,swig_arginfo_oberror_getexplanation)
 SWIG_ZEND_NAMED_FE(oberror_getpossiblecause,_wrap_OBError_GetPossibleCause,swig_arginfo_oberror_getpossiblecause)
 SWIG_ZEND_NAMED_FE(oberror_getsuggestedremedy,_wrap_OBError_GetSuggestedRemedy,swig_arginfo_oberror_getsuggestedremedy)
 SWIG_ZEND_NAMED_FE(oberror_getlevel,_wrap_OBError_GetLevel,swig_arginfo_oberror_getlevel)
 SWIG_ZEND_NAMED_FE(new_obmessagehandler,_wrap_new_OBMessageHandler,swig_arginfo_new_obmessagehandler)
 SWIG_ZEND_NAMED_FE(obmessagehandler_throwerror,_wrap_OBMessageHandler_ThrowError,swig_arginfo_obmessagehandler_throwerror)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getmessagesoflevel,_wrap_OBMessageHandler_GetMessagesOfLevel,swig_arginfo_obmessagehandler_getmessagesoflevel)
 SWIG_ZEND_NAMED_FE(obmessagehandler_startlogging,_wrap_OBMessageHandler_StartLogging,swig_arginfo_obmessagehandler_startlogging)
 SWIG_ZEND_NAMED_FE(obmessagehandler_stoplogging,_wrap_OBMessageHandler_StopLogging,swig_arginfo_obmessagehandler_stoplogging)
 SWIG_ZEND_NAMED_FE(obmessagehandler_setmaxlogentries,_wrap_OBMessageHandler_SetMaxLogEntries,swig_arginfo_obmessagehandler_setmaxlogentries)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getmaxlogentries,_wrap_OBMessageHandler_GetMaxLogEntries,swig_arginfo_obmessagehandler_getmaxlogentries)
 SWIG_ZEND_NAMED_FE(obmessagehandler_clearlog,_wrap_OBMessageHandler_ClearLog,swig_arginfo_obmessagehandler_clearlog)
 SWIG_ZEND_NAMED_FE(obmessagehandler_setoutputlevel,_wrap_OBMessageHandler_SetOutputLevel,swig_arginfo_obmessagehandler_setoutputlevel)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getoutputlevel,_wrap_OBMessageHandler_GetOutputLevel,swig_arginfo_obmessagehandler_getoutputlevel)
 SWIG_ZEND_NAMED_FE(obmessagehandler_setoutputstream,_wrap_OBMessageHandler_SetOutputStream,swig_arginfo_obmessagehandler_setoutputstream)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getoutputstream,_wrap_OBMessageHandler_GetOutputStream,swig_arginfo_obmessagehandler_getoutputstream)
 SWIG_ZEND_NAMED_FE(obmessagehandler_starterrorwrap,_wrap_OBMessageHandler_StartErrorWrap,swig_arginfo_obmessagehandler_starterrorwrap)
 SWIG_ZEND_NAMED_FE(obmessagehandler_stoperrorwrap,_wrap_OBMessageHandler_StopErrorWrap,swig_arginfo_obmessagehandler_stoperrorwrap)
 SWIG_ZEND_NAMED_FE(obmessagehandler_geterrormessagecount,_wrap_OBMessageHandler_GetErrorMessageCount,swig_arginfo_obmessagehandler_geterrormessagecount)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getwarningmessagecount,_wrap_OBMessageHandler_GetWarningMessageCount,swig_arginfo_obmessagehandler_getwarningmessagecount)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getinfomessagecount,_wrap_OBMessageHandler_GetInfoMessageCount,swig_arginfo_obmessagehandler_getinfomessagecount)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getauditmessagecount,_wrap_OBMessageHandler_GetAuditMessageCount,swig_arginfo_obmessagehandler_getauditmessagecount)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getdebugmessagecount,_wrap_OBMessageHandler_GetDebugMessageCount,swig_arginfo_obmessagehandler_getdebugmessagecount)
 SWIG_ZEND_NAMED_FE(obmessagehandler_getmessagesummary,_wrap_OBMessageHandler_GetMessageSummary,swig_arginfo_obmessagehandler_getmessagesummary)
 SWIG_ZEND_NAMED_FE(oberrorlog_set,_wrap_obErrorLog_set,swig_arginfo_oberrorlog_set)
 SWIG_ZEND_NAMED_FE(oberrorlog_get,_wrap_obErrorLog_get,swig_arginfo_oberrorlog_get)
 SWIG_ZEND_NAMED_FE(new_oblogbuf,_wrap_new_obLogBuf,swig_arginfo_new_oblogbuf)
 SWIG_ZEND_NAMED_FE(obformat_c_default,_wrap_OBFormat_c_Default,swig_arginfo_obformat_c_default)
 SWIG_ZEND_NAMED_FE(obformat_findtype,_wrap_OBFormat_FindType,swig_arginfo_obformat_findtype)
 SWIG_ZEND_NAMED_FE(obformat_readmolecule,_wrap_OBFormat_ReadMolecule,swig_arginfo_obformat_readmolecule)
 SWIG_ZEND_NAMED_FE(obformat_readchemobject,_wrap_OBFormat_ReadChemObject,swig_arginfo_obformat_readchemobject)
 SWIG_ZEND_NAMED_FE(obformat_writemolecule,_wrap_OBFormat_WriteMolecule,swig_arginfo_obformat_writemolecule)
 SWIG_ZEND_NAMED_FE(obformat_writechemobject,_wrap_OBFormat_WriteChemObject,swig_arginfo_obformat_writechemobject)
 SWIG_ZEND_NAMED_FE(obformat_targetclassdescription,_wrap_OBFormat_TargetClassDescription,swig_arginfo_obformat_targetclassdescription)
 SWIG_ZEND_NAMED_FE(obformat_gettype,_wrap_OBFormat_GetType,swig_arginfo_obformat_gettype)
 SWIG_ZEND_NAMED_FE(obformat_specificationurl,_wrap_OBFormat_SpecificationURL,swig_arginfo_obformat_specificationurl)
 SWIG_ZEND_NAMED_FE(obformat_getmimetype,_wrap_OBFormat_GetMIMEType,swig_arginfo_obformat_getmimetype)
 SWIG_ZEND_NAMED_FE(obformat_flags,_wrap_OBFormat_Flags,swig_arginfo_obformat_flags)
 SWIG_ZEND_NAMED_FE(obformat_skipobjects,_wrap_OBFormat_SkipObjects,swig_arginfo_obformat_skipobjects)
 SWIG_ZEND_NAMED_FE(obformat_makenewinstance,_wrap_OBFormat_MakeNewInstance,swig_arginfo_obformat_makenewinstance)
 SWIG_ZEND_NAMED_FE(obformat_registerformat,_wrap_OBFormat_RegisterFormat,swig_arginfo_obformat_registerformat)
 SWIG_ZEND_NAMED_FE(obformat_display,_wrap_OBFormat_Display,swig_arginfo_obformat_display)
 SWIG_ZEND_NAMED_FE(obformat_formatfrommime,_wrap_OBFormat_FormatFromMIME,swig_arginfo_obformat_formatfrommime)
 SWIG_ZEND_NAMED_FE(new_obconversion,_wrap_new_OBConversion,swig_arginfo_new_obconversion)
 SWIG_ZEND_NAMED_FE(obconversion_registerformat,_wrap_OBConversion_RegisterFormat,swig_arginfo_obconversion_registerformat)
 SWIG_ZEND_NAMED_FE(obconversion_findformat,_wrap_OBConversion_FindFormat,swig_arginfo_obconversion_findformat)
 SWIG_ZEND_NAMED_FE(obconversion_formatfromext,_wrap_OBConversion_FormatFromExt,swig_arginfo_obconversion_formatfromext)
 SWIG_ZEND_NAMED_FE(obconversion_formatfrommime,_wrap_OBConversion_FormatFromMIME,swig_arginfo_obconversion_formatfrommime)
 SWIG_ZEND_NAMED_FE(obconversion_description,_wrap_OBConversion_Description,swig_arginfo_obconversion_description)
 SWIG_ZEND_NAMED_FE(obconversion_getinstream,_wrap_OBConversion_GetInStream,swig_arginfo_obconversion_getinstream)
 SWIG_ZEND_NAMED_FE(obconversion_getoutstream,_wrap_OBConversion_GetOutStream,swig_arginfo_obconversion_getoutstream)
 SWIG_ZEND_NAMED_FE(obconversion_setinstream,_wrap_OBConversion_SetInStream,swig_arginfo_obconversion_setinstream)
 SWIG_ZEND_NAMED_FE(obconversion_setoutstream,_wrap_OBConversion_SetOutStream,swig_arginfo_obconversion_setoutstream)
 SWIG_ZEND_NAMED_FE(obconversion_setinandoutformats,_wrap_OBConversion_SetInAndOutFormats,swig_arginfo_obconversion_setinandoutformats)
 SWIG_ZEND_NAMED_FE(obconversion_setinformat,_wrap_OBConversion_SetInFormat,swig_arginfo_obconversion_setinformat)
 SWIG_ZEND_NAMED_FE(obconversion_setoutformat,_wrap_OBConversion_SetOutFormat,swig_arginfo_obconversion_setoutformat)
 SWIG_ZEND_NAMED_FE(obconversion_getinformat,_wrap_OBConversion_GetInFormat,swig_arginfo_obconversion_getinformat)
 SWIG_ZEND_NAMED_FE(obconversion_getoutformat,_wrap_OBConversion_GetOutFormat,swig_arginfo_obconversion_getoutformat)
 SWIG_ZEND_NAMED_FE(obconversion_getingzipped,_wrap_OBConversion_GetInGzipped,swig_arginfo_obconversion_getingzipped)
 SWIG_ZEND_NAMED_FE(obconversion_getoutgzipped,_wrap_OBConversion_GetOutGzipped,swig_arginfo_obconversion_getoutgzipped)
 SWIG_ZEND_NAMED_FE(obconversion_getinfilename,_wrap_OBConversion_GetInFilename,swig_arginfo_obconversion_getinfilename)
 SWIG_ZEND_NAMED_FE(obconversion_getoutfilename,_wrap_OBConversion_GetOutFilename,swig_arginfo_obconversion_getoutfilename)
 SWIG_ZEND_NAMED_FE(obconversion_getinpos,_wrap_OBConversion_GetInPos,swig_arginfo_obconversion_getinpos)
 SWIG_ZEND_NAMED_FE(obconversion_getinlen,_wrap_OBConversion_GetInLen,swig_arginfo_obconversion_getinlen)
 SWIG_ZEND_NAMED_FE(obconversion_gettitle,_wrap_OBConversion_GetTitle,swig_arginfo_obconversion_gettitle)
 SWIG_ZEND_NAMED_FE(obconversion_getauxconv,_wrap_OBConversion_GetAuxConv,swig_arginfo_obconversion_getauxconv)
 SWIG_ZEND_NAMED_FE(obconversion_setauxconv,_wrap_OBConversion_SetAuxConv,swig_arginfo_obconversion_setauxconv)
 SWIG_ZEND_NAMED_FE(obconversion_isoption,_wrap_OBConversion_IsOption,swig_arginfo_obconversion_isoption)
 SWIG_ZEND_NAMED_FE(obconversion_getoptions,_wrap_OBConversion_GetOptions,swig_arginfo_obconversion_getoptions)
 SWIG_ZEND_NAMED_FE(obconversion_addoption,_wrap_OBConversion_AddOption,swig_arginfo_obconversion_addoption)
 SWIG_ZEND_NAMED_FE(obconversion_removeoption,_wrap_OBConversion_RemoveOption,swig_arginfo_obconversion_removeoption)
 SWIG_ZEND_NAMED_FE(obconversion_setoptions,_wrap_OBConversion_SetOptions,swig_arginfo_obconversion_setoptions)
 SWIG_ZEND_NAMED_FE(obconversion_registeroptionparam,_wrap_OBConversion_RegisterOptionParam,swig_arginfo_obconversion_registeroptionparam)
 SWIG_ZEND_NAMED_FE(obconversion_getoptionparams,_wrap_OBConversion_GetOptionParams,swig_arginfo_obconversion_getoptionparams)
 SWIG_ZEND_NAMED_FE(obconversion_copyoptions,_wrap_OBConversion_CopyOptions,swig_arginfo_obconversion_copyoptions)
 SWIG_ZEND_NAMED_FE(obconversion_getsupportedinputformat,_wrap_OBConversion_GetSupportedInputFormat,swig_arginfo_obconversion_getsupportedinputformat)
 SWIG_ZEND_NAMED_FE(obconversion_getsupportedoutputformat,_wrap_OBConversion_GetSupportedOutputFormat,swig_arginfo_obconversion_getsupportedoutputformat)
 SWIG_ZEND_NAMED_FE(obconversion_convert,_wrap_OBConversion_Convert,swig_arginfo_obconversion_convert)
 SWIG_ZEND_NAMED_FE(obconversion_fullconvert,_wrap_OBConversion_FullConvert,swig_arginfo_obconversion_fullconvert)
 SWIG_ZEND_NAMED_FE(obconversion_addchemobject,_wrap_OBConversion_AddChemObject,swig_arginfo_obconversion_addchemobject)
 SWIG_ZEND_NAMED_FE(obconversion_getchemobject,_wrap_OBConversion_GetChemObject,swig_arginfo_obconversion_getchemobject)
 SWIG_ZEND_NAMED_FE(obconversion_islast,_wrap_OBConversion_IsLast,swig_arginfo_obconversion_islast)
 SWIG_ZEND_NAMED_FE(obconversion_isfirstinput,_wrap_OBConversion_IsFirstInput,swig_arginfo_obconversion_isfirstinput)
 SWIG_ZEND_NAMED_FE(obconversion_setfirstinput,_wrap_OBConversion_SetFirstInput,swig_arginfo_obconversion_setfirstinput)
 SWIG_ZEND_NAMED_FE(obconversion_getoutputindex,_wrap_OBConversion_GetOutputIndex,swig_arginfo_obconversion_getoutputindex)
 SWIG_ZEND_NAMED_FE(obconversion_setoutputindex,_wrap_OBConversion_SetOutputIndex,swig_arginfo_obconversion_setoutputindex)
 SWIG_ZEND_NAMED_FE(obconversion_setmorefilestocome,_wrap_OBConversion_SetMoreFilesToCome,swig_arginfo_obconversion_setmorefilestocome)
 SWIG_ZEND_NAMED_FE(obconversion_setoneobjectonly,_wrap_OBConversion_SetOneObjectOnly,swig_arginfo_obconversion_setoneobjectonly)
 SWIG_ZEND_NAMED_FE(obconversion_setlast,_wrap_OBConversion_SetLast,swig_arginfo_obconversion_setlast)
 SWIG_ZEND_NAMED_FE(obconversion_islastfile,_wrap_OBConversion_IsLastFile,swig_arginfo_obconversion_islastfile)
 SWIG_ZEND_NAMED_FE(obconversion_getcount,_wrap_OBConversion_GetCount,swig_arginfo_obconversion_getcount)
 SWIG_ZEND_NAMED_FE(obconversion_getdefaultformat,_wrap_OBConversion_GetDefaultFormat,swig_arginfo_obconversion_getdefaultformat)
 SWIG_ZEND_NAMED_FE(obconversion_write,_wrap_OBConversion_Write,swig_arginfo_obconversion_write)
 SWIG_ZEND_NAMED_FE(obconversion_writestring,_wrap_OBConversion_WriteString,swig_arginfo_obconversion_writestring)
 SWIG_ZEND_NAMED_FE(obconversion_writefile,_wrap_OBConversion_WriteFile,swig_arginfo_obconversion_writefile)
 SWIG_ZEND_NAMED_FE(obconversion_closeoutfile,_wrap_OBConversion_CloseOutFile,swig_arginfo_obconversion_closeoutfile)
 SWIG_ZEND_NAMED_FE(obconversion_read,_wrap_OBConversion_Read,swig_arginfo_obconversion_read)
 SWIG_ZEND_NAMED_FE(obconversion_readstring,_wrap_OBConversion_ReadString,swig_arginfo_obconversion_readstring)
 SWIG_ZEND_NAMED_FE(obconversion_readfile,_wrap_OBConversion_ReadFile,swig_arginfo_obconversion_readfile)
 SWIG_ZEND_NAMED_FE(obconversion_openinandoutfiles,_wrap_OBConversion_OpenInAndOutFiles,swig_arginfo_obconversion_openinandoutfiles)
 SWIG_ZEND_NAMED_FE(obconversion_reportnumberconverted,_wrap_OBConversion_ReportNumberConverted,swig_arginfo_obconversion_reportnumberconverted)
 SWIG_ZEND_NAMED_FE(obconversion_numinputobjects,_wrap_OBConversion_NumInputObjects,swig_arginfo_obconversion_numinputobjects)
 SWIG_ZEND_NAMED_FE(new_obresidue,_wrap_new_OBResidue,swig_arginfo_new_obresidue)
 SWIG_ZEND_NAMED_FE(obresidue_addatom,_wrap_OBResidue_AddAtom,swig_arginfo_obresidue_addatom)
 SWIG_ZEND_NAMED_FE(obresidue_insertatom,_wrap_OBResidue_InsertAtom,swig_arginfo_obresidue_insertatom)
 SWIG_ZEND_NAMED_FE(obresidue_removeatom,_wrap_OBResidue_RemoveAtom,swig_arginfo_obresidue_removeatom)
 SWIG_ZEND_NAMED_FE(obresidue_setname,_wrap_OBResidue_SetName,swig_arginfo_obresidue_setname)
 SWIG_ZEND_NAMED_FE(obresidue_setnum,_wrap_OBResidue_SetNum,swig_arginfo_obresidue_setnum)
 SWIG_ZEND_NAMED_FE(obresidue_setchain,_wrap_OBResidue_SetChain,swig_arginfo_obresidue_setchain)
 SWIG_ZEND_NAMED_FE(obresidue_setchainnum,_wrap_OBResidue_SetChainNum,swig_arginfo_obresidue_setchainnum)
 SWIG_ZEND_NAMED_FE(obresidue_setidx,_wrap_OBResidue_SetIdx,swig_arginfo_obresidue_setidx)
 SWIG_ZEND_NAMED_FE(obresidue_setinsertioncode,_wrap_OBResidue_SetInsertionCode,swig_arginfo_obresidue_setinsertioncode)
 SWIG_ZEND_NAMED_FE(obresidue_setatomid,_wrap_OBResidue_SetAtomID,swig_arginfo_obresidue_setatomid)
 SWIG_ZEND_NAMED_FE(obresidue_sethetatom,_wrap_OBResidue_SetHetAtom,swig_arginfo_obresidue_sethetatom)
 SWIG_ZEND_NAMED_FE(obresidue_setserialnum,_wrap_OBResidue_SetSerialNum,swig_arginfo_obresidue_setserialnum)
 SWIG_ZEND_NAMED_FE(obresidue_getname,_wrap_OBResidue_GetName,swig_arginfo_obresidue_getname)
 SWIG_ZEND_NAMED_FE(obresidue_getnum,_wrap_OBResidue_GetNum,swig_arginfo_obresidue_getnum)
 SWIG_ZEND_NAMED_FE(obresidue_getnumstring,_wrap_OBResidue_GetNumString,swig_arginfo_obresidue_getnumstring)
 SWIG_ZEND_NAMED_FE(obresidue_getnumatoms,_wrap_OBResidue_GetNumAtoms,swig_arginfo_obresidue_getnumatoms)
 SWIG_ZEND_NAMED_FE(obresidue_getchain,_wrap_OBResidue_GetChain,swig_arginfo_obresidue_getchain)
 SWIG_ZEND_NAMED_FE(obresidue_getchainnum,_wrap_OBResidue_GetChainNum,swig_arginfo_obresidue_getchainnum)
 SWIG_ZEND_NAMED_FE(obresidue_getidx,_wrap_OBResidue_GetIdx,swig_arginfo_obresidue_getidx)
 SWIG_ZEND_NAMED_FE(obresidue_getreskey,_wrap_OBResidue_GetResKey,swig_arginfo_obresidue_getreskey)
 SWIG_ZEND_NAMED_FE(obresidue_getatoms,_wrap_OBResidue_GetAtoms,swig_arginfo_obresidue_getatoms)
 SWIG_ZEND_NAMED_FE(obresidue_getbonds,_wrap_OBResidue_GetBonds,swig_arginfo_obresidue_getbonds)
 SWIG_ZEND_NAMED_FE(obresidue_getatomid,_wrap_OBResidue_GetAtomID,swig_arginfo_obresidue_getatomid)
 SWIG_ZEND_NAMED_FE(obresidue_getserialnum,_wrap_OBResidue_GetSerialNum,swig_arginfo_obresidue_getserialnum)
 SWIG_ZEND_NAMED_FE(obresidue_getinsertioncode,_wrap_OBResidue_GetInsertionCode,swig_arginfo_obresidue_getinsertioncode)
 SWIG_ZEND_NAMED_FE(obresidue_getaminoacidproperty,_wrap_OBResidue_GetAminoAcidProperty,swig_arginfo_obresidue_getaminoacidproperty)
 SWIG_ZEND_NAMED_FE(obresidue_getatomproperty,_wrap_OBResidue_GetAtomProperty,swig_arginfo_obresidue_getatomproperty)
 SWIG_ZEND_NAMED_FE(obresidue_getresidueproperty,_wrap_OBResidue_GetResidueProperty,swig_arginfo_obresidue_getresidueproperty)
 SWIG_ZEND_NAMED_FE(obresidue_ishetatom,_wrap_OBResidue_IsHetAtom,swig_arginfo_obresidue_ishetatom)
 SWIG_ZEND_NAMED_FE(obresidue_isresiduetype,_wrap_OBResidue_IsResidueType,swig_arginfo_obresidue_isresiduetype)
 SWIG_ZEND_NAMED_FE(obresidue_beginatoms,_wrap_OBResidue_BeginAtoms,swig_arginfo_obresidue_beginatoms)
 SWIG_ZEND_NAMED_FE(obresidue_endatoms,_wrap_OBResidue_EndAtoms,swig_arginfo_obresidue_endatoms)
 SWIG_ZEND_NAMED_FE(obresidue_beginatom,_wrap_OBResidue_BeginAtom,swig_arginfo_obresidue_beginatom)
 SWIG_ZEND_NAMED_FE(obresidue_nextatom,_wrap_OBResidue_NextAtom,swig_arginfo_obresidue_nextatom)
 SWIG_ZEND_NAMED_FE(residue_set,_wrap_Residue_set,swig_arginfo_residue_set)
 SWIG_ZEND_NAMED_FE(residue_get,_wrap_Residue_get,swig_arginfo_residue_get)
 SWIG_ZEND_NAMED_FE(elemdesc_set,_wrap_ElemDesc_set,swig_arginfo_elemdesc_set)
 SWIG_ZEND_NAMED_FE(elemdesc_get,_wrap_ElemDesc_get,swig_arginfo_elemdesc_get)
 SWIG_ZEND_NAMED_FE(resno_set,_wrap_ResNo_set,swig_arginfo_resno_set)
 SWIG_ZEND_NAMED_FE(resno_get,_wrap_ResNo_get,swig_arginfo_resno_get)
 SWIG_ZEND_NAMED_FE(elemno_set,_wrap_ElemNo_set,swig_arginfo_elemno_set)
 SWIG_ZEND_NAMED_FE(elemno_get,_wrap_ElemNo_get,swig_arginfo_elemno_get)
 SWIG_ZEND_NAMED_FE(obinternalcoord__a_set,_wrap_OBInternalCoord__a_set,swig_arginfo_obinternalcoord__a_set)
 SWIG_ZEND_NAMED_FE(obinternalcoord__a_get,_wrap_OBInternalCoord__a_get,swig_arginfo_obinternalcoord__a_get)
 SWIG_ZEND_NAMED_FE(obinternalcoord__b_set,_wrap_OBInternalCoord__b_set,swig_arginfo_obinternalcoord__b_set)
 SWIG_ZEND_NAMED_FE(obinternalcoord__b_get,_wrap_OBInternalCoord__b_get,swig_arginfo_obinternalcoord__b_get)
 SWIG_ZEND_NAMED_FE(obinternalcoord__c_set,_wrap_OBInternalCoord__c_set,swig_arginfo_obinternalcoord__c_set)
 SWIG_ZEND_NAMED_FE(obinternalcoord__c_get,_wrap_OBInternalCoord__c_get,swig_arginfo_obinternalcoord__c_get)
 SWIG_ZEND_NAMED_FE(obinternalcoord__dst_set,_wrap_OBInternalCoord__dst_set,swig_arginfo_obinternalcoord__dst_set)
 SWIG_ZEND_NAMED_FE(obinternalcoord__dst_get,_wrap_OBInternalCoord__dst_get,swig_arginfo_obinternalcoord__dst_get)
 SWIG_ZEND_NAMED_FE(obinternalcoord__ang_set,_wrap_OBInternalCoord__ang_set,swig_arginfo_obinternalcoord__ang_set)
 SWIG_ZEND_NAMED_FE(obinternalcoord__ang_get,_wrap_OBInternalCoord__ang_get,swig_arginfo_obinternalcoord__ang_get)
 SWIG_ZEND_NAMED_FE(obinternalcoord__tor_set,_wrap_OBInternalCoord__tor_set,swig_arginfo_obinternalcoord__tor_set)
 SWIG_ZEND_NAMED_FE(obinternalcoord__tor_get,_wrap_OBInternalCoord__tor_get,swig_arginfo_obinternalcoord__tor_get)
 SWIG_ZEND_NAMED_FE(new_obinternalcoord,_wrap_new_OBInternalCoord,swig_arginfo_new_obinternalcoord)
 SWIG_ZEND_NAMED_FE(obatom_visit_set,_wrap_OBAtom_Visit_set,swig_arginfo_obatom_visit_set)
 SWIG_ZEND_NAMED_FE(obatom_visit_get,_wrap_OBAtom_Visit_get,swig_arginfo_obatom_visit_get)
 SWIG_ZEND_NAMED_FE(new_obatom,_wrap_new_OBAtom,swig_arginfo_new_obatom)
 SWIG_ZEND_NAMED_FE(obatom_duplicate,_wrap_OBAtom_Duplicate,swig_arginfo_obatom_duplicate)
 SWIG_ZEND_NAMED_FE(obatom_setidx,_wrap_OBAtom_SetIdx,swig_arginfo_obatom_setidx)
 SWIG_ZEND_NAMED_FE(obatom_setid,_wrap_OBAtom_SetId,swig_arginfo_obatom_setid)
 SWIG_ZEND_NAMED_FE(obatom_sethyb,_wrap_OBAtom_SetHyb,swig_arginfo_obatom_sethyb)
 SWIG_ZEND_NAMED_FE(obatom_setatomicnum,_wrap_OBAtom_SetAtomicNum,swig_arginfo_obatom_setatomicnum)
 SWIG_ZEND_NAMED_FE(obatom_setisotope,_wrap_OBAtom_SetIsotope,swig_arginfo_obatom_setisotope)
 SWIG_ZEND_NAMED_FE(obatom_setimplicitvalence,_wrap_OBAtom_SetImplicitValence,swig_arginfo_obatom_setimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatom_incrementimplicitvalence,_wrap_OBAtom_IncrementImplicitValence,swig_arginfo_obatom_incrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatom_decrementimplicitvalence,_wrap_OBAtom_DecrementImplicitValence,swig_arginfo_obatom_decrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatom_setformalcharge,_wrap_OBAtom_SetFormalCharge,swig_arginfo_obatom_setformalcharge)
 SWIG_ZEND_NAMED_FE(obatom_setspinmultiplicity,_wrap_OBAtom_SetSpinMultiplicity,swig_arginfo_obatom_setspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obatom_settype,_wrap_OBAtom_SetType,swig_arginfo_obatom_settype)
 SWIG_ZEND_NAMED_FE(obatom_setpartialcharge,_wrap_OBAtom_SetPartialCharge,swig_arginfo_obatom_setpartialcharge)
 SWIG_ZEND_NAMED_FE(obatom_setcoordptr,_wrap_OBAtom_SetCoordPtr,swig_arginfo_obatom_setcoordptr)
 SWIG_ZEND_NAMED_FE(obatom_setvector,_wrap_OBAtom_SetVector,swig_arginfo_obatom_setvector)
 SWIG_ZEND_NAMED_FE(obatom_setresidue,_wrap_OBAtom_SetResidue,swig_arginfo_obatom_setresidue)
 SWIG_ZEND_NAMED_FE(obatom_setparent,_wrap_OBAtom_SetParent,swig_arginfo_obatom_setparent)
 SWIG_ZEND_NAMED_FE(obatom_setaromatic,_wrap_OBAtom_SetAromatic,swig_arginfo_obatom_setaromatic)
 SWIG_ZEND_NAMED_FE(obatom_unsetaromatic,_wrap_OBAtom_UnsetAromatic,swig_arginfo_obatom_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obatom_setclockwisestereo,_wrap_OBAtom_SetClockwiseStereo,swig_arginfo_obatom_setclockwisestereo)
 SWIG_ZEND_NAMED_FE(obatom_setanticlockwisestereo,_wrap_OBAtom_SetAntiClockwiseStereo,swig_arginfo_obatom_setanticlockwisestereo)
 SWIG_ZEND_NAMED_FE(obatom_setpositivestereo,_wrap_OBAtom_SetPositiveStereo,swig_arginfo_obatom_setpositivestereo)
 SWIG_ZEND_NAMED_FE(obatom_setnegativestereo,_wrap_OBAtom_SetNegativeStereo,swig_arginfo_obatom_setnegativestereo)
 SWIG_ZEND_NAMED_FE(obatom_unsetstereo,_wrap_OBAtom_UnsetStereo,swig_arginfo_obatom_unsetstereo)
 SWIG_ZEND_NAMED_FE(obatom_setinring,_wrap_OBAtom_SetInRing,swig_arginfo_obatom_setinring)
 SWIG_ZEND_NAMED_FE(obatom_setchiral,_wrap_OBAtom_SetChiral,swig_arginfo_obatom_setchiral)
 SWIG_ZEND_NAMED_FE(obatom_clearcoordptr,_wrap_OBAtom_ClearCoordPtr,swig_arginfo_obatom_clearcoordptr)
 SWIG_ZEND_NAMED_FE(obatom_getformalcharge,_wrap_OBAtom_GetFormalCharge,swig_arginfo_obatom_getformalcharge)
 SWIG_ZEND_NAMED_FE(obatom_getatomicnum,_wrap_OBAtom_GetAtomicNum,swig_arginfo_obatom_getatomicnum)
 SWIG_ZEND_NAMED_FE(obatom_getisotope,_wrap_OBAtom_GetIsotope,swig_arginfo_obatom_getisotope)
 SWIG_ZEND_NAMED_FE(obatom_getspinmultiplicity,_wrap_OBAtom_GetSpinMultiplicity,swig_arginfo_obatom_getspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obatom_getatomicmass,_wrap_OBAtom_GetAtomicMass,swig_arginfo_obatom_getatomicmass)
 SWIG_ZEND_NAMED_FE(obatom_getexactmass,_wrap_OBAtom_GetExactMass,swig_arginfo_obatom_getexactmass)
 SWIG_ZEND_NAMED_FE(obatom_getidx,_wrap_OBAtom_GetIdx,swig_arginfo_obatom_getidx)
 SWIG_ZEND_NAMED_FE(obatom_getindex,_wrap_OBAtom_GetIndex,swig_arginfo_obatom_getindex)
 SWIG_ZEND_NAMED_FE(obatom_getid,_wrap_OBAtom_GetId,swig_arginfo_obatom_getid)
 SWIG_ZEND_NAMED_FE(obatom_getcoordinateidx,_wrap_OBAtom_GetCoordinateIdx,swig_arginfo_obatom_getcoordinateidx)
 SWIG_ZEND_NAMED_FE(obatom_getcidx,_wrap_OBAtom_GetCIdx,swig_arginfo_obatom_getcidx)
 SWIG_ZEND_NAMED_FE(obatom_getvalence,_wrap_OBAtom_GetValence,swig_arginfo_obatom_getvalence)
 SWIG_ZEND_NAMED_FE(obatom_gethyb,_wrap_OBAtom_GetHyb,swig_arginfo_obatom_gethyb)
 SWIG_ZEND_NAMED_FE(obatom_getimplicitvalence,_wrap_OBAtom_GetImplicitValence,swig_arginfo_obatom_getimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatom_gethvyvalence,_wrap_OBAtom_GetHvyValence,swig_arginfo_obatom_gethvyvalence)
 SWIG_ZEND_NAMED_FE(obatom_getheterovalence,_wrap_OBAtom_GetHeteroValence,swig_arginfo_obatom_getheterovalence)
 SWIG_ZEND_NAMED_FE(obatom_gettype,_wrap_OBAtom_GetType,swig_arginfo_obatom_gettype)
 SWIG_ZEND_NAMED_FE(obatom_getx,_wrap_OBAtom_GetX,swig_arginfo_obatom_getx)
 SWIG_ZEND_NAMED_FE(obatom_gety,_wrap_OBAtom_GetY,swig_arginfo_obatom_gety)
 SWIG_ZEND_NAMED_FE(obatom_getz,_wrap_OBAtom_GetZ,swig_arginfo_obatom_getz)
 SWIG_ZEND_NAMED_FE(obatom_x,_wrap_OBAtom_x,swig_arginfo_obatom_x)
 SWIG_ZEND_NAMED_FE(obatom_y,_wrap_OBAtom_y,swig_arginfo_obatom_y)
 SWIG_ZEND_NAMED_FE(obatom_z,_wrap_OBAtom_z,swig_arginfo_obatom_z)
 SWIG_ZEND_NAMED_FE(obatom_getcoordinate,_wrap_OBAtom_GetCoordinate,swig_arginfo_obatom_getcoordinate)
 SWIG_ZEND_NAMED_FE(obatom_getvector,_wrap_OBAtom_GetVector,swig_arginfo_obatom_getvector)
 SWIG_ZEND_NAMED_FE(obatom_getpartialcharge,_wrap_OBAtom_GetPartialCharge,swig_arginfo_obatom_getpartialcharge)
 SWIG_ZEND_NAMED_FE(obatom_getresidue,_wrap_OBAtom_GetResidue,swig_arginfo_obatom_getresidue)
 SWIG_ZEND_NAMED_FE(obatom_getparent,_wrap_OBAtom_GetParent,swig_arginfo_obatom_getparent)
 SWIG_ZEND_NAMED_FE(obatom_getnewbondvector,_wrap_OBAtom_GetNewBondVector,swig_arginfo_obatom_getnewbondvector)
 SWIG_ZEND_NAMED_FE(obatom_getbond,_wrap_OBAtom_GetBond,swig_arginfo_obatom_getbond)
 SWIG_ZEND_NAMED_FE(obatom_getnextatom,_wrap_OBAtom_GetNextAtom,swig_arginfo_obatom_getnextatom)
 SWIG_ZEND_NAMED_FE(obatom_beginbonds,_wrap_OBAtom_BeginBonds,swig_arginfo_obatom_beginbonds)
 SWIG_ZEND_NAMED_FE(obatom_endbonds,_wrap_OBAtom_EndBonds,swig_arginfo_obatom_endbonds)
 SWIG_ZEND_NAMED_FE(obatom_beginbond,_wrap_OBAtom_BeginBond,swig_arginfo_obatom_beginbond)
 SWIG_ZEND_NAMED_FE(obatom_nextbond,_wrap_OBAtom_NextBond,swig_arginfo_obatom_nextbond)
 SWIG_ZEND_NAMED_FE(obatom_beginnbratom,_wrap_OBAtom_BeginNbrAtom,swig_arginfo_obatom_beginnbratom)
 SWIG_ZEND_NAMED_FE(obatom_nextnbratom,_wrap_OBAtom_NextNbrAtom,swig_arginfo_obatom_nextnbratom)
 SWIG_ZEND_NAMED_FE(obatom_getdistance,_wrap_OBAtom_GetDistance,swig_arginfo_obatom_getdistance)
 SWIG_ZEND_NAMED_FE(obatom_getangle,_wrap_OBAtom_GetAngle,swig_arginfo_obatom_getangle)
 SWIG_ZEND_NAMED_FE(obatom_newresidue,_wrap_OBAtom_NewResidue,swig_arginfo_obatom_newresidue)
 SWIG_ZEND_NAMED_FE(obatom_addresidue,_wrap_OBAtom_AddResidue,swig_arginfo_obatom_addresidue)
 SWIG_ZEND_NAMED_FE(obatom_deleteresidue,_wrap_OBAtom_DeleteResidue,swig_arginfo_obatom_deleteresidue)
 SWIG_ZEND_NAMED_FE(obatom_addbond,_wrap_OBAtom_AddBond,swig_arginfo_obatom_addbond)
 SWIG_ZEND_NAMED_FE(obatom_insertbond,_wrap_OBAtom_InsertBond,swig_arginfo_obatom_insertbond)
 SWIG_ZEND_NAMED_FE(obatom_deletebond,_wrap_OBAtom_DeleteBond,swig_arginfo_obatom_deletebond)
 SWIG_ZEND_NAMED_FE(obatom_clearbond,_wrap_OBAtom_ClearBond,swig_arginfo_obatom_clearbond)
 SWIG_ZEND_NAMED_FE(obatom_htomethyl,_wrap_OBAtom_HtoMethyl,swig_arginfo_obatom_htomethyl)
 SWIG_ZEND_NAMED_FE(obatom_sethybandgeom,_wrap_OBAtom_SetHybAndGeom,swig_arginfo_obatom_sethybandgeom)
 SWIG_ZEND_NAMED_FE(obatom_forcenoh,_wrap_OBAtom_ForceNoH,swig_arginfo_obatom_forcenoh)
 SWIG_ZEND_NAMED_FE(obatom_hasnohforced,_wrap_OBAtom_HasNoHForced,swig_arginfo_obatom_hasnohforced)
 SWIG_ZEND_NAMED_FE(obatom_forceimplh,_wrap_OBAtom_ForceImplH,swig_arginfo_obatom_forceimplh)
 SWIG_ZEND_NAMED_FE(obatom_hasimplhforced,_wrap_OBAtom_HasImplHForced,swig_arginfo_obatom_hasimplhforced)
 SWIG_ZEND_NAMED_FE(obatom_countfreeoxygens,_wrap_OBAtom_CountFreeOxygens,swig_arginfo_obatom_countfreeoxygens)
 SWIG_ZEND_NAMED_FE(obatom_countfreesulfurs,_wrap_OBAtom_CountFreeSulfurs,swig_arginfo_obatom_countfreesulfurs)
 SWIG_ZEND_NAMED_FE(obatom_implicithydrogencount,_wrap_OBAtom_ImplicitHydrogenCount,swig_arginfo_obatom_implicithydrogencount)
 SWIG_ZEND_NAMED_FE(obatom_explicithydrogencount,_wrap_OBAtom_ExplicitHydrogenCount,swig_arginfo_obatom_explicithydrogencount)
 SWIG_ZEND_NAMED_FE(obatom_memberofringcount,_wrap_OBAtom_MemberOfRingCount,swig_arginfo_obatom_memberofringcount)
 SWIG_ZEND_NAMED_FE(obatom_memberofringsize,_wrap_OBAtom_MemberOfRingSize,swig_arginfo_obatom_memberofringsize)
 SWIG_ZEND_NAMED_FE(obatom_countringbonds,_wrap_OBAtom_CountRingBonds,swig_arginfo_obatom_countringbonds)
 SWIG_ZEND_NAMED_FE(obatom_smallestbondangle,_wrap_OBAtom_SmallestBondAngle,swig_arginfo_obatom_smallestbondangle)
 SWIG_ZEND_NAMED_FE(obatom_averagebondangle,_wrap_OBAtom_AverageBondAngle,swig_arginfo_obatom_averagebondangle)
 SWIG_ZEND_NAMED_FE(obatom_bosum,_wrap_OBAtom_BOSum,swig_arginfo_obatom_bosum)
 SWIG_ZEND_NAMED_FE(obatom_kbosum,_wrap_OBAtom_KBOSum,swig_arginfo_obatom_kbosum)
 SWIG_ZEND_NAMED_FE(obatom_lewisacidbasecounts,_wrap_OBAtom_LewisAcidBaseCounts,swig_arginfo_obatom_lewisacidbasecounts)
 SWIG_ZEND_NAMED_FE(obatom_hasresidue,_wrap_OBAtom_HasResidue,swig_arginfo_obatom_hasresidue)
 SWIG_ZEND_NAMED_FE(obatom_ishetatom,_wrap_OBAtom_IsHetAtom,swig_arginfo_obatom_ishetatom)
 SWIG_ZEND_NAMED_FE(obatom_ishydrogen,_wrap_OBAtom_IsHydrogen,swig_arginfo_obatom_ishydrogen)
 SWIG_ZEND_NAMED_FE(obatom_iscarbon,_wrap_OBAtom_IsCarbon,swig_arginfo_obatom_iscarbon)
 SWIG_ZEND_NAMED_FE(obatom_isnitrogen,_wrap_OBAtom_IsNitrogen,swig_arginfo_obatom_isnitrogen)
 SWIG_ZEND_NAMED_FE(obatom_isoxygen,_wrap_OBAtom_IsOxygen,swig_arginfo_obatom_isoxygen)
 SWIG_ZEND_NAMED_FE(obatom_issulfur,_wrap_OBAtom_IsSulfur,swig_arginfo_obatom_issulfur)
 SWIG_ZEND_NAMED_FE(obatom_isphosphorus,_wrap_OBAtom_IsPhosphorus,swig_arginfo_obatom_isphosphorus)
 SWIG_ZEND_NAMED_FE(obatom_isaromatic,_wrap_OBAtom_IsAromatic,swig_arginfo_obatom_isaromatic)
 SWIG_ZEND_NAMED_FE(obatom_isinring,_wrap_OBAtom_IsInRing,swig_arginfo_obatom_isinring)
 SWIG_ZEND_NAMED_FE(obatom_isinringsize,_wrap_OBAtom_IsInRingSize,swig_arginfo_obatom_isinringsize)
 SWIG_ZEND_NAMED_FE(obatom_isheteroatom,_wrap_OBAtom_IsHeteroatom,swig_arginfo_obatom_isheteroatom)
 SWIG_ZEND_NAMED_FE(obatom_isnotcorh,_wrap_OBAtom_IsNotCorH,swig_arginfo_obatom_isnotcorh)
 SWIG_ZEND_NAMED_FE(obatom_isconnected,_wrap_OBAtom_IsConnected,swig_arginfo_obatom_isconnected)
 SWIG_ZEND_NAMED_FE(obatom_isonethree,_wrap_OBAtom_IsOneThree,swig_arginfo_obatom_isonethree)
 SWIG_ZEND_NAMED_FE(obatom_isonefour,_wrap_OBAtom_IsOneFour,swig_arginfo_obatom_isonefour)
 SWIG_ZEND_NAMED_FE(obatom_iscarboxyloxygen,_wrap_OBAtom_IsCarboxylOxygen,swig_arginfo_obatom_iscarboxyloxygen)
 SWIG_ZEND_NAMED_FE(obatom_isphosphateoxygen,_wrap_OBAtom_IsPhosphateOxygen,swig_arginfo_obatom_isphosphateoxygen)
 SWIG_ZEND_NAMED_FE(obatom_issulfateoxygen,_wrap_OBAtom_IsSulfateOxygen,swig_arginfo_obatom_issulfateoxygen)
 SWIG_ZEND_NAMED_FE(obatom_isnitrooxygen,_wrap_OBAtom_IsNitroOxygen,swig_arginfo_obatom_isnitrooxygen)
 SWIG_ZEND_NAMED_FE(obatom_isamidenitrogen,_wrap_OBAtom_IsAmideNitrogen,swig_arginfo_obatom_isamidenitrogen)
 SWIG_ZEND_NAMED_FE(obatom_ispolarhydrogen,_wrap_OBAtom_IsPolarHydrogen,swig_arginfo_obatom_ispolarhydrogen)
 SWIG_ZEND_NAMED_FE(obatom_isnonpolarhydrogen,_wrap_OBAtom_IsNonPolarHydrogen,swig_arginfo_obatom_isnonpolarhydrogen)
 SWIG_ZEND_NAMED_FE(obatom_isaromaticnoxide,_wrap_OBAtom_IsAromaticNOxide,swig_arginfo_obatom_isaromaticnoxide)
 SWIG_ZEND_NAMED_FE(obatom_ischiral,_wrap_OBAtom_IsChiral,swig_arginfo_obatom_ischiral)
 SWIG_ZEND_NAMED_FE(obatom_isaxial,_wrap_OBAtom_IsAxial,swig_arginfo_obatom_isaxial)
 SWIG_ZEND_NAMED_FE(obatom_isclockwise,_wrap_OBAtom_IsClockwise,swig_arginfo_obatom_isclockwise)
 SWIG_ZEND_NAMED_FE(obatom_isanticlockwise,_wrap_OBAtom_IsAntiClockwise,swig_arginfo_obatom_isanticlockwise)
 SWIG_ZEND_NAMED_FE(obatom_ispositivestereo,_wrap_OBAtom_IsPositiveStereo,swig_arginfo_obatom_ispositivestereo)
 SWIG_ZEND_NAMED_FE(obatom_isnegativestereo,_wrap_OBAtom_IsNegativeStereo,swig_arginfo_obatom_isnegativestereo)
 SWIG_ZEND_NAMED_FE(obatom_haschiralityspecified,_wrap_OBAtom_HasChiralitySpecified,swig_arginfo_obatom_haschiralityspecified)
 SWIG_ZEND_NAMED_FE(obatom_haschiralvolume,_wrap_OBAtom_HasChiralVolume,swig_arginfo_obatom_haschiralvolume)
 SWIG_ZEND_NAMED_FE(obatom_ishbondacceptor,_wrap_OBAtom_IsHbondAcceptor,swig_arginfo_obatom_ishbondacceptor)
 SWIG_ZEND_NAMED_FE(obatom_ishbondacceptorsimple,_wrap_OBAtom_IsHbondAcceptorSimple,swig_arginfo_obatom_ishbondacceptorsimple)
 SWIG_ZEND_NAMED_FE(obatom_ishbonddonor,_wrap_OBAtom_IsHbondDonor,swig_arginfo_obatom_ishbonddonor)
 SWIG_ZEND_NAMED_FE(obatom_ishbonddonorh,_wrap_OBAtom_IsHbondDonorH,swig_arginfo_obatom_ishbonddonorh)
 SWIG_ZEND_NAMED_FE(obatom_ismetal,_wrap_OBAtom_IsMetal,swig_arginfo_obatom_ismetal)
 SWIG_ZEND_NAMED_FE(obatom_hasalphabetaunsat,_wrap_OBAtom_HasAlphaBetaUnsat,swig_arginfo_obatom_hasalphabetaunsat)
 SWIG_ZEND_NAMED_FE(obatom_hasbondoforder,_wrap_OBAtom_HasBondOfOrder,swig_arginfo_obatom_hasbondoforder)
 SWIG_ZEND_NAMED_FE(obatom_countbondsoforder,_wrap_OBAtom_CountBondsOfOrder,swig_arginfo_obatom_countbondsoforder)
 SWIG_ZEND_NAMED_FE(obatom_highestbondorder,_wrap_OBAtom_HighestBondOrder,swig_arginfo_obatom_highestbondorder)
 SWIG_ZEND_NAMED_FE(obatom_hasnonsinglebond,_wrap_OBAtom_HasNonSingleBond,swig_arginfo_obatom_hasnonsinglebond)
 SWIG_ZEND_NAMED_FE(obatom_hassinglebond,_wrap_OBAtom_HasSingleBond,swig_arginfo_obatom_hassinglebond)
 SWIG_ZEND_NAMED_FE(obatom_hasdoublebond,_wrap_OBAtom_HasDoubleBond,swig_arginfo_obatom_hasdoublebond)
 SWIG_ZEND_NAMED_FE(obatom_hasaromaticbond,_wrap_OBAtom_HasAromaticBond,swig_arginfo_obatom_hasaromaticbond)
 SWIG_ZEND_NAMED_FE(obatom_matchessmarts,_wrap_OBAtom_MatchesSMARTS,swig_arginfo_obatom_matchessmarts)
 SWIG_ZEND_NAMED_FE(obbond_visit_set,_wrap_OBBond_Visit_set,swig_arginfo_obbond_visit_set)
 SWIG_ZEND_NAMED_FE(obbond_visit_get,_wrap_OBBond_Visit_get,swig_arginfo_obbond_visit_get)
 SWIG_ZEND_NAMED_FE(new_obbond,_wrap_new_OBBond,swig_arginfo_new_obbond)
 SWIG_ZEND_NAMED_FE(obbond_setidx,_wrap_OBBond_SetIdx,swig_arginfo_obbond_setidx)
 SWIG_ZEND_NAMED_FE(obbond_setid,_wrap_OBBond_SetId,swig_arginfo_obbond_setid)
 SWIG_ZEND_NAMED_FE(obbond_setbo,_wrap_OBBond_SetBO,swig_arginfo_obbond_setbo)
 SWIG_ZEND_NAMED_FE(obbond_setbondorder,_wrap_OBBond_SetBondOrder,swig_arginfo_obbond_setbondorder)
 SWIG_ZEND_NAMED_FE(obbond_setbegin,_wrap_OBBond_SetBegin,swig_arginfo_obbond_setbegin)
 SWIG_ZEND_NAMED_FE(obbond_setend,_wrap_OBBond_SetEnd,swig_arginfo_obbond_setend)
 SWIG_ZEND_NAMED_FE(obbond_setparent,_wrap_OBBond_SetParent,swig_arginfo_obbond_setparent)
 SWIG_ZEND_NAMED_FE(obbond_setlength,_wrap_OBBond_SetLength,swig_arginfo_obbond_setlength)
 SWIG_ZEND_NAMED_FE(obbond_set,_wrap_OBBond_Set,swig_arginfo_obbond_set)
 SWIG_ZEND_NAMED_FE(obbond_setksingle,_wrap_OBBond_SetKSingle,swig_arginfo_obbond_setksingle)
 SWIG_ZEND_NAMED_FE(obbond_setkdouble,_wrap_OBBond_SetKDouble,swig_arginfo_obbond_setkdouble)
 SWIG_ZEND_NAMED_FE(obbond_setktriple,_wrap_OBBond_SetKTriple,swig_arginfo_obbond_setktriple)
 SWIG_ZEND_NAMED_FE(obbond_setaromatic,_wrap_OBBond_SetAromatic,swig_arginfo_obbond_setaromatic)
 SWIG_ZEND_NAMED_FE(obbond_setwedge,_wrap_OBBond_SetWedge,swig_arginfo_obbond_setwedge)
 SWIG_ZEND_NAMED_FE(obbond_sethash,_wrap_OBBond_SetHash,swig_arginfo_obbond_sethash)
 SWIG_ZEND_NAMED_FE(obbond_setwedgeorhash,_wrap_OBBond_SetWedgeOrHash,swig_arginfo_obbond_setwedgeorhash)
 SWIG_ZEND_NAMED_FE(obbond_setup,_wrap_OBBond_SetUp,swig_arginfo_obbond_setup)
 SWIG_ZEND_NAMED_FE(obbond_setdown,_wrap_OBBond_SetDown,swig_arginfo_obbond_setdown)
 SWIG_ZEND_NAMED_FE(obbond_setinring,_wrap_OBBond_SetInRing,swig_arginfo_obbond_setinring)
 SWIG_ZEND_NAMED_FE(obbond_setclosure,_wrap_OBBond_SetClosure,swig_arginfo_obbond_setclosure)
 SWIG_ZEND_NAMED_FE(obbond_unsethash,_wrap_OBBond_UnsetHash,swig_arginfo_obbond_unsethash)
 SWIG_ZEND_NAMED_FE(obbond_unsetwedge,_wrap_OBBond_UnsetWedge,swig_arginfo_obbond_unsetwedge)
 SWIG_ZEND_NAMED_FE(obbond_unsetup,_wrap_OBBond_UnsetUp,swig_arginfo_obbond_unsetup)
 SWIG_ZEND_NAMED_FE(obbond_unsetdown,_wrap_OBBond_UnsetDown,swig_arginfo_obbond_unsetdown)
 SWIG_ZEND_NAMED_FE(obbond_unsetaromatic,_wrap_OBBond_UnsetAromatic,swig_arginfo_obbond_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obbond_unsetkekule,_wrap_OBBond_UnsetKekule,swig_arginfo_obbond_unsetkekule)
 SWIG_ZEND_NAMED_FE(obbond_getidx,_wrap_OBBond_GetIdx,swig_arginfo_obbond_getidx)
 SWIG_ZEND_NAMED_FE(obbond_getid,_wrap_OBBond_GetId,swig_arginfo_obbond_getid)
 SWIG_ZEND_NAMED_FE(obbond_getbo,_wrap_OBBond_GetBO,swig_arginfo_obbond_getbo)
 SWIG_ZEND_NAMED_FE(obbond_getbondorder,_wrap_OBBond_GetBondOrder,swig_arginfo_obbond_getbondorder)
 SWIG_ZEND_NAMED_FE(obbond_getflags,_wrap_OBBond_GetFlags,swig_arginfo_obbond_getflags)
 SWIG_ZEND_NAMED_FE(obbond_getbeginatomidx,_wrap_OBBond_GetBeginAtomIdx,swig_arginfo_obbond_getbeginatomidx)
 SWIG_ZEND_NAMED_FE(obbond_getendatomidx,_wrap_OBBond_GetEndAtomIdx,swig_arginfo_obbond_getendatomidx)
 SWIG_ZEND_NAMED_FE(obbond_getbeginatom,_wrap_OBBond_GetBeginAtom,swig_arginfo_obbond_getbeginatom)
 SWIG_ZEND_NAMED_FE(obbond_getendatom,_wrap_OBBond_GetEndAtom,swig_arginfo_obbond_getendatom)
 SWIG_ZEND_NAMED_FE(obbond_getnbratom,_wrap_OBBond_GetNbrAtom,swig_arginfo_obbond_getnbratom)
 SWIG_ZEND_NAMED_FE(obbond_getparent,_wrap_OBBond_GetParent,swig_arginfo_obbond_getparent)
 SWIG_ZEND_NAMED_FE(obbond_getequiblength,_wrap_OBBond_GetEquibLength,swig_arginfo_obbond_getequiblength)
 SWIG_ZEND_NAMED_FE(obbond_getlength,_wrap_OBBond_GetLength,swig_arginfo_obbond_getlength)
 SWIG_ZEND_NAMED_FE(obbond_getnbratomidx,_wrap_OBBond_GetNbrAtomIdx,swig_arginfo_obbond_getnbratomidx)
 SWIG_ZEND_NAMED_FE(obbond_findsmallestring,_wrap_OBBond_FindSmallestRing,swig_arginfo_obbond_findsmallestring)
 SWIG_ZEND_NAMED_FE(obbond_isaromatic,_wrap_OBBond_IsAromatic,swig_arginfo_obbond_isaromatic)
 SWIG_ZEND_NAMED_FE(obbond_isinring,_wrap_OBBond_IsInRing,swig_arginfo_obbond_isinring)
 SWIG_ZEND_NAMED_FE(obbond_isrotor,_wrap_OBBond_IsRotor,swig_arginfo_obbond_isrotor)
 SWIG_ZEND_NAMED_FE(obbond_isamide,_wrap_OBBond_IsAmide,swig_arginfo_obbond_isamide)
 SWIG_ZEND_NAMED_FE(obbond_isprimaryamide,_wrap_OBBond_IsPrimaryAmide,swig_arginfo_obbond_isprimaryamide)
 SWIG_ZEND_NAMED_FE(obbond_issecondaryamide,_wrap_OBBond_IsSecondaryAmide,swig_arginfo_obbond_issecondaryamide)
 SWIG_ZEND_NAMED_FE(obbond_istertiaryamide,_wrap_OBBond_IsTertiaryAmide,swig_arginfo_obbond_istertiaryamide)
 SWIG_ZEND_NAMED_FE(obbond_isester,_wrap_OBBond_IsEster,swig_arginfo_obbond_isester)
 SWIG_ZEND_NAMED_FE(obbond_iscarbonyl,_wrap_OBBond_IsCarbonyl,swig_arginfo_obbond_iscarbonyl)
 SWIG_ZEND_NAMED_FE(obbond_issingle,_wrap_OBBond_IsSingle,swig_arginfo_obbond_issingle)
 SWIG_ZEND_NAMED_FE(obbond_isdouble,_wrap_OBBond_IsDouble,swig_arginfo_obbond_isdouble)
 SWIG_ZEND_NAMED_FE(obbond_istriple,_wrap_OBBond_IsTriple,swig_arginfo_obbond_istriple)
 SWIG_ZEND_NAMED_FE(obbond_isksingle,_wrap_OBBond_IsKSingle,swig_arginfo_obbond_isksingle)
 SWIG_ZEND_NAMED_FE(obbond_iskdouble,_wrap_OBBond_IsKDouble,swig_arginfo_obbond_iskdouble)
 SWIG_ZEND_NAMED_FE(obbond_isktriple,_wrap_OBBond_IsKTriple,swig_arginfo_obbond_isktriple)
 SWIG_ZEND_NAMED_FE(obbond_isclosure,_wrap_OBBond_IsClosure,swig_arginfo_obbond_isclosure)
 SWIG_ZEND_NAMED_FE(obbond_isup,_wrap_OBBond_IsUp,swig_arginfo_obbond_isup)
 SWIG_ZEND_NAMED_FE(obbond_isdown,_wrap_OBBond_IsDown,swig_arginfo_obbond_isdown)
 SWIG_ZEND_NAMED_FE(obbond_iswedge,_wrap_OBBond_IsWedge,swig_arginfo_obbond_iswedge)
 SWIG_ZEND_NAMED_FE(obbond_ishash,_wrap_OBBond_IsHash,swig_arginfo_obbond_ishash)
 SWIG_ZEND_NAMED_FE(obbond_iswedgeorhash,_wrap_OBBond_IsWedgeOrHash,swig_arginfo_obbond_iswedgeorhash)
 SWIG_ZEND_NAMED_FE(obbond_iscisortrans,_wrap_OBBond_IsCisOrTrans,swig_arginfo_obbond_iscisortrans)
 SWIG_ZEND_NAMED_FE(obbond_isdoublebondgeometry,_wrap_OBBond_IsDoubleBondGeometry,swig_arginfo_obbond_isdoublebondgeometry)
 SWIG_ZEND_NAMED_FE(new_obreaction,_wrap_new_OBReaction,swig_arginfo_new_obreaction)
 SWIG_ZEND_NAMED_FE(obreaction_numreactants,_wrap_OBReaction_NumReactants,swig_arginfo_obreaction_numreactants)
 SWIG_ZEND_NAMED_FE(obreaction_numproducts,_wrap_OBReaction_NumProducts,swig_arginfo_obreaction_numproducts)
 SWIG_ZEND_NAMED_FE(obreaction_addreactant,_wrap_OBReaction_AddReactant,swig_arginfo_obreaction_addreactant)
 SWIG_ZEND_NAMED_FE(obreaction_addproduct,_wrap_OBReaction_AddProduct,swig_arginfo_obreaction_addproduct)
 SWIG_ZEND_NAMED_FE(obreaction_settransitionstate,_wrap_OBReaction_SetTransitionState,swig_arginfo_obreaction_settransitionstate)
 SWIG_ZEND_NAMED_FE(obreaction_addagent,_wrap_OBReaction_AddAgent,swig_arginfo_obreaction_addagent)
 SWIG_ZEND_NAMED_FE(obreaction_getreactant,_wrap_OBReaction_GetReactant,swig_arginfo_obreaction_getreactant)
 SWIG_ZEND_NAMED_FE(obreaction_getproduct,_wrap_OBReaction_GetProduct,swig_arginfo_obreaction_getproduct)
 SWIG_ZEND_NAMED_FE(obreaction_gettransitionstate,_wrap_OBReaction_GetTransitionState,swig_arginfo_obreaction_gettransitionstate)
 SWIG_ZEND_NAMED_FE(obreaction_getagent,_wrap_OBReaction_GetAgent,swig_arginfo_obreaction_getagent)
 SWIG_ZEND_NAMED_FE(obreaction_gettitle,_wrap_OBReaction_GetTitle,swig_arginfo_obreaction_gettitle)
 SWIG_ZEND_NAMED_FE(obreaction_getcomment,_wrap_OBReaction_GetComment,swig_arginfo_obreaction_getcomment)
 SWIG_ZEND_NAMED_FE(obreaction_settitle,_wrap_OBReaction_SetTitle,swig_arginfo_obreaction_settitle)
 SWIG_ZEND_NAMED_FE(obreaction_setcomment,_wrap_OBReaction_SetComment,swig_arginfo_obreaction_setcomment)
 SWIG_ZEND_NAMED_FE(obreaction_isreversible,_wrap_OBReaction_IsReversible,swig_arginfo_obreaction_isreversible)
 SWIG_ZEND_NAMED_FE(obreaction_setreversible,_wrap_OBReaction_SetReversible,swig_arginfo_obreaction_setreversible)
 SWIG_ZEND_NAMED_FE(obreaction_classdescription,_wrap_OBReaction_ClassDescription,swig_arginfo_obreaction_classdescription)
 SWIG_ZEND_NAMED_FE(new_obmol,_wrap_new_OBMol,swig_arginfo_new_obmol)
 SWIG_ZEND_NAMED_FE(obmol_add,_wrap_OBMol_add,swig_arginfo_obmol_add)
 SWIG_ZEND_NAMED_FE(obmol_reserveatoms,_wrap_OBMol_ReserveAtoms,swig_arginfo_obmol_reserveatoms)
 SWIG_ZEND_NAMED_FE(obmol_createatom,_wrap_OBMol_CreateAtom,swig_arginfo_obmol_createatom)
 SWIG_ZEND_NAMED_FE(obmol_createbond,_wrap_OBMol_CreateBond,swig_arginfo_obmol_createbond)
 SWIG_ZEND_NAMED_FE(obmol_createresidue,_wrap_OBMol_CreateResidue,swig_arginfo_obmol_createresidue)
 SWIG_ZEND_NAMED_FE(obmol_destroyatom,_wrap_OBMol_DestroyAtom,swig_arginfo_obmol_destroyatom)
 SWIG_ZEND_NAMED_FE(obmol_destroybond,_wrap_OBMol_DestroyBond,swig_arginfo_obmol_destroybond)
 SWIG_ZEND_NAMED_FE(obmol_destroyresidue,_wrap_OBMol_DestroyResidue,swig_arginfo_obmol_destroyresidue)
 SWIG_ZEND_NAMED_FE(obmol_addatom,_wrap_OBMol_AddAtom,swig_arginfo_obmol_addatom)
 SWIG_ZEND_NAMED_FE(obmol_insertatom,_wrap_OBMol_InsertAtom,swig_arginfo_obmol_insertatom)
 SWIG_ZEND_NAMED_FE(obmol_addbond,_wrap_OBMol_AddBond,swig_arginfo_obmol_addbond)
 SWIG_ZEND_NAMED_FE(obmol_addresidue,_wrap_OBMol_AddResidue,swig_arginfo_obmol_addresidue)
 SWIG_ZEND_NAMED_FE(obmol_newatom,_wrap_OBMol_NewAtom,swig_arginfo_obmol_newatom)
 SWIG_ZEND_NAMED_FE(obmol_newbond,_wrap_OBMol_NewBond,swig_arginfo_obmol_newbond)
 SWIG_ZEND_NAMED_FE(obmol_newresidue,_wrap_OBMol_NewResidue,swig_arginfo_obmol_newresidue)
 SWIG_ZEND_NAMED_FE(obmol_deleteatom,_wrap_OBMol_DeleteAtom,swig_arginfo_obmol_deleteatom)
 SWIG_ZEND_NAMED_FE(obmol_deletebond,_wrap_OBMol_DeleteBond,swig_arginfo_obmol_deletebond)
 SWIG_ZEND_NAMED_FE(obmol_deleteresidue,_wrap_OBMol_DeleteResidue,swig_arginfo_obmol_deleteresidue)
 SWIG_ZEND_NAMED_FE(obmol_beginmodify,_wrap_OBMol_BeginModify,swig_arginfo_obmol_beginmodify)
 SWIG_ZEND_NAMED_FE(obmol_endmodify,_wrap_OBMol_EndModify,swig_arginfo_obmol_endmodify)
 SWIG_ZEND_NAMED_FE(obmol_getmod,_wrap_OBMol_GetMod,swig_arginfo_obmol_getmod)
 SWIG_ZEND_NAMED_FE(obmol_incrementmod,_wrap_OBMol_IncrementMod,swig_arginfo_obmol_incrementmod)
 SWIG_ZEND_NAMED_FE(obmol_decrementmod,_wrap_OBMol_DecrementMod,swig_arginfo_obmol_decrementmod)
 SWIG_ZEND_NAMED_FE(obmol_getflags,_wrap_OBMol_GetFlags,swig_arginfo_obmol_getflags)
 SWIG_ZEND_NAMED_FE(obmol_gettitle,_wrap_OBMol_GetTitle,swig_arginfo_obmol_gettitle)
 SWIG_ZEND_NAMED_FE(obmol_numatoms,_wrap_OBMol_NumAtoms,swig_arginfo_obmol_numatoms)
 SWIG_ZEND_NAMED_FE(obmol_numbonds,_wrap_OBMol_NumBonds,swig_arginfo_obmol_numbonds)
 SWIG_ZEND_NAMED_FE(obmol_numhvyatoms,_wrap_OBMol_NumHvyAtoms,swig_arginfo_obmol_numhvyatoms)
 SWIG_ZEND_NAMED_FE(obmol_numresidues,_wrap_OBMol_NumResidues,swig_arginfo_obmol_numresidues)
 SWIG_ZEND_NAMED_FE(obmol_numrotors,_wrap_OBMol_NumRotors,swig_arginfo_obmol_numrotors)
 SWIG_ZEND_NAMED_FE(obmol_getatom,_wrap_OBMol_GetAtom,swig_arginfo_obmol_getatom)
 SWIG_ZEND_NAMED_FE(obmol_getatombyid,_wrap_OBMol_GetAtomById,swig_arginfo_obmol_getatombyid)
 SWIG_ZEND_NAMED_FE(obmol_getfirstatom,_wrap_OBMol_GetFirstAtom,swig_arginfo_obmol_getfirstatom)
 SWIG_ZEND_NAMED_FE(obmol_getbondbyid,_wrap_OBMol_GetBondById,swig_arginfo_obmol_getbondbyid)
 SWIG_ZEND_NAMED_FE(obmol_getbond,_wrap_OBMol_GetBond,swig_arginfo_obmol_getbond)
 SWIG_ZEND_NAMED_FE(obmol_getresidue,_wrap_OBMol_GetResidue,swig_arginfo_obmol_getresidue)
 SWIG_ZEND_NAMED_FE(obmol_getinternalcoord,_wrap_OBMol_GetInternalCoord,swig_arginfo_obmol_getinternalcoord)
 SWIG_ZEND_NAMED_FE(obmol_gettorsion,_wrap_OBMol_GetTorsion,swig_arginfo_obmol_gettorsion)
 SWIG_ZEND_NAMED_FE(obmol_getangle,_wrap_OBMol_GetAngle,swig_arginfo_obmol_getangle)
 SWIG_ZEND_NAMED_FE(obmol_areinsamering,_wrap_OBMol_AreInSameRing,swig_arginfo_obmol_areinsamering)
 SWIG_ZEND_NAMED_FE(obmol_getformula,_wrap_OBMol_GetFormula,swig_arginfo_obmol_getformula)
 SWIG_ZEND_NAMED_FE(obmol_getspacedformula,_wrap_OBMol_GetSpacedFormula,swig_arginfo_obmol_getspacedformula)
 SWIG_ZEND_NAMED_FE(obmol_getmolwt,_wrap_OBMol_GetMolWt,swig_arginfo_obmol_getmolwt)
 SWIG_ZEND_NAMED_FE(obmol_getexactmass,_wrap_OBMol_GetExactMass,swig_arginfo_obmol_getexactmass)
 SWIG_ZEND_NAMED_FE(obmol_gettotalcharge,_wrap_OBMol_GetTotalCharge,swig_arginfo_obmol_gettotalcharge)
 SWIG_ZEND_NAMED_FE(obmol_gettotalspinmultiplicity,_wrap_OBMol_GetTotalSpinMultiplicity,swig_arginfo_obmol_gettotalspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmol_getdimension,_wrap_OBMol_GetDimension,swig_arginfo_obmol_getdimension)
 SWIG_ZEND_NAMED_FE(obmol_getcoordinates,_wrap_OBMol_GetCoordinates,swig_arginfo_obmol_getcoordinates)
 SWIG_ZEND_NAMED_FE(obmol_getsssr,_wrap_OBMol_GetSSSR,swig_arginfo_obmol_getsssr)
 SWIG_ZEND_NAMED_FE(obmol_getlssr,_wrap_OBMol_GetLSSR,swig_arginfo_obmol_getlssr)
 SWIG_ZEND_NAMED_FE(obmol_automaticformalcharge,_wrap_OBMol_AutomaticFormalCharge,swig_arginfo_obmol_automaticformalcharge)
 SWIG_ZEND_NAMED_FE(obmol_automaticpartialcharge,_wrap_OBMol_AutomaticPartialCharge,swig_arginfo_obmol_automaticpartialcharge)
 SWIG_ZEND_NAMED_FE(obmol_settitle,_wrap_OBMol_SetTitle,swig_arginfo_obmol_settitle)
 SWIG_ZEND_NAMED_FE(obmol_setformula,_wrap_OBMol_SetFormula,swig_arginfo_obmol_setformula)
 SWIG_ZEND_NAMED_FE(obmol_setenergy,_wrap_OBMol_SetEnergy,swig_arginfo_obmol_setenergy)
 SWIG_ZEND_NAMED_FE(obmol_setdimension,_wrap_OBMol_SetDimension,swig_arginfo_obmol_setdimension)
 SWIG_ZEND_NAMED_FE(obmol_settotalcharge,_wrap_OBMol_SetTotalCharge,swig_arginfo_obmol_settotalcharge)
 SWIG_ZEND_NAMED_FE(obmol_settotalspinmultiplicity,_wrap_OBMol_SetTotalSpinMultiplicity,swig_arginfo_obmol_settotalspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmol_setinternalcoord,_wrap_OBMol_SetInternalCoord,swig_arginfo_obmol_setinternalcoord)
 SWIG_ZEND_NAMED_FE(obmol_setautomaticformalcharge,_wrap_OBMol_SetAutomaticFormalCharge,swig_arginfo_obmol_setautomaticformalcharge)
 SWIG_ZEND_NAMED_FE(obmol_setautomaticpartialcharge,_wrap_OBMol_SetAutomaticPartialCharge,swig_arginfo_obmol_setautomaticpartialcharge)
 SWIG_ZEND_NAMED_FE(obmol_setaromaticperceived,_wrap_OBMol_SetAromaticPerceived,swig_arginfo_obmol_setaromaticperceived)
 SWIG_ZEND_NAMED_FE(obmol_setsssrperceived,_wrap_OBMol_SetSSSRPerceived,swig_arginfo_obmol_setsssrperceived)
 SWIG_ZEND_NAMED_FE(obmol_setlssrperceived,_wrap_OBMol_SetLSSRPerceived,swig_arginfo_obmol_setlssrperceived)
 SWIG_ZEND_NAMED_FE(obmol_setringatomsandbondsperceived,_wrap_OBMol_SetRingAtomsAndBondsPerceived,swig_arginfo_obmol_setringatomsandbondsperceived)
 SWIG_ZEND_NAMED_FE(obmol_setatomtypesperceived,_wrap_OBMol_SetAtomTypesPerceived,swig_arginfo_obmol_setatomtypesperceived)
 SWIG_ZEND_NAMED_FE(obmol_setringtypesperceived,_wrap_OBMol_SetRingTypesPerceived,swig_arginfo_obmol_setringtypesperceived)
 SWIG_ZEND_NAMED_FE(obmol_setchainsperceived,_wrap_OBMol_SetChainsPerceived,swig_arginfo_obmol_setchainsperceived)
 SWIG_ZEND_NAMED_FE(obmol_setchiralityperceived,_wrap_OBMol_SetChiralityPerceived,swig_arginfo_obmol_setchiralityperceived)
 SWIG_ZEND_NAMED_FE(obmol_setpartialchargesperceived,_wrap_OBMol_SetPartialChargesPerceived,swig_arginfo_obmol_setpartialchargesperceived)
 SWIG_ZEND_NAMED_FE(obmol_sethybridizationperceived,_wrap_OBMol_SetHybridizationPerceived,swig_arginfo_obmol_sethybridizationperceived)
 SWIG_ZEND_NAMED_FE(obmol_setimplicitvalenceperceived,_wrap_OBMol_SetImplicitValencePerceived,swig_arginfo_obmol_setimplicitvalenceperceived)
 SWIG_ZEND_NAMED_FE(obmol_setkekuleperceived,_wrap_OBMol_SetKekulePerceived,swig_arginfo_obmol_setkekuleperceived)
 SWIG_ZEND_NAMED_FE(obmol_setclosurebondsperceived,_wrap_OBMol_SetClosureBondsPerceived,swig_arginfo_obmol_setclosurebondsperceived)
 SWIG_ZEND_NAMED_FE(obmol_sethydrogensadded,_wrap_OBMol_SetHydrogensAdded,swig_arginfo_obmol_sethydrogensadded)
 SWIG_ZEND_NAMED_FE(obmol_setcorrectedforph,_wrap_OBMol_SetCorrectedForPH,swig_arginfo_obmol_setcorrectedforph)
 SWIG_ZEND_NAMED_FE(obmol_setaromaticcorrected,_wrap_OBMol_SetAromaticCorrected,swig_arginfo_obmol_setaromaticcorrected)
 SWIG_ZEND_NAMED_FE(obmol_setspinmultiplicityassigned,_wrap_OBMol_SetSpinMultiplicityAssigned,swig_arginfo_obmol_setspinmultiplicityassigned)
 SWIG_ZEND_NAMED_FE(obmol_setflags,_wrap_OBMol_SetFlags,swig_arginfo_obmol_setflags)
 SWIG_ZEND_NAMED_FE(obmol_unsetaromaticperceived,_wrap_OBMol_UnsetAromaticPerceived,swig_arginfo_obmol_unsetaromaticperceived)
 SWIG_ZEND_NAMED_FE(obmol_unsetsssrperceived,_wrap_OBMol_UnsetSSSRPerceived,swig_arginfo_obmol_unsetsssrperceived)
 SWIG_ZEND_NAMED_FE(obmol_unsetlssrperceived,_wrap_OBMol_UnsetLSSRPerceived,swig_arginfo_obmol_unsetlssrperceived)
 SWIG_ZEND_NAMED_FE(obmol_unsetringtypesperceived,_wrap_OBMol_UnsetRingTypesPerceived,swig_arginfo_obmol_unsetringtypesperceived)
 SWIG_ZEND_NAMED_FE(obmol_unsetpartialchargesperceived,_wrap_OBMol_UnsetPartialChargesPerceived,swig_arginfo_obmol_unsetpartialchargesperceived)
 SWIG_ZEND_NAMED_FE(obmol_unsetimplicitvalenceperceived,_wrap_OBMol_UnsetImplicitValencePerceived,swig_arginfo_obmol_unsetimplicitvalenceperceived)
 SWIG_ZEND_NAMED_FE(obmol_unsethydrogensadded,_wrap_OBMol_UnsetHydrogensAdded,swig_arginfo_obmol_unsethydrogensadded)
 SWIG_ZEND_NAMED_FE(obmol_unsetflag,_wrap_OBMol_UnsetFlag,swig_arginfo_obmol_unsetflag)
 SWIG_ZEND_NAMED_FE(obmol_classdescription,_wrap_OBMol_ClassDescription,swig_arginfo_obmol_classdescription)
 SWIG_ZEND_NAMED_FE(obmol_renumberatoms,_wrap_OBMol_RenumberAtoms,swig_arginfo_obmol_renumberatoms)
 SWIG_ZEND_NAMED_FE(obmol_setcoordinates,_wrap_OBMol_SetCoordinates,swig_arginfo_obmol_setcoordinates)
 SWIG_ZEND_NAMED_FE(obmol_toinertialframe,_wrap_OBMol_ToInertialFrame,swig_arginfo_obmol_toinertialframe)
 SWIG_ZEND_NAMED_FE(obmol_translate,_wrap_OBMol_Translate,swig_arginfo_obmol_translate)
 SWIG_ZEND_NAMED_FE(obmol_rotate,_wrap_OBMol_Rotate,swig_arginfo_obmol_rotate)
 SWIG_ZEND_NAMED_FE(obmol_kekulize,_wrap_OBMol_Kekulize,swig_arginfo_obmol_kekulize)
 SWIG_ZEND_NAMED_FE(obmol_perceivekekulebonds,_wrap_OBMol_PerceiveKekuleBonds,swig_arginfo_obmol_perceivekekulebonds)
 SWIG_ZEND_NAMED_FE(obmol_newperceivekekulebonds,_wrap_OBMol_NewPerceiveKekuleBonds,swig_arginfo_obmol_newperceivekekulebonds)
 SWIG_ZEND_NAMED_FE(obmol_deletehydrogens,_wrap_OBMol_DeleteHydrogens,swig_arginfo_obmol_deletehydrogens)
 SWIG_ZEND_NAMED_FE(obmol_deletepolarhydrogens,_wrap_OBMol_DeletePolarHydrogens,swig_arginfo_obmol_deletepolarhydrogens)
 SWIG_ZEND_NAMED_FE(obmol_deletenonpolarhydrogens,_wrap_OBMol_DeleteNonPolarHydrogens,swig_arginfo_obmol_deletenonpolarhydrogens)
 SWIG_ZEND_NAMED_FE(obmol_deletehydrogen,_wrap_OBMol_DeleteHydrogen,swig_arginfo_obmol_deletehydrogen)
 SWIG_ZEND_NAMED_FE(obmol_addhydrogens,_wrap_OBMol_AddHydrogens,swig_arginfo_obmol_addhydrogens)
 SWIG_ZEND_NAMED_FE(obmol_addpolarhydrogens,_wrap_OBMol_AddPolarHydrogens,swig_arginfo_obmol_addpolarhydrogens)
 SWIG_ZEND_NAMED_FE(obmol_addnonpolarhydrogens,_wrap_OBMol_AddNonPolarHydrogens,swig_arginfo_obmol_addnonpolarhydrogens)
 SWIG_ZEND_NAMED_FE(obmol_addnewhydrogens,_wrap_OBMol_AddNewHydrogens,swig_arginfo_obmol_addnewhydrogens)
 SWIG_ZEND_NAMED_FE(obmol_stripsalts,_wrap_OBMol_StripSalts,swig_arginfo_obmol_stripsalts)
 SWIG_ZEND_NAMED_FE(obmol_separate,_wrap_OBMol_Separate,swig_arginfo_obmol_separate)
 SWIG_ZEND_NAMED_FE(obmol_getnextfragment,_wrap_OBMol_GetNextFragment,swig_arginfo_obmol_getnextfragment)
 SWIG_ZEND_NAMED_FE(obmol_convertdativebonds,_wrap_OBMol_ConvertDativeBonds,swig_arginfo_obmol_convertdativebonds)
 SWIG_ZEND_NAMED_FE(obmol_makedativebonds,_wrap_OBMol_MakeDativeBonds,swig_arginfo_obmol_makedativebonds)
 SWIG_ZEND_NAMED_FE(obmol_convertzerobonds,_wrap_OBMol_ConvertZeroBonds,swig_arginfo_obmol_convertzerobonds)
 SWIG_ZEND_NAMED_FE(obmol_correctforph,_wrap_OBMol_CorrectForPH,swig_arginfo_obmol_correctforph)
 SWIG_ZEND_NAMED_FE(obmol_assignspinmultiplicity,_wrap_OBMol_AssignSpinMultiplicity,swig_arginfo_obmol_assignspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmol_assigntotalchargetoatoms,_wrap_OBMol_AssignTotalChargeToAtoms,swig_arginfo_obmol_assigntotalchargetoatoms)
 SWIG_ZEND_NAMED_FE(obmol_setispatternstructure,_wrap_OBMol_SetIsPatternStructure,swig_arginfo_obmol_setispatternstructure)
 SWIG_ZEND_NAMED_FE(obmol_center,_wrap_OBMol_Center,swig_arginfo_obmol_center)
 SWIG_ZEND_NAMED_FE(obmol_findsssr,_wrap_OBMol_FindSSSR,swig_arginfo_obmol_findsssr)
 SWIG_ZEND_NAMED_FE(obmol_findlssr,_wrap_OBMol_FindLSSR,swig_arginfo_obmol_findlssr)
 SWIG_ZEND_NAMED_FE(obmol_findringatomsandbonds,_wrap_OBMol_FindRingAtomsAndBonds,swig_arginfo_obmol_findringatomsandbonds)
 SWIG_ZEND_NAMED_FE(obmol_findchiralcenters,_wrap_OBMol_FindChiralCenters,swig_arginfo_obmol_findchiralcenters)
 SWIG_ZEND_NAMED_FE(obmol_findchildren,_wrap_OBMol_FindChildren,swig_arginfo_obmol_findchildren)
 SWIG_ZEND_NAMED_FE(obmol_findlargestfragment,_wrap_OBMol_FindLargestFragment,swig_arginfo_obmol_findlargestfragment)
 SWIG_ZEND_NAMED_FE(obmol_contigfraglist,_wrap_OBMol_ContigFragList,swig_arginfo_obmol_contigfraglist)
 SWIG_ZEND_NAMED_FE(obmol_align,_wrap_OBMol_Align,swig_arginfo_obmol_align)
 SWIG_ZEND_NAMED_FE(obmol_connectthedots,_wrap_OBMol_ConnectTheDots,swig_arginfo_obmol_connectthedots)
 SWIG_ZEND_NAMED_FE(obmol_perceivebondorders,_wrap_OBMol_PerceiveBondOrders,swig_arginfo_obmol_perceivebondorders)
 SWIG_ZEND_NAMED_FE(obmol_findangles,_wrap_OBMol_FindAngles,swig_arginfo_obmol_findangles)
 SWIG_ZEND_NAMED_FE(obmol_findtorsions,_wrap_OBMol_FindTorsions,swig_arginfo_obmol_findtorsions)
 SWIG_ZEND_NAMED_FE(obmol_getgtdvector,_wrap_OBMol_GetGTDVector,swig_arginfo_obmol_getgtdvector)
 SWIG_ZEND_NAMED_FE(obmol_getgivector,_wrap_OBMol_GetGIVector,swig_arginfo_obmol_getgivector)
 SWIG_ZEND_NAMED_FE(obmol_getgidvector,_wrap_OBMol_GetGIDVector,swig_arginfo_obmol_getgidvector)
 SWIG_ZEND_NAMED_FE(obmol_has2d,_wrap_OBMol_Has2D,swig_arginfo_obmol_has2d)
 SWIG_ZEND_NAMED_FE(obmol_has3d,_wrap_OBMol_Has3D,swig_arginfo_obmol_has3d)
 SWIG_ZEND_NAMED_FE(obmol_hasnonzerocoords,_wrap_OBMol_HasNonZeroCoords,swig_arginfo_obmol_hasnonzerocoords)
 SWIG_ZEND_NAMED_FE(obmol_hasaromaticperceived,_wrap_OBMol_HasAromaticPerceived,swig_arginfo_obmol_hasaromaticperceived)
 SWIG_ZEND_NAMED_FE(obmol_hassssrperceived,_wrap_OBMol_HasSSSRPerceived,swig_arginfo_obmol_hassssrperceived)
 SWIG_ZEND_NAMED_FE(obmol_haslssrperceived,_wrap_OBMol_HasLSSRPerceived,swig_arginfo_obmol_haslssrperceived)
 SWIG_ZEND_NAMED_FE(obmol_hasringatomsandbondsperceived,_wrap_OBMol_HasRingAtomsAndBondsPerceived,swig_arginfo_obmol_hasringatomsandbondsperceived)
 SWIG_ZEND_NAMED_FE(obmol_hasatomtypesperceived,_wrap_OBMol_HasAtomTypesPerceived,swig_arginfo_obmol_hasatomtypesperceived)
 SWIG_ZEND_NAMED_FE(obmol_hasringtypesperceived,_wrap_OBMol_HasRingTypesPerceived,swig_arginfo_obmol_hasringtypesperceived)
 SWIG_ZEND_NAMED_FE(obmol_haschiralityperceived,_wrap_OBMol_HasChiralityPerceived,swig_arginfo_obmol_haschiralityperceived)
 SWIG_ZEND_NAMED_FE(obmol_haspartialchargesperceived,_wrap_OBMol_HasPartialChargesPerceived,swig_arginfo_obmol_haspartialchargesperceived)
 SWIG_ZEND_NAMED_FE(obmol_hashybridizationperceived,_wrap_OBMol_HasHybridizationPerceived,swig_arginfo_obmol_hashybridizationperceived)
 SWIG_ZEND_NAMED_FE(obmol_hasimplicitvalenceperceived,_wrap_OBMol_HasImplicitValencePerceived,swig_arginfo_obmol_hasimplicitvalenceperceived)
 SWIG_ZEND_NAMED_FE(obmol_haskekuleperceived,_wrap_OBMol_HasKekulePerceived,swig_arginfo_obmol_haskekuleperceived)
 SWIG_ZEND_NAMED_FE(obmol_hasclosurebondsperceived,_wrap_OBMol_HasClosureBondsPerceived,swig_arginfo_obmol_hasclosurebondsperceived)
 SWIG_ZEND_NAMED_FE(obmol_haschainsperceived,_wrap_OBMol_HasChainsPerceived,swig_arginfo_obmol_haschainsperceived)
 SWIG_ZEND_NAMED_FE(obmol_hashydrogensadded,_wrap_OBMol_HasHydrogensAdded,swig_arginfo_obmol_hashydrogensadded)
 SWIG_ZEND_NAMED_FE(obmol_hasaromaticcorrected,_wrap_OBMol_HasAromaticCorrected,swig_arginfo_obmol_hasaromaticcorrected)
 SWIG_ZEND_NAMED_FE(obmol_iscorrectedforph,_wrap_OBMol_IsCorrectedForPH,swig_arginfo_obmol_iscorrectedforph)
 SWIG_ZEND_NAMED_FE(obmol_hasspinmultiplicityassigned,_wrap_OBMol_HasSpinMultiplicityAssigned,swig_arginfo_obmol_hasspinmultiplicityassigned)
 SWIG_ZEND_NAMED_FE(obmol_ischiral,_wrap_OBMol_IsChiral,swig_arginfo_obmol_ischiral)
 SWIG_ZEND_NAMED_FE(obmol_c_empty,_wrap_OBMol_c_Empty,swig_arginfo_obmol_c_empty)
 SWIG_ZEND_NAMED_FE(obmol_numconformers,_wrap_OBMol_NumConformers,swig_arginfo_obmol_numconformers)
 SWIG_ZEND_NAMED_FE(obmol_setconformers,_wrap_OBMol_SetConformers,swig_arginfo_obmol_setconformers)
 SWIG_ZEND_NAMED_FE(obmol_addconformer,_wrap_OBMol_AddConformer,swig_arginfo_obmol_addconformer)
 SWIG_ZEND_NAMED_FE(obmol_setconformer,_wrap_OBMol_SetConformer,swig_arginfo_obmol_setconformer)
 SWIG_ZEND_NAMED_FE(obmol_copyconformer,_wrap_OBMol_CopyConformer,swig_arginfo_obmol_copyconformer)
 SWIG_ZEND_NAMED_FE(obmol_deleteconformer,_wrap_OBMol_DeleteConformer,swig_arginfo_obmol_deleteconformer)
 SWIG_ZEND_NAMED_FE(obmol_getconformer,_wrap_OBMol_GetConformer,swig_arginfo_obmol_getconformer)
 SWIG_ZEND_NAMED_FE(obmol_setenergies,_wrap_OBMol_SetEnergies,swig_arginfo_obmol_setenergies)
 SWIG_ZEND_NAMED_FE(obmol_getenergies,_wrap_OBMol_GetEnergies,swig_arginfo_obmol_getenergies)
 SWIG_ZEND_NAMED_FE(obmol_getenergy,_wrap_OBMol_GetEnergy,swig_arginfo_obmol_getenergy)
 SWIG_ZEND_NAMED_FE(obmol_beginconformer,_wrap_OBMol_BeginConformer,swig_arginfo_obmol_beginconformer)
 SWIG_ZEND_NAMED_FE(obmol_nextconformer,_wrap_OBMol_NextConformer,swig_arginfo_obmol_nextconformer)
 SWIG_ZEND_NAMED_FE(obmol_getconformers,_wrap_OBMol_GetConformers,swig_arginfo_obmol_getconformers)
 SWIG_ZEND_NAMED_FE(obmol_begininternalcoord,_wrap_OBMol_BeginInternalCoord,swig_arginfo_obmol_begininternalcoord)
 SWIG_ZEND_NAMED_FE(obmol_nextinternalcoord,_wrap_OBMol_NextInternalCoord,swig_arginfo_obmol_nextinternalcoord)
 SWIG_ZEND_NAMED_FE(obmol_settorsion,_wrap_OBMol_SetTorsion,swig_arginfo_obmol_settorsion)
 SWIG_ZEND_NAMED_FE(throwerror,_wrap_ThrowError,swig_arginfo_throwerror)
 SWIG_ZEND_NAMED_FE(cartesiantointernal,_wrap_CartesianToInternal,swig_arginfo_cartesiantointernal)
 SWIG_ZEND_NAMED_FE(internaltocartesian,_wrap_InternalToCartesian,swig_arginfo_internaltocartesian)
 SWIG_ZEND_NAMED_FE(newextension,_wrap_NewExtension,swig_arginfo_newextension)
 SWIG_ZEND_NAMED_FE(etab_set,_wrap_etab_set,swig_arginfo_etab_set)
 SWIG_ZEND_NAMED_FE(etab_get,_wrap_etab_get,swig_arginfo_etab_get)
 SWIG_ZEND_NAMED_FE(ttab_set,_wrap_ttab_set,swig_arginfo_ttab_set)
 SWIG_ZEND_NAMED_FE(ttab_get,_wrap_ttab_get,swig_arginfo_ttab_get)
 SWIG_ZEND_NAMED_FE(isotab_set,_wrap_isotab_set,swig_arginfo_isotab_set)
 SWIG_ZEND_NAMED_FE(isotab_get,_wrap_isotab_get,swig_arginfo_isotab_get)
 SWIG_ZEND_NAMED_FE(aromtyper_set,_wrap_aromtyper_set,swig_arginfo_aromtyper_set)
 SWIG_ZEND_NAMED_FE(aromtyper_get,_wrap_aromtyper_get,swig_arginfo_aromtyper_get)
 SWIG_ZEND_NAMED_FE(atomtyper_set,_wrap_atomtyper_set,swig_arginfo_atomtyper_set)
 SWIG_ZEND_NAMED_FE(atomtyper_get,_wrap_atomtyper_get,swig_arginfo_atomtyper_get)
 SWIG_ZEND_NAMED_FE(chainsparser_set,_wrap_chainsparser_set,swig_arginfo_chainsparser_set)
 SWIG_ZEND_NAMED_FE(chainsparser_get,_wrap_chainsparser_get,swig_arginfo_chainsparser_get)
 SWIG_ZEND_NAMED_FE(resdat_set,_wrap_resdat_set,swig_arginfo_resdat_set)
 SWIG_ZEND_NAMED_FE(resdat_get,_wrap_resdat_get,swig_arginfo_resdat_get)
 SWIG_ZEND_NAMED_FE(noid_get,_wrap_NoId_get,swig_arginfo_noid_get)
 SWIG_ZEND_NAMED_FE(get_rmat,_wrap_get_rmat,swig_arginfo_get_rmat)
 SWIG_ZEND_NAMED_FE(ob_make_rmat,_wrap_ob_make_rmat,swig_arginfo_ob_make_rmat)
 SWIG_ZEND_NAMED_FE(qtrfit,_wrap_qtrfit,swig_arginfo_qtrfit)
 SWIG_ZEND_NAMED_FE(superimpose,_wrap_superimpose,swig_arginfo_superimpose)
 SWIG_ZEND_NAMED_FE(obring_ring_id_set,_wrap_OBRing_ring_id_set,swig_arginfo_obring_ring_id_set)
 SWIG_ZEND_NAMED_FE(obring_ring_id_get,_wrap_OBRing_ring_id_get,swig_arginfo_obring_ring_id_get)
 SWIG_ZEND_NAMED_FE(obring__path_set,_wrap_OBRing__path_set,swig_arginfo_obring__path_set)
 SWIG_ZEND_NAMED_FE(obring__path_get,_wrap_OBRing__path_get,swig_arginfo_obring__path_get)
 SWIG_ZEND_NAMED_FE(obring__pathset_set,_wrap_OBRing__pathset_set,swig_arginfo_obring__pathset_set)
 SWIG_ZEND_NAMED_FE(obring__pathset_get,_wrap_OBRing__pathset_get,swig_arginfo_obring__pathset_get)
 SWIG_ZEND_NAMED_FE(new_obring,_wrap_new_OBRing,swig_arginfo_new_obring)
 SWIG_ZEND_NAMED_FE(obring_size,_wrap_OBRing_Size,swig_arginfo_obring_size)
 SWIG_ZEND_NAMED_FE(obring_pathsize,_wrap_OBRing_PathSize,swig_arginfo_obring_pathsize)
 SWIG_ZEND_NAMED_FE(obring_isaromatic,_wrap_OBRing_IsAromatic,swig_arginfo_obring_isaromatic)
 SWIG_ZEND_NAMED_FE(obring_settype,_wrap_OBRing_SetType,swig_arginfo_obring_settype)
 SWIG_ZEND_NAMED_FE(obring_gettype,_wrap_OBRing_GetType,swig_arginfo_obring_gettype)
 SWIG_ZEND_NAMED_FE(obring_getrootatom,_wrap_OBRing_GetRootAtom,swig_arginfo_obring_getrootatom)
 SWIG_ZEND_NAMED_FE(obring_ismember,_wrap_OBRing_IsMember,swig_arginfo_obring_ismember)
 SWIG_ZEND_NAMED_FE(obring_isinring,_wrap_OBRing_IsInRing,swig_arginfo_obring_isinring)
 SWIG_ZEND_NAMED_FE(obring_setparent,_wrap_OBRing_SetParent,swig_arginfo_obring_setparent)
 SWIG_ZEND_NAMED_FE(obring_getparent,_wrap_OBRing_GetParent,swig_arginfo_obring_getparent)
 SWIG_ZEND_NAMED_FE(obring_findcenterandnormal,_wrap_OBRing_findCenterAndNormal,swig_arginfo_obring_findcenterandnormal)
 SWIG_ZEND_NAMED_FE(compareringsize,_wrap_CompareRingSize,swig_arginfo_compareringsize)
 SWIG_ZEND_NAMED_FE(new_obringsearch,_wrap_new_OBRingSearch,swig_arginfo_new_obringsearch)
 SWIG_ZEND_NAMED_FE(obringsearch_sortrings,_wrap_OBRingSearch_SortRings,swig_arginfo_obringsearch_sortrings)
 SWIG_ZEND_NAMED_FE(obringsearch_removeredundant,_wrap_OBRingSearch_RemoveRedundant,swig_arginfo_obringsearch_removeredundant)
 SWIG_ZEND_NAMED_FE(obringsearch_addringfromclosure,_wrap_OBRingSearch_AddRingFromClosure,swig_arginfo_obringsearch_addringfromclosure)
 SWIG_ZEND_NAMED_FE(obringsearch_saveuniquering,_wrap_OBRingSearch_SaveUniqueRing,swig_arginfo_obringsearch_saveuniquering)
 SWIG_ZEND_NAMED_FE(obringsearch_writerings,_wrap_OBRingSearch_WriteRings,swig_arginfo_obringsearch_writerings)
 SWIG_ZEND_NAMED_FE(obringsearch_beginrings,_wrap_OBRingSearch_BeginRings,swig_arginfo_obringsearch_beginrings)
 SWIG_ZEND_NAMED_FE(obringsearch_endrings,_wrap_OBRingSearch_EndRings,swig_arginfo_obringsearch_endrings)
 SWIG_ZEND_NAMED_FE(new_obrtree,_wrap_new_OBRTree,swig_arginfo_new_obrtree)
 SWIG_ZEND_NAMED_FE(obrtree_getatomidx,_wrap_OBRTree_GetAtomIdx,swig_arginfo_obrtree_getatomidx)
 SWIG_ZEND_NAMED_FE(obrtree_pathtoroot,_wrap_OBRTree_PathToRoot,swig_arginfo_obrtree_pathtoroot)
 SWIG_ZEND_NAMED_FE(new_obsmartspattern,_wrap_new_OBSmartsPattern,swig_arginfo_new_obsmartspattern)
 SWIG_ZEND_NAMED_FE(obsmartspattern_init,_wrap_OBSmartsPattern_Init,swig_arginfo_obsmartspattern_init)
 SWIG_ZEND_NAMED_FE(obsmartspattern_getsmarts,_wrap_OBSmartsPattern_GetSMARTS,swig_arginfo_obsmartspattern_getsmarts)
 SWIG_ZEND_NAMED_FE(obsmartspattern_c_empty,_wrap_OBSmartsPattern_c_Empty,swig_arginfo_obsmartspattern_c_empty)
 SWIG_ZEND_NAMED_FE(obsmartspattern_isvalid,_wrap_OBSmartsPattern_IsValid,swig_arginfo_obsmartspattern_isvalid)
 SWIG_ZEND_NAMED_FE(obsmartspattern_numatoms,_wrap_OBSmartsPattern_NumAtoms,swig_arginfo_obsmartspattern_numatoms)
 SWIG_ZEND_NAMED_FE(obsmartspattern_numbonds,_wrap_OBSmartsPattern_NumBonds,swig_arginfo_obsmartspattern_numbonds)
 SWIG_ZEND_NAMED_FE(obsmartspattern_getbond,_wrap_OBSmartsPattern_GetBond,swig_arginfo_obsmartspattern_getbond)
 SWIG_ZEND_NAMED_FE(obsmartspattern_getatomicnum,_wrap_OBSmartsPattern_GetAtomicNum,swig_arginfo_obsmartspattern_getatomicnum)
 SWIG_ZEND_NAMED_FE(obsmartspattern_getcharge,_wrap_OBSmartsPattern_GetCharge,swig_arginfo_obsmartspattern_getcharge)
 SWIG_ZEND_NAMED_FE(obsmartspattern_getvectorbinding,_wrap_OBSmartsPattern_GetVectorBinding,swig_arginfo_obsmartspattern_getvectorbinding)
 SWIG_ZEND_NAMED_FE(obsmartspattern_match,_wrap_OBSmartsPattern_Match,swig_arginfo_obsmartspattern_match)
 SWIG_ZEND_NAMED_FE(obsmartspattern_hasmatch,_wrap_OBSmartsPattern_HasMatch,swig_arginfo_obsmartspattern_hasmatch)
 SWIG_ZEND_NAMED_FE(obsmartspattern_restrictedmatch,_wrap_OBSmartsPattern_RestrictedMatch,swig_arginfo_obsmartspattern_restrictedmatch)
 SWIG_ZEND_NAMED_FE(obsmartspattern_nummatches,_wrap_OBSmartsPattern_NumMatches,swig_arginfo_obsmartspattern_nummatches)
 SWIG_ZEND_NAMED_FE(obsmartspattern_getmaplist,_wrap_OBSmartsPattern_GetMapList,swig_arginfo_obsmartspattern_getmaplist)
 SWIG_ZEND_NAMED_FE(obsmartspattern_beginmlist,_wrap_OBSmartsPattern_BeginMList,swig_arginfo_obsmartspattern_beginmlist)
 SWIG_ZEND_NAMED_FE(obsmartspattern_endmlist,_wrap_OBSmartsPattern_EndMList,swig_arginfo_obsmartspattern_endmlist)
 SWIG_ZEND_NAMED_FE(obsmartspattern_getumaplist,_wrap_OBSmartsPattern_GetUMapList,swig_arginfo_obsmartspattern_getumaplist)
 SWIG_ZEND_NAMED_FE(obsmartspattern_writemaplist,_wrap_OBSmartsPattern_WriteMapList,swig_arginfo_obsmartspattern_writemaplist)
 SWIG_ZEND_NAMED_FE(new_obsmartsmatcher,_wrap_new_OBSmartsMatcher,swig_arginfo_new_obsmartsmatcher)
 SWIG_ZEND_NAMED_FE(obsmartsmatcher_match,_wrap_OBSmartsMatcher_match,swig_arginfo_obsmartsmatcher_match)
 SWIG_ZEND_NAMED_FE(new_obssmatch,_wrap_new_OBSSMatch,swig_arginfo_new_obssmatch)
 SWIG_ZEND_NAMED_FE(obssmatch_match,_wrap_OBSSMatch_Match,swig_arginfo_obssmatch_match)
 SWIG_ZEND_NAMED_FE(smartslexreplace,_wrap_SmartsLexReplace,swig_arginfo_smartslexreplace)
 SWIG_ZEND_NAMED_FE(aliasdatatype_get,_wrap_AliasDataType_get,swig_arginfo_aliasdatatype_get)
 SWIG_ZEND_NAMED_FE(new_aliasdata,_wrap_new_AliasData,swig_arginfo_new_aliasdata)
 SWIG_ZEND_NAMED_FE(aliasdata_setalias,_wrap_AliasData_SetAlias,swig_arginfo_aliasdata_setalias)
 SWIG_ZEND_NAMED_FE(aliasdata_getalias,_wrap_AliasData_GetAlias,swig_arginfo_aliasdata_getalias)
 SWIG_ZEND_NAMED_FE(aliasdata_getcolor,_wrap_AliasData_GetColor,swig_arginfo_aliasdata_getcolor)
 SWIG_ZEND_NAMED_FE(aliasdata_setcolor,_wrap_AliasData_SetColor,swig_arginfo_aliasdata_setcolor)
 SWIG_ZEND_NAMED_FE(aliasdata_isexpanded,_wrap_AliasData_IsExpanded,swig_arginfo_aliasdata_isexpanded)
 SWIG_ZEND_NAMED_FE(aliasdata_reverttoaliasform,_wrap_AliasData_RevertToAliasForm,swig_arginfo_aliasdata_reverttoaliasform)
 SWIG_ZEND_NAMED_FE(aliasdata_expand,_wrap_AliasData_Expand,swig_arginfo_aliasdata_expand)
 SWIG_ZEND_NAMED_FE(new_obatomclassdata,_wrap_new_OBAtomClassData,swig_arginfo_new_obatomclassdata)
 SWIG_ZEND_NAMED_FE(obatomclassdata_clear,_wrap_OBAtomClassData_Clear,swig_arginfo_obatomclassdata_clear)
 SWIG_ZEND_NAMED_FE(obatomclassdata_add,_wrap_OBAtomClassData_Add,swig_arginfo_obatomclassdata_add)
 SWIG_ZEND_NAMED_FE(obatomclassdata_hasclass,_wrap_OBAtomClassData_HasClass,swig_arginfo_obatomclassdata_hasclass)
 SWIG_ZEND_NAMED_FE(obatomclassdata_getclass,_wrap_OBAtomClassData_GetClass,swig_arginfo_obatomclassdata_getclass)
 SWIG_ZEND_NAMED_FE(obatomclassdata_getclassstring,_wrap_OBAtomClassData_GetClassString,swig_arginfo_obatomclassdata_getclassstring)
 SWIG_ZEND_NAMED_FE(obatomclassdata_size,_wrap_OBAtomClassData_size,swig_arginfo_obatomclassdata_size)
 SWIG_ZEND_NAMED_FE(obfingerprint_c_default,_wrap_OBFingerprint_c_Default,swig_arginfo_obfingerprint_c_default)
 SWIG_ZEND_NAMED_FE(obfingerprint_findtype,_wrap_OBFingerprint_FindType,swig_arginfo_obfingerprint_findtype)
 SWIG_ZEND_NAMED_FE(obfingerprint_setbit,_wrap_OBFingerprint_SetBit,swig_arginfo_obfingerprint_setbit)
 SWIG_ZEND_NAMED_FE(obfingerprint_getbit,_wrap_OBFingerprint_GetBit,swig_arginfo_obfingerprint_getbit)
 SWIG_ZEND_NAMED_FE(obfingerprint_fold,_wrap_OBFingerprint_Fold,swig_arginfo_obfingerprint_fold)
 SWIG_ZEND_NAMED_FE(obfingerprint_getfingerprint,_wrap_OBFingerprint_GetFingerprint,swig_arginfo_obfingerprint_getfingerprint)
 SWIG_ZEND_NAMED_FE(obfingerprint_flags,_wrap_OBFingerprint_Flags,swig_arginfo_obfingerprint_flags)
 SWIG_ZEND_NAMED_FE(obfingerprint_setflags,_wrap_OBFingerprint_SetFlags,swig_arginfo_obfingerprint_setflags)
 SWIG_ZEND_NAMED_FE(obfingerprint_describebits,_wrap_OBFingerprint_DescribeBits,swig_arginfo_obfingerprint_describebits)
 SWIG_ZEND_NAMED_FE(obfingerprint_tanimoto,_wrap_OBFingerprint_Tanimoto,swig_arginfo_obfingerprint_tanimoto)
 SWIG_ZEND_NAMED_FE(obfingerprint_getbitsperint,_wrap_OBFingerprint_Getbitsperint,swig_arginfo_obfingerprint_getbitsperint)
 SWIG_ZEND_NAMED_FE(obfingerprint_findfingerprint,_wrap_OBFingerprint_FindFingerprint,swig_arginfo_obfingerprint_findfingerprint)
 SWIG_ZEND_NAMED_FE(fptindexheader_headerlength_set,_wrap_FptIndexHeader_headerlength_set,swig_arginfo_fptindexheader_headerlength_set)
 SWIG_ZEND_NAMED_FE(fptindexheader_headerlength_get,_wrap_FptIndexHeader_headerlength_get,swig_arginfo_fptindexheader_headerlength_get)
 SWIG_ZEND_NAMED_FE(fptindexheader_nentries_set,_wrap_FptIndexHeader_nEntries_set,swig_arginfo_fptindexheader_nentries_set)
 SWIG_ZEND_NAMED_FE(fptindexheader_nentries_get,_wrap_FptIndexHeader_nEntries_get,swig_arginfo_fptindexheader_nentries_get)
 SWIG_ZEND_NAMED_FE(fptindexheader_words_set,_wrap_FptIndexHeader_words_set,swig_arginfo_fptindexheader_words_set)
 SWIG_ZEND_NAMED_FE(fptindexheader_words_get,_wrap_FptIndexHeader_words_get,swig_arginfo_fptindexheader_words_get)
 SWIG_ZEND_NAMED_FE(fptindexheader_fpid_set,_wrap_FptIndexHeader_fpid_set,swig_arginfo_fptindexheader_fpid_set)
 SWIG_ZEND_NAMED_FE(fptindexheader_fpid_get,_wrap_FptIndexHeader_fpid_get,swig_arginfo_fptindexheader_fpid_get)
 SWIG_ZEND_NAMED_FE(fptindexheader_datafilename_set,_wrap_FptIndexHeader_datafilename_set,swig_arginfo_fptindexheader_datafilename_set)
 SWIG_ZEND_NAMED_FE(fptindexheader_datafilename_get,_wrap_FptIndexHeader_datafilename_get,swig_arginfo_fptindexheader_datafilename_get)
 SWIG_ZEND_NAMED_FE(new_fptindexheader,_wrap_new_FptIndexHeader,swig_arginfo_new_fptindexheader)
 SWIG_ZEND_NAMED_FE(fastsearch_readindexfile,_wrap_FastSearch_ReadIndexFile,swig_arginfo_fastsearch_readindexfile)
 SWIG_ZEND_NAMED_FE(fastsearch_readindex,_wrap_FastSearch_ReadIndex,swig_arginfo_fastsearch_readindex)
 SWIG_ZEND_NAMED_FE(fastsearch_find,_wrap_FastSearch_Find,swig_arginfo_fastsearch_find)
 SWIG_ZEND_NAMED_FE(fastsearch_findmatch,_wrap_FastSearch_FindMatch,swig_arginfo_fastsearch_findmatch)
 SWIG_ZEND_NAMED_FE(fastsearch_findsimilar,_wrap_FastSearch_FindSimilar,swig_arginfo_fastsearch_findsimilar)
 SWIG_ZEND_NAMED_FE(fastsearch_getfingerprint,_wrap_FastSearch_GetFingerprint,swig_arginfo_fastsearch_getfingerprint)
 SWIG_ZEND_NAMED_FE(fastsearch_getindexheader,_wrap_FastSearch_GetIndexHeader,swig_arginfo_fastsearch_getindexheader)
 SWIG_ZEND_NAMED_FE(new_fastsearch,_wrap_new_FastSearch,swig_arginfo_new_fastsearch)
 SWIG_ZEND_NAMED_FE(new_fastsearchindexer,_wrap_new_FastSearchIndexer,swig_arginfo_new_fastsearchindexer)
 SWIG_ZEND_NAMED_FE(fastsearchindexer_add,_wrap_FastSearchIndexer_Add,swig_arginfo_fastsearchindexer_add)
 SWIG_ZEND_NAMED_FE(obdescriptor_c_default,_wrap_OBDescriptor_c_Default,swig_arginfo_obdescriptor_c_default)
 SWIG_ZEND_NAMED_FE(new_obdescriptor,_wrap_new_OBDescriptor,swig_arginfo_new_obdescriptor)
 SWIG_ZEND_NAMED_FE(obdescriptor_findtype,_wrap_OBDescriptor_FindType,swig_arginfo_obdescriptor_findtype)
 SWIG_ZEND_NAMED_FE(obdescriptor_predict,_wrap_OBDescriptor_Predict,swig_arginfo_obdescriptor_predict)
 SWIG_ZEND_NAMED_FE(obdescriptor_predictandsave,_wrap_OBDescriptor_PredictAndSave,swig_arginfo_obdescriptor_predictandsave)
 SWIG_ZEND_NAMED_FE(obdescriptor_getstringvalue,_wrap_OBDescriptor_GetStringValue,swig_arginfo_obdescriptor_getstringvalue)
 SWIG_ZEND_NAMED_FE(obdescriptor_compare,_wrap_OBDescriptor_Compare,swig_arginfo_obdescriptor_compare)
 SWIG_ZEND_NAMED_FE(obdescriptor_display,_wrap_OBDescriptor_Display,swig_arginfo_obdescriptor_display)
 SWIG_ZEND_NAMED_FE(obdescriptor_order,_wrap_OBDescriptor_Order,swig_arginfo_obdescriptor_order)
 SWIG_ZEND_NAMED_FE(obdescriptor_filtercompare,_wrap_OBDescriptor_FilterCompare,swig_arginfo_obdescriptor_filtercompare)
 SWIG_ZEND_NAMED_FE(obdescriptor_addproperties,_wrap_OBDescriptor_AddProperties,swig_arginfo_obdescriptor_addproperties)
 SWIG_ZEND_NAMED_FE(obdescriptor_deleteproperties,_wrap_OBDescriptor_DeleteProperties,swig_arginfo_obdescriptor_deleteproperties)
 SWIG_ZEND_NAMED_FE(obdescriptor_getvalues,_wrap_OBDescriptor_GetValues,swig_arginfo_obdescriptor_getvalues)
 SWIG_ZEND_NAMED_FE(obdescriptor_getidentifier,_wrap_OBDescriptor_GetIdentifier,swig_arginfo_obdescriptor_getidentifier)
 SWIG_ZEND_NAMED_FE(new_linesearchtype,_wrap_new_LineSearchType,swig_arginfo_new_linesearchtype)
 SWIG_ZEND_NAMED_FE(obffparameter_a_set,_wrap_OBFFParameter_a_set,swig_arginfo_obffparameter_a_set)
 SWIG_ZEND_NAMED_FE(obffparameter_a_get,_wrap_OBFFParameter_a_get,swig_arginfo_obffparameter_a_get)
 SWIG_ZEND_NAMED_FE(obffparameter_b_set,_wrap_OBFFParameter_b_set,swig_arginfo_obffparameter_b_set)
 SWIG_ZEND_NAMED_FE(obffparameter_b_get,_wrap_OBFFParameter_b_get,swig_arginfo_obffparameter_b_get)
 SWIG_ZEND_NAMED_FE(obffparameter_c_set,_wrap_OBFFParameter_c_set,swig_arginfo_obffparameter_c_set)
 SWIG_ZEND_NAMED_FE(obffparameter_c_get,_wrap_OBFFParameter_c_get,swig_arginfo_obffparameter_c_get)
 SWIG_ZEND_NAMED_FE(obffparameter_d_set,_wrap_OBFFParameter_d_set,swig_arginfo_obffparameter_d_set)
 SWIG_ZEND_NAMED_FE(obffparameter_d_get,_wrap_OBFFParameter_d_get,swig_arginfo_obffparameter_d_get)
 SWIG_ZEND_NAMED_FE(obffparameter__a_set,_wrap_OBFFParameter__a_set,swig_arginfo_obffparameter__a_set)
 SWIG_ZEND_NAMED_FE(obffparameter__a_get,_wrap_OBFFParameter__a_get,swig_arginfo_obffparameter__a_get)
 SWIG_ZEND_NAMED_FE(obffparameter__b_set,_wrap_OBFFParameter__b_set,swig_arginfo_obffparameter__b_set)
 SWIG_ZEND_NAMED_FE(obffparameter__b_get,_wrap_OBFFParameter__b_get,swig_arginfo_obffparameter__b_get)
 SWIG_ZEND_NAMED_FE(obffparameter__c_set,_wrap_OBFFParameter__c_set,swig_arginfo_obffparameter__c_set)
 SWIG_ZEND_NAMED_FE(obffparameter__c_get,_wrap_OBFFParameter__c_get,swig_arginfo_obffparameter__c_get)
 SWIG_ZEND_NAMED_FE(obffparameter__d_set,_wrap_OBFFParameter__d_set,swig_arginfo_obffparameter__d_set)
 SWIG_ZEND_NAMED_FE(obffparameter__d_get,_wrap_OBFFParameter__d_get,swig_arginfo_obffparameter__d_get)
 SWIG_ZEND_NAMED_FE(obffparameter__ipar_set,_wrap_OBFFParameter__ipar_set,swig_arginfo_obffparameter__ipar_set)
 SWIG_ZEND_NAMED_FE(obffparameter__ipar_get,_wrap_OBFFParameter__ipar_get,swig_arginfo_obffparameter__ipar_get)
 SWIG_ZEND_NAMED_FE(obffparameter__dpar_set,_wrap_OBFFParameter__dpar_set,swig_arginfo_obffparameter__dpar_set)
 SWIG_ZEND_NAMED_FE(obffparameter__dpar_get,_wrap_OBFFParameter__dpar_get,swig_arginfo_obffparameter__dpar_get)
 SWIG_ZEND_NAMED_FE(obffparameter_clear,_wrap_OBFFParameter_clear,swig_arginfo_obffparameter_clear)
 SWIG_ZEND_NAMED_FE(new_obffparameter,_wrap_new_OBFFParameter,swig_arginfo_new_obffparameter)
 SWIG_ZEND_NAMED_FE(obffcalculation2_energy_set,_wrap_OBFFCalculation2_energy_set,swig_arginfo_obffcalculation2_energy_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_energy_get,_wrap_OBFFCalculation2_energy_get,swig_arginfo_obffcalculation2_energy_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_a_set,_wrap_OBFFCalculation2_a_set,swig_arginfo_obffcalculation2_a_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_a_get,_wrap_OBFFCalculation2_a_get,swig_arginfo_obffcalculation2_a_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_b_set,_wrap_OBFFCalculation2_b_set,swig_arginfo_obffcalculation2_b_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_b_get,_wrap_OBFFCalculation2_b_get,swig_arginfo_obffcalculation2_b_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_idx_a_set,_wrap_OBFFCalculation2_idx_a_set,swig_arginfo_obffcalculation2_idx_a_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_idx_a_get,_wrap_OBFFCalculation2_idx_a_get,swig_arginfo_obffcalculation2_idx_a_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_idx_b_set,_wrap_OBFFCalculation2_idx_b_set,swig_arginfo_obffcalculation2_idx_b_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_idx_b_get,_wrap_OBFFCalculation2_idx_b_get,swig_arginfo_obffcalculation2_idx_b_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_pos_a_set,_wrap_OBFFCalculation2_pos_a_set,swig_arginfo_obffcalculation2_pos_a_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_pos_a_get,_wrap_OBFFCalculation2_pos_a_get,swig_arginfo_obffcalculation2_pos_a_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_pos_b_set,_wrap_OBFFCalculation2_pos_b_set,swig_arginfo_obffcalculation2_pos_b_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_pos_b_get,_wrap_OBFFCalculation2_pos_b_get,swig_arginfo_obffcalculation2_pos_b_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_force_a_set,_wrap_OBFFCalculation2_force_a_set,swig_arginfo_obffcalculation2_force_a_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_force_a_get,_wrap_OBFFCalculation2_force_a_get,swig_arginfo_obffcalculation2_force_a_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_force_b_set,_wrap_OBFFCalculation2_force_b_set,swig_arginfo_obffcalculation2_force_b_set)
 SWIG_ZEND_NAMED_FE(obffcalculation2_force_b_get,_wrap_OBFFCalculation2_force_b_get,swig_arginfo_obffcalculation2_force_b_get)
 SWIG_ZEND_NAMED_FE(obffcalculation2_setuppointers,_wrap_OBFFCalculation2_SetupPointers,swig_arginfo_obffcalculation2_setuppointers)
 SWIG_ZEND_NAMED_FE(new_obffcalculation2,_wrap_new_OBFFCalculation2,swig_arginfo_new_obffcalculation2)
 SWIG_ZEND_NAMED_FE(obffcalculation3_c_set,_wrap_OBFFCalculation3_c_set,swig_arginfo_obffcalculation3_c_set)
 SWIG_ZEND_NAMED_FE(obffcalculation3_c_get,_wrap_OBFFCalculation3_c_get,swig_arginfo_obffcalculation3_c_get)
 SWIG_ZEND_NAMED_FE(obffcalculation3_idx_c_set,_wrap_OBFFCalculation3_idx_c_set,swig_arginfo_obffcalculation3_idx_c_set)
 SWIG_ZEND_NAMED_FE(obffcalculation3_idx_c_get,_wrap_OBFFCalculation3_idx_c_get,swig_arginfo_obffcalculation3_idx_c_get)
 SWIG_ZEND_NAMED_FE(obffcalculation3_pos_c_set,_wrap_OBFFCalculation3_pos_c_set,swig_arginfo_obffcalculation3_pos_c_set)
 SWIG_ZEND_NAMED_FE(obffcalculation3_pos_c_get,_wrap_OBFFCalculation3_pos_c_get,swig_arginfo_obffcalculation3_pos_c_get)
 SWIG_ZEND_NAMED_FE(obffcalculation3_force_c_set,_wrap_OBFFCalculation3_force_c_set,swig_arginfo_obffcalculation3_force_c_set)
 SWIG_ZEND_NAMED_FE(obffcalculation3_force_c_get,_wrap_OBFFCalculation3_force_c_get,swig_arginfo_obffcalculation3_force_c_get)
 SWIG_ZEND_NAMED_FE(new_obffcalculation3,_wrap_new_OBFFCalculation3,swig_arginfo_new_obffcalculation3)
 SWIG_ZEND_NAMED_FE(obffcalculation4_d_set,_wrap_OBFFCalculation4_d_set,swig_arginfo_obffcalculation4_d_set)
 SWIG_ZEND_NAMED_FE(obffcalculation4_d_get,_wrap_OBFFCalculation4_d_get,swig_arginfo_obffcalculation4_d_get)
 SWIG_ZEND_NAMED_FE(obffcalculation4_idx_d_set,_wrap_OBFFCalculation4_idx_d_set,swig_arginfo_obffcalculation4_idx_d_set)
 SWIG_ZEND_NAMED_FE(obffcalculation4_idx_d_get,_wrap_OBFFCalculation4_idx_d_get,swig_arginfo_obffcalculation4_idx_d_get)
 SWIG_ZEND_NAMED_FE(obffcalculation4_pos_d_set,_wrap_OBFFCalculation4_pos_d_set,swig_arginfo_obffcalculation4_pos_d_set)
 SWIG_ZEND_NAMED_FE(obffcalculation4_pos_d_get,_wrap_OBFFCalculation4_pos_d_get,swig_arginfo_obffcalculation4_pos_d_get)
 SWIG_ZEND_NAMED_FE(obffcalculation4_force_d_set,_wrap_OBFFCalculation4_force_d_set,swig_arginfo_obffcalculation4_force_d_set)
 SWIG_ZEND_NAMED_FE(obffcalculation4_force_d_get,_wrap_OBFFCalculation4_force_d_get,swig_arginfo_obffcalculation4_force_d_get)
 SWIG_ZEND_NAMED_FE(new_obffcalculation4,_wrap_new_OBFFCalculation4,swig_arginfo_new_obffcalculation4)
 SWIG_ZEND_NAMED_FE(obffconstraint_factor_set,_wrap_OBFFConstraint_factor_set,swig_arginfo_obffconstraint_factor_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_factor_get,_wrap_OBFFConstraint_factor_get,swig_arginfo_obffconstraint_factor_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_constraint_value_set,_wrap_OBFFConstraint_constraint_value_set,swig_arginfo_obffconstraint_constraint_value_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_constraint_value_get,_wrap_OBFFConstraint_constraint_value_get,swig_arginfo_obffconstraint_constraint_value_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_rab0_set,_wrap_OBFFConstraint_rab0_set,swig_arginfo_obffconstraint_rab0_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_rab0_get,_wrap_OBFFConstraint_rab0_get,swig_arginfo_obffconstraint_rab0_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_rbc0_set,_wrap_OBFFConstraint_rbc0_set,swig_arginfo_obffconstraint_rbc0_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_rbc0_get,_wrap_OBFFConstraint_rbc0_get,swig_arginfo_obffconstraint_rbc0_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_type_set,_wrap_OBFFConstraint_type_set,swig_arginfo_obffconstraint_type_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_type_get,_wrap_OBFFConstraint_type_get,swig_arginfo_obffconstraint_type_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_ia_set,_wrap_OBFFConstraint_ia_set,swig_arginfo_obffconstraint_ia_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_ia_get,_wrap_OBFFConstraint_ia_get,swig_arginfo_obffconstraint_ia_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_ib_set,_wrap_OBFFConstraint_ib_set,swig_arginfo_obffconstraint_ib_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_ib_get,_wrap_OBFFConstraint_ib_get,swig_arginfo_obffconstraint_ib_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_ic_set,_wrap_OBFFConstraint_ic_set,swig_arginfo_obffconstraint_ic_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_ic_get,_wrap_OBFFConstraint_ic_get,swig_arginfo_obffconstraint_ic_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_id_set,_wrap_OBFFConstraint_id_set,swig_arginfo_obffconstraint_id_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_id_get,_wrap_OBFFConstraint_id_get,swig_arginfo_obffconstraint_id_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_a_set,_wrap_OBFFConstraint_a_set,swig_arginfo_obffconstraint_a_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_a_get,_wrap_OBFFConstraint_a_get,swig_arginfo_obffconstraint_a_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_b_set,_wrap_OBFFConstraint_b_set,swig_arginfo_obffconstraint_b_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_b_get,_wrap_OBFFConstraint_b_get,swig_arginfo_obffconstraint_b_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_c_set,_wrap_OBFFConstraint_c_set,swig_arginfo_obffconstraint_c_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_c_get,_wrap_OBFFConstraint_c_get,swig_arginfo_obffconstraint_c_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_d_set,_wrap_OBFFConstraint_d_set,swig_arginfo_obffconstraint_d_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_d_get,_wrap_OBFFConstraint_d_get,swig_arginfo_obffconstraint_d_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_grada_set,_wrap_OBFFConstraint_grada_set,swig_arginfo_obffconstraint_grada_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_grada_get,_wrap_OBFFConstraint_grada_get,swig_arginfo_obffconstraint_grada_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_gradb_set,_wrap_OBFFConstraint_gradb_set,swig_arginfo_obffconstraint_gradb_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_gradb_get,_wrap_OBFFConstraint_gradb_get,swig_arginfo_obffconstraint_gradb_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_gradc_set,_wrap_OBFFConstraint_gradc_set,swig_arginfo_obffconstraint_gradc_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_gradc_get,_wrap_OBFFConstraint_gradc_get,swig_arginfo_obffconstraint_gradc_get)
 SWIG_ZEND_NAMED_FE(obffconstraint_gradd_set,_wrap_OBFFConstraint_gradd_set,swig_arginfo_obffconstraint_gradd_set)
 SWIG_ZEND_NAMED_FE(obffconstraint_gradd_get,_wrap_OBFFConstraint_gradd_get,swig_arginfo_obffconstraint_gradd_get)
 SWIG_ZEND_NAMED_FE(new_obffconstraint,_wrap_new_OBFFConstraint,swig_arginfo_new_obffconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraint_getgradient,_wrap_OBFFConstraint_GetGradient,swig_arginfo_obffconstraint_getgradient)
 SWIG_ZEND_NAMED_FE(new_obffconstraints,_wrap_new_OBFFConstraints,swig_arginfo_new_obffconstraints)
 SWIG_ZEND_NAMED_FE(obffconstraints_clear,_wrap_OBFFConstraints_Clear,swig_arginfo_obffconstraints_clear)
 SWIG_ZEND_NAMED_FE(obffconstraints_getconstraintenergy,_wrap_OBFFConstraints_GetConstraintEnergy,swig_arginfo_obffconstraints_getconstraintenergy)
 SWIG_ZEND_NAMED_FE(obffconstraints_getgradient,_wrap_OBFFConstraints_GetGradient,swig_arginfo_obffconstraints_getgradient)
 SWIG_ZEND_NAMED_FE(obffconstraints_setup,_wrap_OBFFConstraints_Setup,swig_arginfo_obffconstraints_setup)
 SWIG_ZEND_NAMED_FE(obffconstraints_setfactor,_wrap_OBFFConstraints_SetFactor,swig_arginfo_obffconstraints_setfactor)
 SWIG_ZEND_NAMED_FE(obffconstraints_addignore,_wrap_OBFFConstraints_AddIgnore,swig_arginfo_obffconstraints_addignore)
 SWIG_ZEND_NAMED_FE(obffconstraints_addatomconstraint,_wrap_OBFFConstraints_AddAtomConstraint,swig_arginfo_obffconstraints_addatomconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraints_addatomxconstraint,_wrap_OBFFConstraints_AddAtomXConstraint,swig_arginfo_obffconstraints_addatomxconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraints_addatomyconstraint,_wrap_OBFFConstraints_AddAtomYConstraint,swig_arginfo_obffconstraints_addatomyconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraints_addatomzconstraint,_wrap_OBFFConstraints_AddAtomZConstraint,swig_arginfo_obffconstraints_addatomzconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraints_adddistanceconstraint,_wrap_OBFFConstraints_AddDistanceConstraint,swig_arginfo_obffconstraints_adddistanceconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraints_addangleconstraint,_wrap_OBFFConstraints_AddAngleConstraint,swig_arginfo_obffconstraints_addangleconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraints_addtorsionconstraint,_wrap_OBFFConstraints_AddTorsionConstraint,swig_arginfo_obffconstraints_addtorsionconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraints_deleteconstraint,_wrap_OBFFConstraints_DeleteConstraint,swig_arginfo_obffconstraints_deleteconstraint)
 SWIG_ZEND_NAMED_FE(obffconstraints_getfactor,_wrap_OBFFConstraints_GetFactor,swig_arginfo_obffconstraints_getfactor)
 SWIG_ZEND_NAMED_FE(obffconstraints_size,_wrap_OBFFConstraints_Size,swig_arginfo_obffconstraints_size)
 SWIG_ZEND_NAMED_FE(obffconstraints_getconstrainttype,_wrap_OBFFConstraints_GetConstraintType,swig_arginfo_obffconstraints_getconstrainttype)
 SWIG_ZEND_NAMED_FE(obffconstraints_getconstraintvalue,_wrap_OBFFConstraints_GetConstraintValue,swig_arginfo_obffconstraints_getconstraintvalue)
 SWIG_ZEND_NAMED_FE(obffconstraints_getconstraintatoma,_wrap_OBFFConstraints_GetConstraintAtomA,swig_arginfo_obffconstraints_getconstraintatoma)
 SWIG_ZEND_NAMED_FE(obffconstraints_getconstraintatomb,_wrap_OBFFConstraints_GetConstraintAtomB,swig_arginfo_obffconstraints_getconstraintatomb)
 SWIG_ZEND_NAMED_FE(obffconstraints_getconstraintatomc,_wrap_OBFFConstraints_GetConstraintAtomC,swig_arginfo_obffconstraints_getconstraintatomc)
 SWIG_ZEND_NAMED_FE(obffconstraints_getconstraintatomd,_wrap_OBFFConstraints_GetConstraintAtomD,swig_arginfo_obffconstraints_getconstraintatomd)
 SWIG_ZEND_NAMED_FE(obffconstraints_isignored,_wrap_OBFFConstraints_IsIgnored,swig_arginfo_obffconstraints_isignored)
 SWIG_ZEND_NAMED_FE(obffconstraints_isfixed,_wrap_OBFFConstraints_IsFixed,swig_arginfo_obffconstraints_isfixed)
 SWIG_ZEND_NAMED_FE(obffconstraints_isxfixed,_wrap_OBFFConstraints_IsXFixed,swig_arginfo_obffconstraints_isxfixed)
 SWIG_ZEND_NAMED_FE(obffconstraints_isyfixed,_wrap_OBFFConstraints_IsYFixed,swig_arginfo_obffconstraints_isyfixed)
 SWIG_ZEND_NAMED_FE(obffconstraints_iszfixed,_wrap_OBFFConstraints_IsZFixed,swig_arginfo_obffconstraints_iszfixed)
 SWIG_ZEND_NAMED_FE(obffconstraints_getignoredbitvec,_wrap_OBFFConstraints_GetIgnoredBitVec,swig_arginfo_obffconstraints_getignoredbitvec)
 SWIG_ZEND_NAMED_FE(obffconstraints_getfixedbitvec,_wrap_OBFFConstraints_GetFixedBitVec,swig_arginfo_obffconstraints_getfixedbitvec)
 SWIG_ZEND_NAMED_FE(obforcefield_c_default,_wrap_OBForceField_c_Default,swig_arginfo_obforcefield_c_default)
 SWIG_ZEND_NAMED_FE(obforcefield_findtype,_wrap_OBForceField_FindType,swig_arginfo_obforcefield_findtype)
 SWIG_ZEND_NAMED_FE(obforcefield_makenewinstance,_wrap_OBForceField_MakeNewInstance,swig_arginfo_obforcefield_makenewinstance)
 SWIG_ZEND_NAMED_FE(obforcefield_findforcefield,_wrap_OBForceField_FindForceField,swig_arginfo_obforcefield_findforcefield)
 SWIG_ZEND_NAMED_FE(obforcefield_setparameterfile,_wrap_OBForceField_SetParameterFile,swig_arginfo_obforcefield_setparameterfile)
 SWIG_ZEND_NAMED_FE(obforcefield_getunit,_wrap_OBForceField_GetUnit,swig_arginfo_obforcefield_getunit)
 SWIG_ZEND_NAMED_FE(obforcefield_hasanalyticalgradients,_wrap_OBForceField_HasAnalyticalGradients,swig_arginfo_obforcefield_hasanalyticalgradients)
 SWIG_ZEND_NAMED_FE(obforcefield_setup,_wrap_OBForceField_Setup,swig_arginfo_obforcefield_setup)
 SWIG_ZEND_NAMED_FE(obforcefield_parseparamfile,_wrap_OBForceField_ParseParamFile,swig_arginfo_obforcefield_parseparamfile)
 SWIG_ZEND_NAMED_FE(obforcefield_settypes,_wrap_OBForceField_SetTypes,swig_arginfo_obforcefield_settypes)
 SWIG_ZEND_NAMED_FE(obforcefield_setformalcharges,_wrap_OBForceField_SetFormalCharges,swig_arginfo_obforcefield_setformalcharges)
 SWIG_ZEND_NAMED_FE(obforcefield_setpartialcharges,_wrap_OBForceField_SetPartialCharges,swig_arginfo_obforcefield_setpartialcharges)
 SWIG_ZEND_NAMED_FE(obforcefield_setupcalculations,_wrap_OBForceField_SetupCalculations,swig_arginfo_obforcefield_setupcalculations)
 SWIG_ZEND_NAMED_FE(obforcefield_setuppointers,_wrap_OBForceField_SetupPointers,swig_arginfo_obforcefield_setuppointers)
 SWIG_ZEND_NAMED_FE(obforcefield_issetupneeded,_wrap_OBForceField_IsSetupNeeded,swig_arginfo_obforcefield_issetupneeded)
 SWIG_ZEND_NAMED_FE(obforcefield_getatomtypes,_wrap_OBForceField_GetAtomTypes,swig_arginfo_obforcefield_getatomtypes)
 SWIG_ZEND_NAMED_FE(obforcefield_getpartialcharges,_wrap_OBForceField_GetPartialCharges,swig_arginfo_obforcefield_getpartialcharges)
 SWIG_ZEND_NAMED_FE(obforcefield_getcoordinates,_wrap_OBForceField_GetCoordinates,swig_arginfo_obforcefield_getcoordinates)
 SWIG_ZEND_NAMED_FE(obforcefield_updatecoordinates,_wrap_OBForceField_UpdateCoordinates,swig_arginfo_obforcefield_updatecoordinates)
 SWIG_ZEND_NAMED_FE(obforcefield_getconformers,_wrap_OBForceField_GetConformers,swig_arginfo_obforcefield_getconformers)
 SWIG_ZEND_NAMED_FE(obforcefield_updateconformers,_wrap_OBForceField_UpdateConformers,swig_arginfo_obforcefield_updateconformers)
 SWIG_ZEND_NAMED_FE(obforcefield_setcoordinates,_wrap_OBForceField_SetCoordinates,swig_arginfo_obforcefield_setcoordinates)
 SWIG_ZEND_NAMED_FE(obforcefield_setconformers,_wrap_OBForceField_SetConformers,swig_arginfo_obforcefield_setconformers)
 SWIG_ZEND_NAMED_FE(obforcefield_getgrid,_wrap_OBForceField_GetGrid,swig_arginfo_obforcefield_getgrid)
 SWIG_ZEND_NAMED_FE(obforcefield_addintragroup,_wrap_OBForceField_AddIntraGroup,swig_arginfo_obforcefield_addintragroup)
 SWIG_ZEND_NAMED_FE(obforcefield_addintergroup,_wrap_OBForceField_AddInterGroup,swig_arginfo_obforcefield_addintergroup)
 SWIG_ZEND_NAMED_FE(obforcefield_addintergroups,_wrap_OBForceField_AddInterGroups,swig_arginfo_obforcefield_addintergroups)
 SWIG_ZEND_NAMED_FE(obforcefield_cleargroups,_wrap_OBForceField_ClearGroups,swig_arginfo_obforcefield_cleargroups)
 SWIG_ZEND_NAMED_FE(obforcefield_hasgroups,_wrap_OBForceField_HasGroups,swig_arginfo_obforcefield_hasgroups)
 SWIG_ZEND_NAMED_FE(obforcefield_enablecutoff,_wrap_OBForceField_EnableCutOff,swig_arginfo_obforcefield_enablecutoff)
 SWIG_ZEND_NAMED_FE(obforcefield_iscutoffenabled,_wrap_OBForceField_IsCutOffEnabled,swig_arginfo_obforcefield_iscutoffenabled)
 SWIG_ZEND_NAMED_FE(obforcefield_setvdwcutoff,_wrap_OBForceField_SetVDWCutOff,swig_arginfo_obforcefield_setvdwcutoff)
 SWIG_ZEND_NAMED_FE(obforcefield_getvdwcutoff,_wrap_OBForceField_GetVDWCutOff,swig_arginfo_obforcefield_getvdwcutoff)
 SWIG_ZEND_NAMED_FE(obforcefield_setelectrostaticcutoff,_wrap_OBForceField_SetElectrostaticCutOff,swig_arginfo_obforcefield_setelectrostaticcutoff)
 SWIG_ZEND_NAMED_FE(obforcefield_getelectrostaticcutoff,_wrap_OBForceField_GetElectrostaticCutOff,swig_arginfo_obforcefield_getelectrostaticcutoff)
 SWIG_ZEND_NAMED_FE(obforcefield_setupdatefrequency,_wrap_OBForceField_SetUpdateFrequency,swig_arginfo_obforcefield_setupdatefrequency)
 SWIG_ZEND_NAMED_FE(obforcefield_getupdatefrequency,_wrap_OBForceField_GetUpdateFrequency,swig_arginfo_obforcefield_getupdatefrequency)
 SWIG_ZEND_NAMED_FE(obforcefield_updatepairssimple,_wrap_OBForceField_UpdatePairsSimple,swig_arginfo_obforcefield_updatepairssimple)
 SWIG_ZEND_NAMED_FE(obforcefield_getnumpairs,_wrap_OBForceField_GetNumPairs,swig_arginfo_obforcefield_getnumpairs)
 SWIG_ZEND_NAMED_FE(obforcefield_getnumelectrostaticpairs,_wrap_OBForceField_GetNumElectrostaticPairs,swig_arginfo_obforcefield_getnumelectrostaticpairs)
 SWIG_ZEND_NAMED_FE(obforcefield_getnumvdwpairs,_wrap_OBForceField_GetNumVDWPairs,swig_arginfo_obforcefield_getnumvdwpairs)
 SWIG_ZEND_NAMED_FE(obforcefield_enableallpairs,_wrap_OBForceField_EnableAllPairs,swig_arginfo_obforcefield_enableallpairs)
 SWIG_ZEND_NAMED_FE(obforcefield_energy,_wrap_OBForceField_Energy,swig_arginfo_obforcefield_energy)
 SWIG_ZEND_NAMED_FE(obforcefield_e_bond,_wrap_OBForceField_E_Bond,swig_arginfo_obforcefield_e_bond)
 SWIG_ZEND_NAMED_FE(obforcefield_e_angle,_wrap_OBForceField_E_Angle,swig_arginfo_obforcefield_e_angle)
 SWIG_ZEND_NAMED_FE(obforcefield_e_strbnd,_wrap_OBForceField_E_StrBnd,swig_arginfo_obforcefield_e_strbnd)
 SWIG_ZEND_NAMED_FE(obforcefield_e_torsion,_wrap_OBForceField_E_Torsion,swig_arginfo_obforcefield_e_torsion)
 SWIG_ZEND_NAMED_FE(obforcefield_e_oop,_wrap_OBForceField_E_OOP,swig_arginfo_obforcefield_e_oop)
 SWIG_ZEND_NAMED_FE(obforcefield_e_vdw,_wrap_OBForceField_E_VDW,swig_arginfo_obforcefield_e_vdw)
 SWIG_ZEND_NAMED_FE(obforcefield_e_electrostatic,_wrap_OBForceField_E_Electrostatic,swig_arginfo_obforcefield_e_electrostatic)
 SWIG_ZEND_NAMED_FE(obforcefield_printtypes,_wrap_OBForceField_PrintTypes,swig_arginfo_obforcefield_printtypes)
 SWIG_ZEND_NAMED_FE(obforcefield_printformalcharges,_wrap_OBForceField_PrintFormalCharges,swig_arginfo_obforcefield_printformalcharges)
 SWIG_ZEND_NAMED_FE(obforcefield_printpartialcharges,_wrap_OBForceField_PrintPartialCharges,swig_arginfo_obforcefield_printpartialcharges)
 SWIG_ZEND_NAMED_FE(obforcefield_printvelocities,_wrap_OBForceField_PrintVelocities,swig_arginfo_obforcefield_printvelocities)
 SWIG_ZEND_NAMED_FE(obforcefield_setlogfile,_wrap_OBForceField_SetLogFile,swig_arginfo_obforcefield_setlogfile)
 SWIG_ZEND_NAMED_FE(obforcefield_setloglevel,_wrap_OBForceField_SetLogLevel,swig_arginfo_obforcefield_setloglevel)
 SWIG_ZEND_NAMED_FE(obforcefield_getloglevel,_wrap_OBForceField_GetLogLevel,swig_arginfo_obforcefield_getloglevel)
 SWIG_ZEND_NAMED_FE(obforcefield_obfflog,_wrap_OBForceField_OBFFLog,swig_arginfo_obforcefield_obfflog)
 SWIG_ZEND_NAMED_FE(obforcefield_distancegeometry,_wrap_OBForceField_DistanceGeometry,swig_arginfo_obforcefield_distancegeometry)
 SWIG_ZEND_NAMED_FE(obforcefield_systematicrotorsearch,_wrap_OBForceField_SystematicRotorSearch,swig_arginfo_obforcefield_systematicrotorsearch)
 SWIG_ZEND_NAMED_FE(obforcefield_systematicrotorsearchinitialize,_wrap_OBForceField_SystematicRotorSearchInitialize,swig_arginfo_obforcefield_systematicrotorsearchinitialize)
 SWIG_ZEND_NAMED_FE(obforcefield_systematicrotorsearchnextconformer,_wrap_OBForceField_SystematicRotorSearchNextConformer,swig_arginfo_obforcefield_systematicrotorsearchnextconformer)
 SWIG_ZEND_NAMED_FE(obforcefield_randomrotorsearch,_wrap_OBForceField_RandomRotorSearch,swig_arginfo_obforcefield_randomrotorsearch)
 SWIG_ZEND_NAMED_FE(obforcefield_randomrotorsearchinitialize,_wrap_OBForceField_RandomRotorSearchInitialize,swig_arginfo_obforcefield_randomrotorsearchinitialize)
 SWIG_ZEND_NAMED_FE(obforcefield_randomrotorsearchnextconformer,_wrap_OBForceField_RandomRotorSearchNextConformer,swig_arginfo_obforcefield_randomrotorsearchnextconformer)
 SWIG_ZEND_NAMED_FE(obforcefield_weightedrotorsearch,_wrap_OBForceField_WeightedRotorSearch,swig_arginfo_obforcefield_weightedrotorsearch)
 SWIG_ZEND_NAMED_FE(obforcefield_fastrotorsearch,_wrap_OBForceField_FastRotorSearch,swig_arginfo_obforcefield_fastrotorsearch)
 SWIG_ZEND_NAMED_FE(obforcefield_setlinesearchtype,_wrap_OBForceField_SetLineSearchType,swig_arginfo_obforcefield_setlinesearchtype)
 SWIG_ZEND_NAMED_FE(obforcefield_getlinesearchtype,_wrap_OBForceField_GetLineSearchType,swig_arginfo_obforcefield_getlinesearchtype)
 SWIG_ZEND_NAMED_FE(obforcefield_linesearch,_wrap_OBForceField_LineSearch,swig_arginfo_obforcefield_linesearch)
 SWIG_ZEND_NAMED_FE(obforcefield_newton2numlinesearch,_wrap_OBForceField_Newton2NumLineSearch,swig_arginfo_obforcefield_newton2numlinesearch)
 SWIG_ZEND_NAMED_FE(obforcefield_linesearchtakestep,_wrap_OBForceField_LineSearchTakeStep,swig_arginfo_obforcefield_linesearchtakestep)
 SWIG_ZEND_NAMED_FE(obforcefield_steepestdescent,_wrap_OBForceField_SteepestDescent,swig_arginfo_obforcefield_steepestdescent)
 SWIG_ZEND_NAMED_FE(obforcefield_steepestdescentinitialize,_wrap_OBForceField_SteepestDescentInitialize,swig_arginfo_obforcefield_steepestdescentinitialize)
 SWIG_ZEND_NAMED_FE(obforcefield_steepestdescenttakensteps,_wrap_OBForceField_SteepestDescentTakeNSteps,swig_arginfo_obforcefield_steepestdescenttakensteps)
 SWIG_ZEND_NAMED_FE(obforcefield_conjugategradients,_wrap_OBForceField_ConjugateGradients,swig_arginfo_obforcefield_conjugategradients)
 SWIG_ZEND_NAMED_FE(obforcefield_conjugategradientsinitialize,_wrap_OBForceField_ConjugateGradientsInitialize,swig_arginfo_obforcefield_conjugategradientsinitialize)
 SWIG_ZEND_NAMED_FE(obforcefield_conjugategradientstakensteps,_wrap_OBForceField_ConjugateGradientsTakeNSteps,swig_arginfo_obforcefield_conjugategradientstakensteps)
 SWIG_ZEND_NAMED_FE(obforcefield_generatevelocities,_wrap_OBForceField_GenerateVelocities,swig_arginfo_obforcefield_generatevelocities)
 SWIG_ZEND_NAMED_FE(obforcefield_correctvelocities,_wrap_OBForceField_CorrectVelocities,swig_arginfo_obforcefield_correctvelocities)
 SWIG_ZEND_NAMED_FE(obforcefield_moleculardynamicstakensteps,_wrap_OBForceField_MolecularDynamicsTakeNSteps,swig_arginfo_obforcefield_moleculardynamicstakensteps)
 SWIG_ZEND_NAMED_FE(obforcefield_getconstraints,_wrap_OBForceField_GetConstraints,swig_arginfo_obforcefield_getconstraints)
 SWIG_ZEND_NAMED_FE(obforcefield_setconstraints,_wrap_OBForceField_SetConstraints,swig_arginfo_obforcefield_setconstraints)
 SWIG_ZEND_NAMED_FE(obforcefield_setfixatom,_wrap_OBForceField_SetFixAtom,swig_arginfo_obforcefield_setfixatom)
 SWIG_ZEND_NAMED_FE(obforcefield_unsetfixatom,_wrap_OBForceField_UnsetFixAtom,swig_arginfo_obforcefield_unsetfixatom)
 SWIG_ZEND_NAMED_FE(obforcefield_setignoreatom,_wrap_OBForceField_SetIgnoreAtom,swig_arginfo_obforcefield_setignoreatom)
 SWIG_ZEND_NAMED_FE(obforcefield_unsetignoreatom,_wrap_OBForceField_UnsetIgnoreAtom,swig_arginfo_obforcefield_unsetignoreatom)
 SWIG_ZEND_NAMED_FE(obforcefield_ignorecalculation,_wrap_OBForceField_IgnoreCalculation,swig_arginfo_obforcefield_ignorecalculation)
 SWIG_ZEND_NAMED_FE(obforcefield_detectexplosion,_wrap_OBForceField_DetectExplosion,swig_arginfo_obforcefield_detectexplosion)
 SWIG_ZEND_NAMED_FE(obforcefield_validatelinesearch,_wrap_OBForceField_ValidateLineSearch,swig_arginfo_obforcefield_validatelinesearch)
 SWIG_ZEND_NAMED_FE(obforcefield_validatesteepestdescent,_wrap_OBForceField_ValidateSteepestDescent,swig_arginfo_obforcefield_validatesteepestdescent)
 SWIG_ZEND_NAMED_FE(obforcefield_validateconjugategradients,_wrap_OBForceField_ValidateConjugateGradients,swig_arginfo_obforcefield_validateconjugategradients)
 SWIG_ZEND_NAMED_FE(obforcefield_validate,_wrap_OBForceField_Validate,swig_arginfo_obforcefield_validate)
 SWIG_ZEND_NAMED_FE(obforcefield_validategradients,_wrap_OBForceField_ValidateGradients,swig_arginfo_obforcefield_validategradients)
 SWIG_ZEND_NAMED_FE(obforcefield_validategradienterror,_wrap_OBForceField_ValidateGradientError,swig_arginfo_obforcefield_validategradienterror)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorbondderivative,_wrap_OBForceField_VectorBondDerivative,swig_arginfo_obforcefield_vectorbondderivative)
 SWIG_ZEND_NAMED_FE(obforcefield_vectordistancederivative,_wrap_OBForceField_VectorDistanceDerivative,swig_arginfo_obforcefield_vectordistancederivative)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorlengthderivative,_wrap_OBForceField_VectorLengthDerivative,swig_arginfo_obforcefield_vectorlengthderivative)
 SWIG_ZEND_NAMED_FE(obforcefield_vectoranglederivative,_wrap_OBForceField_VectorAngleDerivative,swig_arginfo_obforcefield_vectoranglederivative)
 SWIG_ZEND_NAMED_FE(obforcefield_vectoroopderivative,_wrap_OBForceField_VectorOOPDerivative,swig_arginfo_obforcefield_vectoroopderivative)
 SWIG_ZEND_NAMED_FE(obforcefield_vectortorsionderivative,_wrap_OBForceField_VectorTorsionDerivative,swig_arginfo_obforcefield_vectortorsionderivative)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorsubtract,_wrap_OBForceField_VectorSubtract,swig_arginfo_obforcefield_vectorsubtract)
 SWIG_ZEND_NAMED_FE(obforcefield_vectoradd,_wrap_OBForceField_VectorAdd,swig_arginfo_obforcefield_vectoradd)
 SWIG_ZEND_NAMED_FE(obforcefield_vectordivide,_wrap_OBForceField_VectorDivide,swig_arginfo_obforcefield_vectordivide)
 SWIG_ZEND_NAMED_FE(obforcefield_vectormultiply,_wrap_OBForceField_VectorMultiply,swig_arginfo_obforcefield_vectormultiply)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorselfmultiply,_wrap_OBForceField_VectorSelfMultiply,swig_arginfo_obforcefield_vectorselfmultiply)
 SWIG_ZEND_NAMED_FE(obforcefield_vectornormalize,_wrap_OBForceField_VectorNormalize,swig_arginfo_obforcefield_vectornormalize)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorcopy,_wrap_OBForceField_VectorCopy,swig_arginfo_obforcefield_vectorcopy)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorlength,_wrap_OBForceField_VectorLength,swig_arginfo_obforcefield_vectorlength)
 SWIG_ZEND_NAMED_FE(obforcefield_vectordistance,_wrap_OBForceField_VectorDistance,swig_arginfo_obforcefield_vectordistance)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorangle,_wrap_OBForceField_VectorAngle,swig_arginfo_obforcefield_vectorangle)
 SWIG_ZEND_NAMED_FE(obforcefield_vectortorsion,_wrap_OBForceField_VectorTorsion,swig_arginfo_obforcefield_vectortorsion)
 SWIG_ZEND_NAMED_FE(obforcefield_vectoroop,_wrap_OBForceField_VectorOOP,swig_arginfo_obforcefield_vectoroop)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorclear,_wrap_OBForceField_VectorClear,swig_arginfo_obforcefield_vectorclear)
 SWIG_ZEND_NAMED_FE(obforcefield_vectordot,_wrap_OBForceField_VectorDot,swig_arginfo_obforcefield_vectordot)
 SWIG_ZEND_NAMED_FE(obforcefield_vectorcross,_wrap_OBForceField_VectorCross,swig_arginfo_obforcefield_vectorcross)
 SWIG_ZEND_NAMED_FE(obforcefield_printvector,_wrap_OBForceField_PrintVector,swig_arginfo_obforcefield_printvector)
 SWIG_ZEND_NAMED_FE(obforcefield_setlogtostdout,_wrap_OBForceField_SetLogToStdOut,swig_arginfo_obforcefield_setlogtostdout)
 SWIG_ZEND_NAMED_FE(obforcefield_setlogtostderr,_wrap_OBForceField_SetLogToStdErr,swig_arginfo_obforcefield_setlogtostderr)
 SWIG_ZEND_NAMED_FE(new_obbuilder,_wrap_new_OBBuilder,swig_arginfo_new_obbuilder)
 SWIG_ZEND_NAMED_FE(obbuilder_build,_wrap_OBBuilder_Build,swig_arginfo_obbuilder_build)
 SWIG_ZEND_NAMED_FE(obbuilder_setkeeprings,_wrap_OBBuilder_SetKeepRings,swig_arginfo_obbuilder_setkeeprings)
 SWIG_ZEND_NAMED_FE(obbuilder_unsetkeeprings,_wrap_OBBuilder_UnsetKeepRings,swig_arginfo_obbuilder_unsetkeeprings)
 SWIG_ZEND_NAMED_FE(obbuilder_loadfragments,_wrap_OBBuilder_LoadFragments,swig_arginfo_obbuilder_loadfragments)
 SWIG_ZEND_NAMED_FE(obbuilder_getnewbondvector,_wrap_OBBuilder_GetNewBondVector,swig_arginfo_obbuilder_getnewbondvector)
 SWIG_ZEND_NAMED_FE(obbuilder_connect,_wrap_OBBuilder_Connect,swig_arginfo_obbuilder_connect)
 SWIG_ZEND_NAMED_FE(obbuilder_swap,_wrap_OBBuilder_Swap,swig_arginfo_obbuilder_swap)
 SWIG_ZEND_NAMED_FE(obbuilder_correctstereobonds,_wrap_OBBuilder_CorrectStereoBonds,swig_arginfo_obbuilder_correctstereobonds)
 SWIG_ZEND_NAMED_FE(obbuilder_correctstereoatoms,_wrap_OBBuilder_CorrectStereoAtoms,swig_arginfo_obbuilder_correctstereoatoms)
 SWIG_ZEND_NAMED_FE(obbuilder_isspiroatom,_wrap_OBBuilder_IsSpiroAtom,swig_arginfo_obbuilder_isspiroatom)
 SWIG_ZEND_NAMED_FE(obbuilder_getfragment,_wrap_OBBuilder_GetFragment,swig_arginfo_obbuilder_getfragment)
 SWIG_ZEND_NAMED_FE(obbuilder_addnbrs,_wrap_OBBuilder_AddNbrs,swig_arginfo_obbuilder_addnbrs)
 SWIG_ZEND_NAMED_FE(obop_c_default,_wrap_OBOp_c_Default,swig_arginfo_obop_c_default)
 SWIG_ZEND_NAMED_FE(obop_findtype,_wrap_OBOp_FindType,swig_arginfo_obop_findtype)
 SWIG_ZEND_NAMED_FE(obop_c_do,_wrap_OBOp_c_Do,swig_arginfo_obop_c_do)
 SWIG_ZEND_NAMED_FE(obop_workswith,_wrap_OBOp_WorksWith,swig_arginfo_obop_workswith)
 SWIG_ZEND_NAMED_FE(obop_processvec,_wrap_OBOp_ProcessVec,swig_arginfo_obop_processvec)
 SWIG_ZEND_NAMED_FE(obop_opoptions,_wrap_OBOp_OpOptions,swig_arginfo_obop_opoptions)
 SWIG_ZEND_NAMED_FE(obop_doops,_wrap_OBOp_DoOps,swig_arginfo_obop_doops)
 SWIG_ZEND_NAMED_FE(obchargemodel_c_default,_wrap_OBChargeModel_c_Default,swig_arginfo_obchargemodel_c_default)
 SWIG_ZEND_NAMED_FE(new_obchargemodel,_wrap_new_OBChargeModel,swig_arginfo_new_obchargemodel)
 SWIG_ZEND_NAMED_FE(obchargemodel_findtype,_wrap_OBChargeModel_FindType,swig_arginfo_obchargemodel_findtype)
 SWIG_ZEND_NAMED_FE(obchargemodel_computecharges,_wrap_OBChargeModel_ComputeCharges,swig_arginfo_obchargemodel_computecharges)
 SWIG_ZEND_NAMED_FE(obchargemodel_getformalcharges,_wrap_OBChargeModel_GetFormalCharges,swig_arginfo_obchargemodel_getformalcharges)
 SWIG_ZEND_NAMED_FE(obchargemodel_getpartialcharges,_wrap_OBChargeModel_GetPartialCharges,swig_arginfo_obchargemodel_getpartialcharges)
 SWIG_ZEND_NAMED_FE(obchargemodel_getdipolemoment,_wrap_OBChargeModel_GetDipoleMoment,swig_arginfo_obchargemodel_getdipolemoment)
 SWIG_ZEND_NAMED_FE(new_obgraphsym,_wrap_new_OBGraphSym,swig_arginfo_new_obgraphsym)
 SWIG_ZEND_NAMED_FE(obgraphsym_nosymmetryclass_get,_wrap_OBGraphSym_NoSymmetryClass_get,swig_arginfo_obgraphsym_nosymmetryclass_get)
 SWIG_ZEND_NAMED_FE(obgraphsym_getsymmetry,_wrap_OBGraphSym_GetSymmetry,swig_arginfo_obgraphsym_getsymmetry)
 SWIG_ZEND_NAMED_FE(obgraphsym_clearsymmetry,_wrap_OBGraphSym_ClearSymmetry,swig_arginfo_obgraphsym_clearsymmetry)
 SWIG_ZEND_NAMED_FE(obisomorphismmapper_getinstance,_wrap_OBIsomorphismMapper_GetInstance,swig_arginfo_obisomorphismmapper_getinstance)
 SWIG_ZEND_NAMED_FE(obisomorphismmapper_mapfirst,_wrap_OBIsomorphismMapper_MapFirst,swig_arginfo_obisomorphismmapper_mapfirst)
 SWIG_ZEND_NAMED_FE(obisomorphismmapper_mapunique,_wrap_OBIsomorphismMapper_MapUnique,swig_arginfo_obisomorphismmapper_mapunique)
 SWIG_ZEND_NAMED_FE(obisomorphismmapper_mapall,_wrap_OBIsomorphismMapper_MapAll,swig_arginfo_obisomorphismmapper_mapall)
 SWIG_ZEND_NAMED_FE(obisomorphismmapper_mapgeneric,_wrap_OBIsomorphismMapper_MapGeneric,swig_arginfo_obisomorphismmapper_mapgeneric)
 SWIG_ZEND_NAMED_FE(obisomorphismmapper_settimeout,_wrap_OBIsomorphismMapper_SetTimeout,swig_arginfo_obisomorphismmapper_settimeout)
 SWIG_ZEND_NAMED_FE(mapsto,_wrap_MapsTo,swig_arginfo_mapsto)
 SWIG_ZEND_NAMED_FE(findautomorphisms,_wrap_FindAutomorphisms,swig_arginfo_findautomorphisms)
 SWIG_ZEND_NAMED_FE(new_obqueryatom,_wrap_new_OBQueryAtom,swig_arginfo_new_obqueryatom)
 SWIG_ZEND_NAMED_FE(obqueryatom_getindex,_wrap_OBQueryAtom_GetIndex,swig_arginfo_obqueryatom_getindex)
 SWIG_ZEND_NAMED_FE(obqueryatom_getbonds,_wrap_OBQueryAtom_GetBonds,swig_arginfo_obqueryatom_getbonds)
 SWIG_ZEND_NAMED_FE(obqueryatom_getnbrs,_wrap_OBQueryAtom_GetNbrs,swig_arginfo_obqueryatom_getnbrs)
 SWIG_ZEND_NAMED_FE(obqueryatom_matches,_wrap_OBQueryAtom_Matches,swig_arginfo_obqueryatom_matches)
 SWIG_ZEND_NAMED_FE(new_obquerybond,_wrap_new_OBQueryBond,swig_arginfo_new_obquerybond)
 SWIG_ZEND_NAMED_FE(obquerybond_getindex,_wrap_OBQueryBond_GetIndex,swig_arginfo_obquerybond_getindex)
 SWIG_ZEND_NAMED_FE(obquerybond_getbeginatom,_wrap_OBQueryBond_GetBeginAtom,swig_arginfo_obquerybond_getbeginatom)
 SWIG_ZEND_NAMED_FE(obquerybond_getendatom,_wrap_OBQueryBond_GetEndAtom,swig_arginfo_obquerybond_getendatom)
 SWIG_ZEND_NAMED_FE(obquerybond_matches,_wrap_OBQueryBond_Matches,swig_arginfo_obquerybond_matches)
 SWIG_ZEND_NAMED_FE(obquery_numatoms,_wrap_OBQuery_NumAtoms,swig_arginfo_obquery_numatoms)
 SWIG_ZEND_NAMED_FE(obquery_numbonds,_wrap_OBQuery_NumBonds,swig_arginfo_obquery_numbonds)
 SWIG_ZEND_NAMED_FE(obquery_getatoms,_wrap_OBQuery_GetAtoms,swig_arginfo_obquery_getatoms)
 SWIG_ZEND_NAMED_FE(obquery_getbonds,_wrap_OBQuery_GetBonds,swig_arginfo_obquery_getbonds)
 SWIG_ZEND_NAMED_FE(obquery_getbond,_wrap_OBQuery_GetBond,swig_arginfo_obquery_getbond)
 SWIG_ZEND_NAMED_FE(obquery_addatom,_wrap_OBQuery_AddAtom,swig_arginfo_obquery_addatom)
 SWIG_ZEND_NAMED_FE(obquery_addbond,_wrap_OBQuery_AddBond,swig_arginfo_obquery_addbond)
 SWIG_ZEND_NAMED_FE(new_obquery,_wrap_new_OBQuery,swig_arginfo_new_obquery)
 SWIG_ZEND_NAMED_FE(compilemoleculequery,_wrap_CompileMoleculeQuery,swig_arginfo_compilemoleculequery)
 SWIG_ZEND_NAMED_FE(compilesmilesquery,_wrap_CompileSmilesQuery,swig_arginfo_compilesmilesquery)
 SWIG_ZEND_NAMED_FE(canonicallabels,_wrap_CanonicalLabels,swig_arginfo_canonicallabels)
 SWIG_ZEND_NAMED_FE(obstereo_makerefs,_wrap_OBStereo_MakeRefs,swig_arginfo_obstereo_makerefs)
 SWIG_ZEND_NAMED_FE(obstereo_containssamerefs,_wrap_OBStereo_ContainsSameRefs,swig_arginfo_obstereo_containssamerefs)
 SWIG_ZEND_NAMED_FE(obstereo_containsref,_wrap_OBStereo_ContainsRef,swig_arginfo_obstereo_containsref)
 SWIG_ZEND_NAMED_FE(obstereo_numinversions,_wrap_OBStereo_NumInversions,swig_arginfo_obstereo_numinversions)
 SWIG_ZEND_NAMED_FE(obstereo_permutate,_wrap_OBStereo_Permutate,swig_arginfo_obstereo_permutate)
 SWIG_ZEND_NAMED_FE(obstereo_permutated,_wrap_OBStereo_Permutated,swig_arginfo_obstereo_permutated)
 SWIG_ZEND_NAMED_FE(new_obstereo,_wrap_new_OBStereo,swig_arginfo_new_obstereo)
 SWIG_ZEND_NAMED_FE(new_obstereounit,_wrap_new_OBStereoUnit,swig_arginfo_new_obstereounit)
 SWIG_ZEND_NAMED_FE(obstereounit_type_set,_wrap_OBStereoUnit_type_set,swig_arginfo_obstereounit_type_set)
 SWIG_ZEND_NAMED_FE(obstereounit_type_get,_wrap_OBStereoUnit_type_get,swig_arginfo_obstereounit_type_get)
 SWIG_ZEND_NAMED_FE(obstereounit_id_set,_wrap_OBStereoUnit_id_set,swig_arginfo_obstereounit_id_set)
 SWIG_ZEND_NAMED_FE(obstereounit_id_get,_wrap_OBStereoUnit_id_get,swig_arginfo_obstereounit_id_get)
 SWIG_ZEND_NAMED_FE(obstereounit_para_set,_wrap_OBStereoUnit_para_set,swig_arginfo_obstereounit_para_set)
 SWIG_ZEND_NAMED_FE(obstereounit_para_get,_wrap_OBStereoUnit_para_get,swig_arginfo_obstereounit_para_get)
 SWIG_ZEND_NAMED_FE(obstereobase_getmolecule,_wrap_OBStereoBase_GetMolecule,swig_arginfo_obstereobase_getmolecule)
 SWIG_ZEND_NAMED_FE(obstereobase_gettype,_wrap_OBStereoBase_GetType,swig_arginfo_obstereobase_gettype)
 SWIG_ZEND_NAMED_FE(obstereobase_setspecified,_wrap_OBStereoBase_SetSpecified,swig_arginfo_obstereobase_setspecified)
 SWIG_ZEND_NAMED_FE(obstereobase_isspecified,_wrap_OBStereoBase_IsSpecified,swig_arginfo_obstereobase_isspecified)
 SWIG_ZEND_NAMED_FE(new_obstereofacade,_wrap_new_OBStereoFacade,swig_arginfo_new_obstereofacade)
 SWIG_ZEND_NAMED_FE(obstereofacade_numtetrahedralstereo,_wrap_OBStereoFacade_NumTetrahedralStereo,swig_arginfo_obstereofacade_numtetrahedralstereo)
 SWIG_ZEND_NAMED_FE(obstereofacade_hastetrahedralstereo,_wrap_OBStereoFacade_HasTetrahedralStereo,swig_arginfo_obstereofacade_hastetrahedralstereo)
 SWIG_ZEND_NAMED_FE(obstereofacade_gettetrahedralstereo,_wrap_OBStereoFacade_GetTetrahedralStereo,swig_arginfo_obstereofacade_gettetrahedralstereo)
 SWIG_ZEND_NAMED_FE(obstereofacade_numcistransstereo,_wrap_OBStereoFacade_NumCisTransStereo,swig_arginfo_obstereofacade_numcistransstereo)
 SWIG_ZEND_NAMED_FE(obstereofacade_hascistransstereo,_wrap_OBStereoFacade_HasCisTransStereo,swig_arginfo_obstereofacade_hascistransstereo)
 SWIG_ZEND_NAMED_FE(obstereofacade_getcistransstereo,_wrap_OBStereoFacade_GetCisTransStereo,swig_arginfo_obstereofacade_getcistransstereo)
 SWIG_ZEND_NAMED_FE(obstereofacade_numsquareplanarstereo,_wrap_OBStereoFacade_NumSquarePlanarStereo,swig_arginfo_obstereofacade_numsquareplanarstereo)
 SWIG_ZEND_NAMED_FE(obstereofacade_hassquareplanarstereo,_wrap_OBStereoFacade_HasSquarePlanarStereo,swig_arginfo_obstereofacade_hassquareplanarstereo)
 SWIG_ZEND_NAMED_FE(obstereofacade_getsquareplanarstereo,_wrap_OBStereoFacade_GetSquarePlanarStereo,swig_arginfo_obstereofacade_getsquareplanarstereo)
 SWIG_ZEND_NAMED_FE(perceivestereo,_wrap_PerceiveStereo,swig_arginfo_perceivestereo)
 SWIG_ZEND_NAMED_FE(stereofrom2d,_wrap_StereoFrom2D,swig_arginfo_stereofrom2d)
 SWIG_ZEND_NAMED_FE(stereofrom3d,_wrap_StereoFrom3D,swig_arginfo_stereofrom3d)
 SWIG_ZEND_NAMED_FE(stereofrom0d,_wrap_StereoFrom0D,swig_arginfo_stereofrom0d)
 SWIG_ZEND_NAMED_FE(tetrahedralfrom3d,_wrap_TetrahedralFrom3D,swig_arginfo_tetrahedralfrom3d)
 SWIG_ZEND_NAMED_FE(tetrahedralfrom2d,_wrap_TetrahedralFrom2D,swig_arginfo_tetrahedralfrom2d)
 SWIG_ZEND_NAMED_FE(tetrahedralfrom0d,_wrap_TetrahedralFrom0D,swig_arginfo_tetrahedralfrom0d)
 SWIG_ZEND_NAMED_FE(cistransfrom3d,_wrap_CisTransFrom3D,swig_arginfo_cistransfrom3d)
 SWIG_ZEND_NAMED_FE(cistransfrom2d,_wrap_CisTransFrom2D,swig_arginfo_cistransfrom2d)
 SWIG_ZEND_NAMED_FE(tetstereotowedgehash,_wrap_TetStereoToWedgeHash,swig_arginfo_tetstereotowedgehash)
 SWIG_ZEND_NAMED_FE(getunspecifiedcistrans,_wrap_GetUnspecifiedCisTrans,swig_arginfo_getunspecifiedcistrans)
 SWIG_ZEND_NAMED_FE(stereoreftoimplicit,_wrap_StereoRefToImplicit,swig_arginfo_stereoreftoimplicit)
 SWIG_ZEND_NAMED_FE(implicitreftostereo,_wrap_ImplicitRefToStereo,swig_arginfo_implicitreftostereo)
 SWIG_ZEND_NAMED_FE(cistransfrom0d,_wrap_CisTransFrom0D,swig_arginfo_cistransfrom0d)
 SWIG_ZEND_NAMED_FE(findstereogenicunits,_wrap_FindStereogenicUnits,swig_arginfo_findstereogenicunits)
 SWIG_ZEND_NAMED_FE(new_obbitvec,_wrap_new_OBBitVec,swig_arginfo_new_obbitvec)
 SWIG_ZEND_NAMED_FE(obbitvec_setbiton,_wrap_OBBitVec_SetBitOn,swig_arginfo_obbitvec_setbiton)
 SWIG_ZEND_NAMED_FE(obbitvec_setbitoff,_wrap_OBBitVec_SetBitOff,swig_arginfo_obbitvec_setbitoff)
 SWIG_ZEND_NAMED_FE(obbitvec_setrangeon,_wrap_OBBitVec_SetRangeOn,swig_arginfo_obbitvec_setrangeon)
 SWIG_ZEND_NAMED_FE(obbitvec_setrangeoff,_wrap_OBBitVec_SetRangeOff,swig_arginfo_obbitvec_setrangeoff)
 SWIG_ZEND_NAMED_FE(obbitvec_fold,_wrap_OBBitVec_Fold,swig_arginfo_obbitvec_fold)
 SWIG_ZEND_NAMED_FE(obbitvec_firstbit,_wrap_OBBitVec_FirstBit,swig_arginfo_obbitvec_firstbit)
 SWIG_ZEND_NAMED_FE(obbitvec_nextbit,_wrap_OBBitVec_NextBit,swig_arginfo_obbitvec_nextbit)
 SWIG_ZEND_NAMED_FE(obbitvec_endbit,_wrap_OBBitVec_EndBit,swig_arginfo_obbitvec_endbit)
 SWIG_ZEND_NAMED_FE(obbitvec_getsize,_wrap_OBBitVec_GetSize,swig_arginfo_obbitvec_getsize)
 SWIG_ZEND_NAMED_FE(obbitvec_countbits,_wrap_OBBitVec_CountBits,swig_arginfo_obbitvec_countbits)
 SWIG_ZEND_NAMED_FE(obbitvec_c_empty,_wrap_OBBitVec_c_Empty,swig_arginfo_obbitvec_c_empty)
 SWIG_ZEND_NAMED_FE(obbitvec_isempty,_wrap_OBBitVec_IsEmpty,swig_arginfo_obbitvec_isempty)
 SWIG_ZEND_NAMED_FE(obbitvec_resize,_wrap_OBBitVec_Resize,swig_arginfo_obbitvec_resize)
 SWIG_ZEND_NAMED_FE(obbitvec_resizewords,_wrap_OBBitVec_ResizeWords,swig_arginfo_obbitvec_resizewords)
 SWIG_ZEND_NAMED_FE(obbitvec_bitisset,_wrap_OBBitVec_BitIsSet,swig_arginfo_obbitvec_bitisset)
 SWIG_ZEND_NAMED_FE(obbitvec_bitison,_wrap_OBBitVec_BitIsOn,swig_arginfo_obbitvec_bitison)
 SWIG_ZEND_NAMED_FE(obbitvec_fromvecint,_wrap_OBBitVec_FromVecInt,swig_arginfo_obbitvec_fromvecint)
 SWIG_ZEND_NAMED_FE(obbitvec_fromstring,_wrap_OBBitVec_FromString,swig_arginfo_obbitvec_fromstring)
 SWIG_ZEND_NAMED_FE(obbitvec_tovecint,_wrap_OBBitVec_ToVecInt,swig_arginfo_obbitvec_tovecint)
 SWIG_ZEND_NAMED_FE(obbitvec_clear,_wrap_OBBitVec_Clear,swig_arginfo_obbitvec_clear)
 SWIG_ZEND_NAMED_FE(obbitvec_negate,_wrap_OBBitVec_Negate,swig_arginfo_obbitvec_negate)
 SWIG_ZEND_NAMED_FE(obbitvec_getwords,_wrap_OBBitVec_GetWords,swig_arginfo_obbitvec_getwords)
 SWIG_ZEND_NAMED_FE(obbitvec_add,_wrap_OBBitVec_add,swig_arginfo_obbitvec_add)
 SWIG_ZEND_NAMED_FE(tanimoto,_wrap_Tanimoto,swig_arginfo_tanimoto)
 SWIG_ZEND_NAMED_FE(new_obrotorrule,_wrap_new_OBRotorRule,swig_arginfo_new_obrotorrule)
 SWIG_ZEND_NAMED_FE(obrotorrule_isvalid,_wrap_OBRotorRule_IsValid,swig_arginfo_obrotorrule_isvalid)
 SWIG_ZEND_NAMED_FE(obrotorrule_getreferenceatoms,_wrap_OBRotorRule_GetReferenceAtoms,swig_arginfo_obrotorrule_getreferenceatoms)
 SWIG_ZEND_NAMED_FE(obrotorrule_setdelta,_wrap_OBRotorRule_SetDelta,swig_arginfo_obrotorrule_setdelta)
 SWIG_ZEND_NAMED_FE(obrotorrule_getdelta,_wrap_OBRotorRule_GetDelta,swig_arginfo_obrotorrule_getdelta)
 SWIG_ZEND_NAMED_FE(obrotorrule_gettorsionvals,_wrap_OBRotorRule_GetTorsionVals,swig_arginfo_obrotorrule_gettorsionvals)
 SWIG_ZEND_NAMED_FE(obrotorrule_getsmartsstring,_wrap_OBRotorRule_GetSmartsString,swig_arginfo_obrotorrule_getsmartsstring)
 SWIG_ZEND_NAMED_FE(obrotorrule_getsmartspattern,_wrap_OBRotorRule_GetSmartsPattern,swig_arginfo_obrotorrule_getsmartspattern)
 SWIG_ZEND_NAMED_FE(new_obrotorrules,_wrap_new_OBRotorRules,swig_arginfo_new_obrotorrules)
 SWIG_ZEND_NAMED_FE(obrotorrules_setfilename,_wrap_OBRotorRules_SetFilename,swig_arginfo_obrotorrules_setfilename)
 SWIG_ZEND_NAMED_FE(obrotorrules_getrotorincrements,_wrap_OBRotorRules_GetRotorIncrements,swig_arginfo_obrotorrules_getrotorincrements)
 SWIG_ZEND_NAMED_FE(obrotorrules_quiet,_wrap_OBRotorRules_Quiet,swig_arginfo_obrotorrules_quiet)
 SWIG_ZEND_NAMED_FE(new_obrotor,_wrap_new_OBRotor,swig_arginfo_new_obrotor)
 SWIG_ZEND_NAMED_FE(obrotor_setbond,_wrap_OBRotor_SetBond,swig_arginfo_obrotor_setbond)
 SWIG_ZEND_NAMED_FE(obrotor_setrings,_wrap_OBRotor_SetRings,swig_arginfo_obrotor_setrings)
 SWIG_ZEND_NAMED_FE(obrotor_setidx,_wrap_OBRotor_SetIdx,swig_arginfo_obrotor_setidx)
 SWIG_ZEND_NAMED_FE(obrotor_setdihedralatoms,_wrap_OBRotor_SetDihedralAtoms,swig_arginfo_obrotor_setdihedralatoms)
 SWIG_ZEND_NAMED_FE(obrotor_setrotatoms,_wrap_OBRotor_SetRotAtoms,swig_arginfo_obrotor_setrotatoms)
 SWIG_ZEND_NAMED_FE(obrotor_settorsionvalues,_wrap_OBRotor_SetTorsionValues,swig_arginfo_obrotor_settorsionvalues)
 SWIG_ZEND_NAMED_FE(obrotor_setfixedbonds,_wrap_OBRotor_SetFixedBonds,swig_arginfo_obrotor_setfixedbonds)
 SWIG_ZEND_NAMED_FE(obrotor_settoangle,_wrap_OBRotor_SetToAngle,swig_arginfo_obrotor_settoangle)
 SWIG_ZEND_NAMED_FE(obrotor_setrotor,_wrap_OBRotor_SetRotor,swig_arginfo_obrotor_setrotor)
 SWIG_ZEND_NAMED_FE(obrotor_precompute,_wrap_OBRotor_Precompute,swig_arginfo_obrotor_precompute)
 SWIG_ZEND_NAMED_FE(obrotor_precalc,_wrap_OBRotor_Precalc,swig_arginfo_obrotor_precalc)
 SWIG_ZEND_NAMED_FE(obrotor_set,_wrap_OBRotor_Set,swig_arginfo_obrotor_set)
 SWIG_ZEND_NAMED_FE(obrotor_getbond,_wrap_OBRotor_GetBond,swig_arginfo_obrotor_getbond)
 SWIG_ZEND_NAMED_FE(obrotor_size,_wrap_OBRotor_Size,swig_arginfo_obrotor_size)
 SWIG_ZEND_NAMED_FE(obrotor_getidx,_wrap_OBRotor_GetIdx,swig_arginfo_obrotor_getidx)
 SWIG_ZEND_NAMED_FE(obrotor_getdihedralatoms,_wrap_OBRotor_GetDihedralAtoms,swig_arginfo_obrotor_getdihedralatoms)
 SWIG_ZEND_NAMED_FE(obrotor_gettorsionvalues,_wrap_OBRotor_GetTorsionValues,swig_arginfo_obrotor_gettorsionvalues)
 SWIG_ZEND_NAMED_FE(obrotor_getfixedbonds,_wrap_OBRotor_GetFixedBonds,swig_arginfo_obrotor_getfixedbonds)
 SWIG_ZEND_NAMED_FE(obrotor_calctorsion,_wrap_OBRotor_CalcTorsion,swig_arginfo_obrotor_calctorsion)
 SWIG_ZEND_NAMED_FE(obrotor_calcbondlength,_wrap_OBRotor_CalcBondLength,swig_arginfo_obrotor_calcbondlength)
 SWIG_ZEND_NAMED_FE(obrotor_begintorincrement,_wrap_OBRotor_BeginTorIncrement,swig_arginfo_obrotor_begintorincrement)
 SWIG_ZEND_NAMED_FE(obrotor_endtorincrement,_wrap_OBRotor_EndTorIncrement,swig_arginfo_obrotor_endtorincrement)
 SWIG_ZEND_NAMED_FE(obrotor_removesymtorsionvalues,_wrap_OBRotor_RemoveSymTorsionValues,swig_arginfo_obrotor_removesymtorsionvalues)
 SWIG_ZEND_NAMED_FE(obrotor_setdelta,_wrap_OBRotor_SetDelta,swig_arginfo_obrotor_setdelta)
 SWIG_ZEND_NAMED_FE(obrotor_getdelta,_wrap_OBRotor_GetDelta,swig_arginfo_obrotor_getdelta)
 SWIG_ZEND_NAMED_FE(obrotor_getfixedatoms,_wrap_OBRotor_GetFixedAtoms,swig_arginfo_obrotor_getfixedatoms)
 SWIG_ZEND_NAMED_FE(obrotor_setfixedatoms,_wrap_OBRotor_SetFixedAtoms,swig_arginfo_obrotor_setfixedatoms)
 SWIG_ZEND_NAMED_FE(obrotor_getevalatoms,_wrap_OBRotor_GetEvalAtoms,swig_arginfo_obrotor_getevalatoms)
 SWIG_ZEND_NAMED_FE(obrotor_setevalatoms,_wrap_OBRotor_SetEvalAtoms,swig_arginfo_obrotor_setevalatoms)
 SWIG_ZEND_NAMED_FE(obrotor_getrotatoms,_wrap_OBRotor_GetRotAtoms,swig_arginfo_obrotor_getrotatoms)
 SWIG_ZEND_NAMED_FE(obrotor_getresolution,_wrap_OBRotor_GetResolution,swig_arginfo_obrotor_getresolution)
 SWIG_ZEND_NAMED_FE(obrotor_setnumcoords,_wrap_OBRotor_SetNumCoords,swig_arginfo_obrotor_setnumcoords)
 SWIG_ZEND_NAMED_FE(new_obrotorlist,_wrap_new_OBRotorList,swig_arginfo_new_obrotorlist)
 SWIG_ZEND_NAMED_FE(obrotorlist_clear,_wrap_OBRotorList_Clear,swig_arginfo_obrotorlist_clear)
 SWIG_ZEND_NAMED_FE(obrotorlist_size,_wrap_OBRotorList_Size,swig_arginfo_obrotorlist_size)
 SWIG_ZEND_NAMED_FE(obrotorlist_isfixedbond,_wrap_OBRotorList_IsFixedBond,swig_arginfo_obrotorlist_isfixedbond)
 SWIG_ZEND_NAMED_FE(obrotorlist_hasfixedbonds,_wrap_OBRotorList_HasFixedBonds,swig_arginfo_obrotorlist_hasfixedbonds)
 SWIG_ZEND_NAMED_FE(obrotorlist_removesymvals,_wrap_OBRotorList_RemoveSymVals,swig_arginfo_obrotorlist_removesymvals)
 SWIG_ZEND_NAMED_FE(obrotorlist_hasringrotors,_wrap_OBRotorList_HasRingRotors,swig_arginfo_obrotorlist_hasringrotors)
 SWIG_ZEND_NAMED_FE(obrotorlist_setup,_wrap_OBRotorList_Setup,swig_arginfo_obrotorlist_setup)
 SWIG_ZEND_NAMED_FE(obrotorlist_setfixedbonds,_wrap_OBRotorList_SetFixedBonds,swig_arginfo_obrotorlist_setfixedbonds)
 SWIG_ZEND_NAMED_FE(obrotorlist_init,_wrap_OBRotorList_Init,swig_arginfo_obrotorlist_init)
 SWIG_ZEND_NAMED_FE(obrotorlist_setquiet,_wrap_OBRotorList_SetQuiet,swig_arginfo_obrotorlist_setquiet)
 SWIG_ZEND_NAMED_FE(obrotorlist_setrotatoms,_wrap_OBRotorList_SetRotAtoms,swig_arginfo_obrotorlist_setrotatoms)
 SWIG_ZEND_NAMED_FE(obrotorlist_findrotors,_wrap_OBRotorList_FindRotors,swig_arginfo_obrotorlist_findrotors)
 SWIG_ZEND_NAMED_FE(obrotorlist_setevalatoms,_wrap_OBRotorList_SetEvalAtoms,swig_arginfo_obrotorlist_setevalatoms)
 SWIG_ZEND_NAMED_FE(obrotorlist_assigntorvals,_wrap_OBRotorList_AssignTorVals,swig_arginfo_obrotorlist_assigntorvals)
 SWIG_ZEND_NAMED_FE(obrotorlist_beginrotor,_wrap_OBRotorList_BeginRotor,swig_arginfo_obrotorlist_beginrotor)
 SWIG_ZEND_NAMED_FE(obrotorlist_nextrotor,_wrap_OBRotorList_NextRotor,swig_arginfo_obrotorlist_nextrotor)
 SWIG_ZEND_NAMED_FE(obrotorlist_beginrotors,_wrap_OBRotorList_BeginRotors,swig_arginfo_obrotorlist_beginrotors)
 SWIG_ZEND_NAMED_FE(obrotorlist_endrotors,_wrap_OBRotorList_EndRotors,swig_arginfo_obrotorlist_endrotors)
 SWIG_ZEND_NAMED_FE(obrotorlist_identifyevalatoms,_wrap_OBRotorList_IdentifyEvalAtoms,swig_arginfo_obrotorlist_identifyevalatoms)
 SWIG_ZEND_NAMED_FE(obrotorlist_setfixatoms,_wrap_OBRotorList_SetFixAtoms,swig_arginfo_obrotorlist_setfixatoms)
 SWIG_ZEND_NAMED_FE(obrotorlist_hasfixedatoms,_wrap_OBRotorList_HasFixedAtoms,swig_arginfo_obrotorlist_hasfixedatoms)
 SWIG_ZEND_NAMED_FE(obrotorlist_ignoresymmetryremoval,_wrap_OBRotorList_IgnoreSymmetryRemoval,swig_arginfo_obrotorlist_ignoresymmetryremoval)
 SWIG_ZEND_NAMED_FE(obrotorlist_setrotatomsbyfix,_wrap_OBRotorList_SetRotAtomsByFix,swig_arginfo_obrotorlist_setrotatomsbyfix)
 SWIG_ZEND_NAMED_FE(new_rotor_digit,_wrap_new_rotor_digit,swig_arginfo_new_rotor_digit)
 SWIG_ZEND_NAMED_FE(rotor_digit_set_size,_wrap_rotor_digit_set_size,swig_arginfo_rotor_digit_set_size)
 SWIG_ZEND_NAMED_FE(rotor_digit_set_state,_wrap_rotor_digit_set_state,swig_arginfo_rotor_digit_set_state)
 SWIG_ZEND_NAMED_FE(rotor_digit_get_state,_wrap_rotor_digit_get_state,swig_arginfo_rotor_digit_get_state)
 SWIG_ZEND_NAMED_FE(rotor_digit_size,_wrap_rotor_digit_size,swig_arginfo_rotor_digit_size)
 SWIG_ZEND_NAMED_FE(rotor_digit_next,_wrap_rotor_digit_next,swig_arginfo_rotor_digit_next)
 SWIG_ZEND_NAMED_FE(new_obrotorkeys,_wrap_new_OBRotorKeys,swig_arginfo_new_obrotorkeys)
 SWIG_ZEND_NAMED_FE(obrotorkeys_clear,_wrap_OBRotorKeys_Clear,swig_arginfo_obrotorkeys_clear)
 SWIG_ZEND_NAMED_FE(obrotorkeys_numkeys,_wrap_OBRotorKeys_NumKeys,swig_arginfo_obrotorkeys_numkeys)
 SWIG_ZEND_NAMED_FE(obrotorkeys_addrotor,_wrap_OBRotorKeys_AddRotor,swig_arginfo_obrotorkeys_addrotor)
 SWIG_ZEND_NAMED_FE(obrotorkeys_next,_wrap_OBRotorKeys_Next,swig_arginfo_obrotorkeys_next)
 SWIG_ZEND_NAMED_FE(obrotorkeys_getkey,_wrap_OBRotorKeys_GetKey,swig_arginfo_obrotorkeys_getkey)
 SWIG_ZEND_NAMED_FE(new_obrotamerlist,_wrap_new_OBRotamerList,swig_arginfo_new_obrotamerlist)
 SWIG_ZEND_NAMED_FE(obrotamerlist_setup,_wrap_OBRotamerList_Setup,swig_arginfo_obrotamerlist_setup)
 SWIG_ZEND_NAMED_FE(obrotamerlist_numrotors,_wrap_OBRotamerList_NumRotors,swig_arginfo_obrotamerlist_numrotors)
 SWIG_ZEND_NAMED_FE(obrotamerlist_numrotamers,_wrap_OBRotamerList_NumRotamers,swig_arginfo_obrotamerlist_numrotamers)
 SWIG_ZEND_NAMED_FE(obrotamerlist_addrotamer,_wrap_OBRotamerList_AddRotamer,swig_arginfo_obrotamerlist_addrotamer)
 SWIG_ZEND_NAMED_FE(obrotamerlist_addrotamers,_wrap_OBRotamerList_AddRotamers,swig_arginfo_obrotamerlist_addrotamers)
 SWIG_ZEND_NAMED_FE(obrotamerlist_getreferencearray,_wrap_OBRotamerList_GetReferenceArray,swig_arginfo_obrotamerlist_getreferencearray)
 SWIG_ZEND_NAMED_FE(obrotamerlist_beginrotamer,_wrap_OBRotamerList_BeginRotamer,swig_arginfo_obrotamerlist_beginrotamer)
 SWIG_ZEND_NAMED_FE(obrotamerlist_endrotamer,_wrap_OBRotamerList_EndRotamer,swig_arginfo_obrotamerlist_endrotamer)
 SWIG_ZEND_NAMED_FE(obrotamerlist_createconformerlist,_wrap_OBRotamerList_CreateConformerList,swig_arginfo_obrotamerlist_createconformerlist)
 SWIG_ZEND_NAMED_FE(obrotamerlist_expandconformerlist,_wrap_OBRotamerList_ExpandConformerList,swig_arginfo_obrotamerlist_expandconformerlist)
 SWIG_ZEND_NAMED_FE(obrotamerlist_setcurrentcoordinates,_wrap_OBRotamerList_SetCurrentCoordinates,swig_arginfo_obrotamerlist_setcurrentcoordinates)
 SWIG_ZEND_NAMED_FE(obrotamerlist_setbasecoordinatesets,_wrap_OBRotamerList_SetBaseCoordinateSets,swig_arginfo_obrotamerlist_setbasecoordinatesets)
 SWIG_ZEND_NAMED_FE(obrotamerlist_numbasecoordinatesets,_wrap_OBRotamerList_NumBaseCoordinateSets,swig_arginfo_obrotamerlist_numbasecoordinatesets)
 SWIG_ZEND_NAMED_FE(obrotamerlist_getbasecoordinateset,_wrap_OBRotamerList_GetBaseCoordinateSet,swig_arginfo_obrotamerlist_getbasecoordinateset)
 SWIG_ZEND_NAMED_FE(obrotamerlist_numatoms,_wrap_OBRotamerList_NumAtoms,swig_arginfo_obrotamerlist_numatoms)
 SWIG_ZEND_NAMED_FE(new_obspectrophore,_wrap_new_OBSpectrophore,swig_arginfo_new_obspectrophore)
 SWIG_ZEND_NAMED_FE(obspectrophore_setresolution,_wrap_OBSpectrophore_SetResolution,swig_arginfo_obspectrophore_setresolution)
 SWIG_ZEND_NAMED_FE(obspectrophore_setaccuracy,_wrap_OBSpectrophore_SetAccuracy,swig_arginfo_obspectrophore_setaccuracy)
 SWIG_ZEND_NAMED_FE(obspectrophore_setstereo,_wrap_OBSpectrophore_SetStereo,swig_arginfo_obspectrophore_setstereo)
 SWIG_ZEND_NAMED_FE(obspectrophore_setnormalization,_wrap_OBSpectrophore_SetNormalization,swig_arginfo_obspectrophore_setnormalization)
 SWIG_ZEND_NAMED_FE(obspectrophore_getaccuracy,_wrap_OBSpectrophore_GetAccuracy,swig_arginfo_obspectrophore_getaccuracy)
 SWIG_ZEND_NAMED_FE(obspectrophore_getresolution,_wrap_OBSpectrophore_GetResolution,swig_arginfo_obspectrophore_getresolution)
 SWIG_ZEND_NAMED_FE(obspectrophore_getstereo,_wrap_OBSpectrophore_GetStereo,swig_arginfo_obspectrophore_getstereo)
 SWIG_ZEND_NAMED_FE(obspectrophore_getnormalization,_wrap_OBSpectrophore_GetNormalization,swig_arginfo_obspectrophore_getnormalization)
 SWIG_ZEND_NAMED_FE(obspectrophore_getspectrophore,_wrap_OBSpectrophore_GetSpectrophore,swig_arginfo_obspectrophore_getspectrophore)
 SWIG_ZEND_NAMED_FE(new_obmolatomiter,_wrap_new_OBMolAtomIter,swig_arginfo_new_obmolatomiter)
 SWIG_ZEND_NAMED_FE(obmolatomiter___deref__,_wrap_OBMolAtomIter___deref__,swig_arginfo_obmolatomiter___deref__)
 SWIG_ZEND_NAMED_FE(obmolatomiter___ref__,_wrap_OBMolAtomIter___ref__,swig_arginfo_obmolatomiter___ref__)
 SWIG_ZEND_NAMED_FE(obmolatomiter_visit_set,_wrap_OBMolAtomIter_Visit_set,swig_arginfo_obmolatomiter_visit_set)
 SWIG_ZEND_NAMED_FE(obmolatomiter_visit_get,_wrap_OBMolAtomIter_Visit_get,swig_arginfo_obmolatomiter_visit_get)
 SWIG_ZEND_NAMED_FE(obmolatomiter_duplicate,_wrap_OBMolAtomIter_Duplicate,swig_arginfo_obmolatomiter_duplicate)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setidx,_wrap_OBMolAtomIter_SetIdx,swig_arginfo_obmolatomiter_setidx)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setid,_wrap_OBMolAtomIter_SetId,swig_arginfo_obmolatomiter_setid)
 SWIG_ZEND_NAMED_FE(obmolatomiter_sethyb,_wrap_OBMolAtomIter_SetHyb,swig_arginfo_obmolatomiter_sethyb)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setatomicnum,_wrap_OBMolAtomIter_SetAtomicNum,swig_arginfo_obmolatomiter_setatomicnum)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setisotope,_wrap_OBMolAtomIter_SetIsotope,swig_arginfo_obmolatomiter_setisotope)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setimplicitvalence,_wrap_OBMolAtomIter_SetImplicitValence,swig_arginfo_obmolatomiter_setimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatomiter_incrementimplicitvalence,_wrap_OBMolAtomIter_IncrementImplicitValence,swig_arginfo_obmolatomiter_incrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatomiter_decrementimplicitvalence,_wrap_OBMolAtomIter_DecrementImplicitValence,swig_arginfo_obmolatomiter_decrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setformalcharge,_wrap_OBMolAtomIter_SetFormalCharge,swig_arginfo_obmolatomiter_setformalcharge)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setspinmultiplicity,_wrap_OBMolAtomIter_SetSpinMultiplicity,swig_arginfo_obmolatomiter_setspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmolatomiter_settype,_wrap_OBMolAtomIter_SetType,swig_arginfo_obmolatomiter_settype)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setpartialcharge,_wrap_OBMolAtomIter_SetPartialCharge,swig_arginfo_obmolatomiter_setpartialcharge)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setvector,_wrap_OBMolAtomIter_SetVector,swig_arginfo_obmolatomiter_setvector)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setcoordptr,_wrap_OBMolAtomIter_SetCoordPtr,swig_arginfo_obmolatomiter_setcoordptr)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setresidue,_wrap_OBMolAtomIter_SetResidue,swig_arginfo_obmolatomiter_setresidue)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setparent,_wrap_OBMolAtomIter_SetParent,swig_arginfo_obmolatomiter_setparent)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setaromatic,_wrap_OBMolAtomIter_SetAromatic,swig_arginfo_obmolatomiter_setaromatic)
 SWIG_ZEND_NAMED_FE(obmolatomiter_unsetaromatic,_wrap_OBMolAtomIter_UnsetAromatic,swig_arginfo_obmolatomiter_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setclockwisestereo,_wrap_OBMolAtomIter_SetClockwiseStereo,swig_arginfo_obmolatomiter_setclockwisestereo)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setanticlockwisestereo,_wrap_OBMolAtomIter_SetAntiClockwiseStereo,swig_arginfo_obmolatomiter_setanticlockwisestereo)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setpositivestereo,_wrap_OBMolAtomIter_SetPositiveStereo,swig_arginfo_obmolatomiter_setpositivestereo)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setnegativestereo,_wrap_OBMolAtomIter_SetNegativeStereo,swig_arginfo_obmolatomiter_setnegativestereo)
 SWIG_ZEND_NAMED_FE(obmolatomiter_unsetstereo,_wrap_OBMolAtomIter_UnsetStereo,swig_arginfo_obmolatomiter_unsetstereo)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setinring,_wrap_OBMolAtomIter_SetInRing,swig_arginfo_obmolatomiter_setinring)
 SWIG_ZEND_NAMED_FE(obmolatomiter_setchiral,_wrap_OBMolAtomIter_SetChiral,swig_arginfo_obmolatomiter_setchiral)
 SWIG_ZEND_NAMED_FE(obmolatomiter_clearcoordptr,_wrap_OBMolAtomIter_ClearCoordPtr,swig_arginfo_obmolatomiter_clearcoordptr)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getformalcharge,_wrap_OBMolAtomIter_GetFormalCharge,swig_arginfo_obmolatomiter_getformalcharge)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getatomicnum,_wrap_OBMolAtomIter_GetAtomicNum,swig_arginfo_obmolatomiter_getatomicnum)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getisotope,_wrap_OBMolAtomIter_GetIsotope,swig_arginfo_obmolatomiter_getisotope)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getspinmultiplicity,_wrap_OBMolAtomIter_GetSpinMultiplicity,swig_arginfo_obmolatomiter_getspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getatomicmass,_wrap_OBMolAtomIter_GetAtomicMass,swig_arginfo_obmolatomiter_getatomicmass)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getexactmass,_wrap_OBMolAtomIter_GetExactMass,swig_arginfo_obmolatomiter_getexactmass)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getidx,_wrap_OBMolAtomIter_GetIdx,swig_arginfo_obmolatomiter_getidx)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getindex,_wrap_OBMolAtomIter_GetIndex,swig_arginfo_obmolatomiter_getindex)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getid,_wrap_OBMolAtomIter_GetId,swig_arginfo_obmolatomiter_getid)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getcoordinateidx,_wrap_OBMolAtomIter_GetCoordinateIdx,swig_arginfo_obmolatomiter_getcoordinateidx)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getcidx,_wrap_OBMolAtomIter_GetCIdx,swig_arginfo_obmolatomiter_getcidx)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getvalence,_wrap_OBMolAtomIter_GetValence,swig_arginfo_obmolatomiter_getvalence)
 SWIG_ZEND_NAMED_FE(obmolatomiter_gethyb,_wrap_OBMolAtomIter_GetHyb,swig_arginfo_obmolatomiter_gethyb)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getimplicitvalence,_wrap_OBMolAtomIter_GetImplicitValence,swig_arginfo_obmolatomiter_getimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatomiter_gethvyvalence,_wrap_OBMolAtomIter_GetHvyValence,swig_arginfo_obmolatomiter_gethvyvalence)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getheterovalence,_wrap_OBMolAtomIter_GetHeteroValence,swig_arginfo_obmolatomiter_getheterovalence)
 SWIG_ZEND_NAMED_FE(obmolatomiter_gettype,_wrap_OBMolAtomIter_GetType,swig_arginfo_obmolatomiter_gettype)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getx,_wrap_OBMolAtomIter_GetX,swig_arginfo_obmolatomiter_getx)
 SWIG_ZEND_NAMED_FE(obmolatomiter_gety,_wrap_OBMolAtomIter_GetY,swig_arginfo_obmolatomiter_gety)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getz,_wrap_OBMolAtomIter_GetZ,swig_arginfo_obmolatomiter_getz)
 SWIG_ZEND_NAMED_FE(obmolatomiter_x,_wrap_OBMolAtomIter_x,swig_arginfo_obmolatomiter_x)
 SWIG_ZEND_NAMED_FE(obmolatomiter_y,_wrap_OBMolAtomIter_y,swig_arginfo_obmolatomiter_y)
 SWIG_ZEND_NAMED_FE(obmolatomiter_z,_wrap_OBMolAtomIter_z,swig_arginfo_obmolatomiter_z)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getcoordinate,_wrap_OBMolAtomIter_GetCoordinate,swig_arginfo_obmolatomiter_getcoordinate)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getvector,_wrap_OBMolAtomIter_GetVector,swig_arginfo_obmolatomiter_getvector)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getpartialcharge,_wrap_OBMolAtomIter_GetPartialCharge,swig_arginfo_obmolatomiter_getpartialcharge)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getresidue,_wrap_OBMolAtomIter_GetResidue,swig_arginfo_obmolatomiter_getresidue)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getparent,_wrap_OBMolAtomIter_GetParent,swig_arginfo_obmolatomiter_getparent)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getnewbondvector,_wrap_OBMolAtomIter_GetNewBondVector,swig_arginfo_obmolatomiter_getnewbondvector)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getbond,_wrap_OBMolAtomIter_GetBond,swig_arginfo_obmolatomiter_getbond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getnextatom,_wrap_OBMolAtomIter_GetNextAtom,swig_arginfo_obmolatomiter_getnextatom)
 SWIG_ZEND_NAMED_FE(obmolatomiter_beginbonds,_wrap_OBMolAtomIter_BeginBonds,swig_arginfo_obmolatomiter_beginbonds)
 SWIG_ZEND_NAMED_FE(obmolatomiter_endbonds,_wrap_OBMolAtomIter_EndBonds,swig_arginfo_obmolatomiter_endbonds)
 SWIG_ZEND_NAMED_FE(obmolatomiter_beginbond,_wrap_OBMolAtomIter_BeginBond,swig_arginfo_obmolatomiter_beginbond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_nextbond,_wrap_OBMolAtomIter_NextBond,swig_arginfo_obmolatomiter_nextbond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_beginnbratom,_wrap_OBMolAtomIter_BeginNbrAtom,swig_arginfo_obmolatomiter_beginnbratom)
 SWIG_ZEND_NAMED_FE(obmolatomiter_nextnbratom,_wrap_OBMolAtomIter_NextNbrAtom,swig_arginfo_obmolatomiter_nextnbratom)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getdistance,_wrap_OBMolAtomIter_GetDistance,swig_arginfo_obmolatomiter_getdistance)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getangle,_wrap_OBMolAtomIter_GetAngle,swig_arginfo_obmolatomiter_getangle)
 SWIG_ZEND_NAMED_FE(obmolatomiter_newresidue,_wrap_OBMolAtomIter_NewResidue,swig_arginfo_obmolatomiter_newresidue)
 SWIG_ZEND_NAMED_FE(obmolatomiter_addresidue,_wrap_OBMolAtomIter_AddResidue,swig_arginfo_obmolatomiter_addresidue)
 SWIG_ZEND_NAMED_FE(obmolatomiter_deleteresidue,_wrap_OBMolAtomIter_DeleteResidue,swig_arginfo_obmolatomiter_deleteresidue)
 SWIG_ZEND_NAMED_FE(obmolatomiter_addbond,_wrap_OBMolAtomIter_AddBond,swig_arginfo_obmolatomiter_addbond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_insertbond,_wrap_OBMolAtomIter_InsertBond,swig_arginfo_obmolatomiter_insertbond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_deletebond,_wrap_OBMolAtomIter_DeleteBond,swig_arginfo_obmolatomiter_deletebond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_clearbond,_wrap_OBMolAtomIter_ClearBond,swig_arginfo_obmolatomiter_clearbond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_htomethyl,_wrap_OBMolAtomIter_HtoMethyl,swig_arginfo_obmolatomiter_htomethyl)
 SWIG_ZEND_NAMED_FE(obmolatomiter_sethybandgeom,_wrap_OBMolAtomIter_SetHybAndGeom,swig_arginfo_obmolatomiter_sethybandgeom)
 SWIG_ZEND_NAMED_FE(obmolatomiter_forcenoh,_wrap_OBMolAtomIter_ForceNoH,swig_arginfo_obmolatomiter_forcenoh)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasnohforced,_wrap_OBMolAtomIter_HasNoHForced,swig_arginfo_obmolatomiter_hasnohforced)
 SWIG_ZEND_NAMED_FE(obmolatomiter_forceimplh,_wrap_OBMolAtomIter_ForceImplH,swig_arginfo_obmolatomiter_forceimplh)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasimplhforced,_wrap_OBMolAtomIter_HasImplHForced,swig_arginfo_obmolatomiter_hasimplhforced)
 SWIG_ZEND_NAMED_FE(obmolatomiter_countfreeoxygens,_wrap_OBMolAtomIter_CountFreeOxygens,swig_arginfo_obmolatomiter_countfreeoxygens)
 SWIG_ZEND_NAMED_FE(obmolatomiter_countfreesulfurs,_wrap_OBMolAtomIter_CountFreeSulfurs,swig_arginfo_obmolatomiter_countfreesulfurs)
 SWIG_ZEND_NAMED_FE(obmolatomiter_implicithydrogencount,_wrap_OBMolAtomIter_ImplicitHydrogenCount,swig_arginfo_obmolatomiter_implicithydrogencount)
 SWIG_ZEND_NAMED_FE(obmolatomiter_explicithydrogencount,_wrap_OBMolAtomIter_ExplicitHydrogenCount,swig_arginfo_obmolatomiter_explicithydrogencount)
 SWIG_ZEND_NAMED_FE(obmolatomiter_memberofringcount,_wrap_OBMolAtomIter_MemberOfRingCount,swig_arginfo_obmolatomiter_memberofringcount)
 SWIG_ZEND_NAMED_FE(obmolatomiter_memberofringsize,_wrap_OBMolAtomIter_MemberOfRingSize,swig_arginfo_obmolatomiter_memberofringsize)
 SWIG_ZEND_NAMED_FE(obmolatomiter_countringbonds,_wrap_OBMolAtomIter_CountRingBonds,swig_arginfo_obmolatomiter_countringbonds)
 SWIG_ZEND_NAMED_FE(obmolatomiter_smallestbondangle,_wrap_OBMolAtomIter_SmallestBondAngle,swig_arginfo_obmolatomiter_smallestbondangle)
 SWIG_ZEND_NAMED_FE(obmolatomiter_averagebondangle,_wrap_OBMolAtomIter_AverageBondAngle,swig_arginfo_obmolatomiter_averagebondangle)
 SWIG_ZEND_NAMED_FE(obmolatomiter_bosum,_wrap_OBMolAtomIter_BOSum,swig_arginfo_obmolatomiter_bosum)
 SWIG_ZEND_NAMED_FE(obmolatomiter_kbosum,_wrap_OBMolAtomIter_KBOSum,swig_arginfo_obmolatomiter_kbosum)
 SWIG_ZEND_NAMED_FE(obmolatomiter_lewisacidbasecounts,_wrap_OBMolAtomIter_LewisAcidBaseCounts,swig_arginfo_obmolatomiter_lewisacidbasecounts)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasresidue,_wrap_OBMolAtomIter_HasResidue,swig_arginfo_obmolatomiter_hasresidue)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ishetatom,_wrap_OBMolAtomIter_IsHetAtom,swig_arginfo_obmolatomiter_ishetatom)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ishydrogen,_wrap_OBMolAtomIter_IsHydrogen,swig_arginfo_obmolatomiter_ishydrogen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_iscarbon,_wrap_OBMolAtomIter_IsCarbon,swig_arginfo_obmolatomiter_iscarbon)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isnitrogen,_wrap_OBMolAtomIter_IsNitrogen,swig_arginfo_obmolatomiter_isnitrogen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isoxygen,_wrap_OBMolAtomIter_IsOxygen,swig_arginfo_obmolatomiter_isoxygen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_issulfur,_wrap_OBMolAtomIter_IsSulfur,swig_arginfo_obmolatomiter_issulfur)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isphosphorus,_wrap_OBMolAtomIter_IsPhosphorus,swig_arginfo_obmolatomiter_isphosphorus)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isaromatic,_wrap_OBMolAtomIter_IsAromatic,swig_arginfo_obmolatomiter_isaromatic)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isinring,_wrap_OBMolAtomIter_IsInRing,swig_arginfo_obmolatomiter_isinring)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isinringsize,_wrap_OBMolAtomIter_IsInRingSize,swig_arginfo_obmolatomiter_isinringsize)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isheteroatom,_wrap_OBMolAtomIter_IsHeteroatom,swig_arginfo_obmolatomiter_isheteroatom)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isnotcorh,_wrap_OBMolAtomIter_IsNotCorH,swig_arginfo_obmolatomiter_isnotcorh)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isconnected,_wrap_OBMolAtomIter_IsConnected,swig_arginfo_obmolatomiter_isconnected)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isonethree,_wrap_OBMolAtomIter_IsOneThree,swig_arginfo_obmolatomiter_isonethree)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isonefour,_wrap_OBMolAtomIter_IsOneFour,swig_arginfo_obmolatomiter_isonefour)
 SWIG_ZEND_NAMED_FE(obmolatomiter_iscarboxyloxygen,_wrap_OBMolAtomIter_IsCarboxylOxygen,swig_arginfo_obmolatomiter_iscarboxyloxygen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isphosphateoxygen,_wrap_OBMolAtomIter_IsPhosphateOxygen,swig_arginfo_obmolatomiter_isphosphateoxygen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_issulfateoxygen,_wrap_OBMolAtomIter_IsSulfateOxygen,swig_arginfo_obmolatomiter_issulfateoxygen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isnitrooxygen,_wrap_OBMolAtomIter_IsNitroOxygen,swig_arginfo_obmolatomiter_isnitrooxygen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isamidenitrogen,_wrap_OBMolAtomIter_IsAmideNitrogen,swig_arginfo_obmolatomiter_isamidenitrogen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ispolarhydrogen,_wrap_OBMolAtomIter_IsPolarHydrogen,swig_arginfo_obmolatomiter_ispolarhydrogen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isnonpolarhydrogen,_wrap_OBMolAtomIter_IsNonPolarHydrogen,swig_arginfo_obmolatomiter_isnonpolarhydrogen)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isaromaticnoxide,_wrap_OBMolAtomIter_IsAromaticNOxide,swig_arginfo_obmolatomiter_isaromaticnoxide)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ischiral,_wrap_OBMolAtomIter_IsChiral,swig_arginfo_obmolatomiter_ischiral)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isaxial,_wrap_OBMolAtomIter_IsAxial,swig_arginfo_obmolatomiter_isaxial)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isclockwise,_wrap_OBMolAtomIter_IsClockwise,swig_arginfo_obmolatomiter_isclockwise)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isanticlockwise,_wrap_OBMolAtomIter_IsAntiClockwise,swig_arginfo_obmolatomiter_isanticlockwise)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ispositivestereo,_wrap_OBMolAtomIter_IsPositiveStereo,swig_arginfo_obmolatomiter_ispositivestereo)
 SWIG_ZEND_NAMED_FE(obmolatomiter_isnegativestereo,_wrap_OBMolAtomIter_IsNegativeStereo,swig_arginfo_obmolatomiter_isnegativestereo)
 SWIG_ZEND_NAMED_FE(obmolatomiter_haschiralityspecified,_wrap_OBMolAtomIter_HasChiralitySpecified,swig_arginfo_obmolatomiter_haschiralityspecified)
 SWIG_ZEND_NAMED_FE(obmolatomiter_haschiralvolume,_wrap_OBMolAtomIter_HasChiralVolume,swig_arginfo_obmolatomiter_haschiralvolume)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ishbondacceptor,_wrap_OBMolAtomIter_IsHbondAcceptor,swig_arginfo_obmolatomiter_ishbondacceptor)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ishbondacceptorsimple,_wrap_OBMolAtomIter_IsHbondAcceptorSimple,swig_arginfo_obmolatomiter_ishbondacceptorsimple)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ishbonddonor,_wrap_OBMolAtomIter_IsHbondDonor,swig_arginfo_obmolatomiter_ishbonddonor)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ishbonddonorh,_wrap_OBMolAtomIter_IsHbondDonorH,swig_arginfo_obmolatomiter_ishbonddonorh)
 SWIG_ZEND_NAMED_FE(obmolatomiter_ismetal,_wrap_OBMolAtomIter_IsMetal,swig_arginfo_obmolatomiter_ismetal)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasalphabetaunsat,_wrap_OBMolAtomIter_HasAlphaBetaUnsat,swig_arginfo_obmolatomiter_hasalphabetaunsat)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasbondoforder,_wrap_OBMolAtomIter_HasBondOfOrder,swig_arginfo_obmolatomiter_hasbondoforder)
 SWIG_ZEND_NAMED_FE(obmolatomiter_countbondsoforder,_wrap_OBMolAtomIter_CountBondsOfOrder,swig_arginfo_obmolatomiter_countbondsoforder)
 SWIG_ZEND_NAMED_FE(obmolatomiter_highestbondorder,_wrap_OBMolAtomIter_HighestBondOrder,swig_arginfo_obmolatomiter_highestbondorder)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasnonsinglebond,_wrap_OBMolAtomIter_HasNonSingleBond,swig_arginfo_obmolatomiter_hasnonsinglebond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hassinglebond,_wrap_OBMolAtomIter_HasSingleBond,swig_arginfo_obmolatomiter_hassinglebond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasdoublebond,_wrap_OBMolAtomIter_HasDoubleBond,swig_arginfo_obmolatomiter_hasdoublebond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasaromaticbond,_wrap_OBMolAtomIter_HasAromaticBond,swig_arginfo_obmolatomiter_hasaromaticbond)
 SWIG_ZEND_NAMED_FE(obmolatomiter_matchessmarts,_wrap_OBMolAtomIter_MatchesSMARTS,swig_arginfo_obmolatomiter_matchessmarts)
 SWIG_ZEND_NAMED_FE(obmolatomiter_clear,_wrap_OBMolAtomIter_Clear,swig_arginfo_obmolatomiter_clear)
 SWIG_ZEND_NAMED_FE(obmolatomiter_dotransformations,_wrap_OBMolAtomIter_DoTransformations,swig_arginfo_obmolatomiter_dotransformations)
 SWIG_ZEND_NAMED_FE(obmolatomiter_classdescription,_wrap_OBMolAtomIter_ClassDescription,swig_arginfo_obmolatomiter_classdescription)
 SWIG_ZEND_NAMED_FE(obmolatomiter_gettitle,_wrap_OBMolAtomIter_GetTitle,swig_arginfo_obmolatomiter_gettitle)
 SWIG_ZEND_NAMED_FE(obmolatomiter_settitle,_wrap_OBMolAtomIter_SetTitle,swig_arginfo_obmolatomiter_settitle)
 SWIG_ZEND_NAMED_FE(obmolatomiter_hasdata,_wrap_OBMolAtomIter_HasData,swig_arginfo_obmolatomiter_hasdata)
 SWIG_ZEND_NAMED_FE(obmolatomiter_deletedata,_wrap_OBMolAtomIter_DeleteData,swig_arginfo_obmolatomiter_deletedata)
 SWIG_ZEND_NAMED_FE(obmolatomiter_clonedata,_wrap_OBMolAtomIter_CloneData,swig_arginfo_obmolatomiter_clonedata)
 SWIG_ZEND_NAMED_FE(obmolatomiter_datasize,_wrap_OBMolAtomIter_DataSize,swig_arginfo_obmolatomiter_datasize)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getdata,_wrap_OBMolAtomIter_GetData,swig_arginfo_obmolatomiter_getdata)
 SWIG_ZEND_NAMED_FE(obmolatomiter_getalldata,_wrap_OBMolAtomIter_GetAllData,swig_arginfo_obmolatomiter_getalldata)
 SWIG_ZEND_NAMED_FE(obmolatomiter_begindata,_wrap_OBMolAtomIter_BeginData,swig_arginfo_obmolatomiter_begindata)
 SWIG_ZEND_NAMED_FE(obmolatomiter_enddata,_wrap_OBMolAtomIter_EndData,swig_arginfo_obmolatomiter_enddata)
 SWIG_ZEND_NAMED_FE(new_obmolatomdfsiter,_wrap_new_OBMolAtomDFSIter,swig_arginfo_new_obmolatomdfsiter)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter___deref__,_wrap_OBMolAtomDFSIter___deref__,swig_arginfo_obmolatomdfsiter___deref__)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter___ref__,_wrap_OBMolAtomDFSIter___ref__,swig_arginfo_obmolatomdfsiter___ref__)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_next,_wrap_OBMolAtomDFSIter_next,swig_arginfo_obmolatomdfsiter_next)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_visit_set,_wrap_OBMolAtomDFSIter_Visit_set,swig_arginfo_obmolatomdfsiter_visit_set)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_visit_get,_wrap_OBMolAtomDFSIter_Visit_get,swig_arginfo_obmolatomdfsiter_visit_get)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_duplicate,_wrap_OBMolAtomDFSIter_Duplicate,swig_arginfo_obmolatomdfsiter_duplicate)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setidx,_wrap_OBMolAtomDFSIter_SetIdx,swig_arginfo_obmolatomdfsiter_setidx)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setid,_wrap_OBMolAtomDFSIter_SetId,swig_arginfo_obmolatomdfsiter_setid)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_sethyb,_wrap_OBMolAtomDFSIter_SetHyb,swig_arginfo_obmolatomdfsiter_sethyb)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setatomicnum,_wrap_OBMolAtomDFSIter_SetAtomicNum,swig_arginfo_obmolatomdfsiter_setatomicnum)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setisotope,_wrap_OBMolAtomDFSIter_SetIsotope,swig_arginfo_obmolatomdfsiter_setisotope)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setimplicitvalence,_wrap_OBMolAtomDFSIter_SetImplicitValence,swig_arginfo_obmolatomdfsiter_setimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_incrementimplicitvalence,_wrap_OBMolAtomDFSIter_IncrementImplicitValence,swig_arginfo_obmolatomdfsiter_incrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_decrementimplicitvalence,_wrap_OBMolAtomDFSIter_DecrementImplicitValence,swig_arginfo_obmolatomdfsiter_decrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setformalcharge,_wrap_OBMolAtomDFSIter_SetFormalCharge,swig_arginfo_obmolatomdfsiter_setformalcharge)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setspinmultiplicity,_wrap_OBMolAtomDFSIter_SetSpinMultiplicity,swig_arginfo_obmolatomdfsiter_setspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_settype,_wrap_OBMolAtomDFSIter_SetType,swig_arginfo_obmolatomdfsiter_settype)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setpartialcharge,_wrap_OBMolAtomDFSIter_SetPartialCharge,swig_arginfo_obmolatomdfsiter_setpartialcharge)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setvector,_wrap_OBMolAtomDFSIter_SetVector,swig_arginfo_obmolatomdfsiter_setvector)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setcoordptr,_wrap_OBMolAtomDFSIter_SetCoordPtr,swig_arginfo_obmolatomdfsiter_setcoordptr)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setresidue,_wrap_OBMolAtomDFSIter_SetResidue,swig_arginfo_obmolatomdfsiter_setresidue)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setparent,_wrap_OBMolAtomDFSIter_SetParent,swig_arginfo_obmolatomdfsiter_setparent)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setaromatic,_wrap_OBMolAtomDFSIter_SetAromatic,swig_arginfo_obmolatomdfsiter_setaromatic)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_unsetaromatic,_wrap_OBMolAtomDFSIter_UnsetAromatic,swig_arginfo_obmolatomdfsiter_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setclockwisestereo,_wrap_OBMolAtomDFSIter_SetClockwiseStereo,swig_arginfo_obmolatomdfsiter_setclockwisestereo)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setanticlockwisestereo,_wrap_OBMolAtomDFSIter_SetAntiClockwiseStereo,swig_arginfo_obmolatomdfsiter_setanticlockwisestereo)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setpositivestereo,_wrap_OBMolAtomDFSIter_SetPositiveStereo,swig_arginfo_obmolatomdfsiter_setpositivestereo)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setnegativestereo,_wrap_OBMolAtomDFSIter_SetNegativeStereo,swig_arginfo_obmolatomdfsiter_setnegativestereo)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_unsetstereo,_wrap_OBMolAtomDFSIter_UnsetStereo,swig_arginfo_obmolatomdfsiter_unsetstereo)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setinring,_wrap_OBMolAtomDFSIter_SetInRing,swig_arginfo_obmolatomdfsiter_setinring)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_setchiral,_wrap_OBMolAtomDFSIter_SetChiral,swig_arginfo_obmolatomdfsiter_setchiral)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_clearcoordptr,_wrap_OBMolAtomDFSIter_ClearCoordPtr,swig_arginfo_obmolatomdfsiter_clearcoordptr)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getformalcharge,_wrap_OBMolAtomDFSIter_GetFormalCharge,swig_arginfo_obmolatomdfsiter_getformalcharge)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getatomicnum,_wrap_OBMolAtomDFSIter_GetAtomicNum,swig_arginfo_obmolatomdfsiter_getatomicnum)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getisotope,_wrap_OBMolAtomDFSIter_GetIsotope,swig_arginfo_obmolatomdfsiter_getisotope)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getspinmultiplicity,_wrap_OBMolAtomDFSIter_GetSpinMultiplicity,swig_arginfo_obmolatomdfsiter_getspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getatomicmass,_wrap_OBMolAtomDFSIter_GetAtomicMass,swig_arginfo_obmolatomdfsiter_getatomicmass)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getexactmass,_wrap_OBMolAtomDFSIter_GetExactMass,swig_arginfo_obmolatomdfsiter_getexactmass)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getidx,_wrap_OBMolAtomDFSIter_GetIdx,swig_arginfo_obmolatomdfsiter_getidx)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getindex,_wrap_OBMolAtomDFSIter_GetIndex,swig_arginfo_obmolatomdfsiter_getindex)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getid,_wrap_OBMolAtomDFSIter_GetId,swig_arginfo_obmolatomdfsiter_getid)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getcoordinateidx,_wrap_OBMolAtomDFSIter_GetCoordinateIdx,swig_arginfo_obmolatomdfsiter_getcoordinateidx)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getcidx,_wrap_OBMolAtomDFSIter_GetCIdx,swig_arginfo_obmolatomdfsiter_getcidx)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getvalence,_wrap_OBMolAtomDFSIter_GetValence,swig_arginfo_obmolatomdfsiter_getvalence)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_gethyb,_wrap_OBMolAtomDFSIter_GetHyb,swig_arginfo_obmolatomdfsiter_gethyb)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getimplicitvalence,_wrap_OBMolAtomDFSIter_GetImplicitValence,swig_arginfo_obmolatomdfsiter_getimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_gethvyvalence,_wrap_OBMolAtomDFSIter_GetHvyValence,swig_arginfo_obmolatomdfsiter_gethvyvalence)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getheterovalence,_wrap_OBMolAtomDFSIter_GetHeteroValence,swig_arginfo_obmolatomdfsiter_getheterovalence)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_gettype,_wrap_OBMolAtomDFSIter_GetType,swig_arginfo_obmolatomdfsiter_gettype)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getx,_wrap_OBMolAtomDFSIter_GetX,swig_arginfo_obmolatomdfsiter_getx)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_gety,_wrap_OBMolAtomDFSIter_GetY,swig_arginfo_obmolatomdfsiter_gety)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getz,_wrap_OBMolAtomDFSIter_GetZ,swig_arginfo_obmolatomdfsiter_getz)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_x,_wrap_OBMolAtomDFSIter_x,swig_arginfo_obmolatomdfsiter_x)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_y,_wrap_OBMolAtomDFSIter_y,swig_arginfo_obmolatomdfsiter_y)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_z,_wrap_OBMolAtomDFSIter_z,swig_arginfo_obmolatomdfsiter_z)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getcoordinate,_wrap_OBMolAtomDFSIter_GetCoordinate,swig_arginfo_obmolatomdfsiter_getcoordinate)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getvector,_wrap_OBMolAtomDFSIter_GetVector,swig_arginfo_obmolatomdfsiter_getvector)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getpartialcharge,_wrap_OBMolAtomDFSIter_GetPartialCharge,swig_arginfo_obmolatomdfsiter_getpartialcharge)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getresidue,_wrap_OBMolAtomDFSIter_GetResidue,swig_arginfo_obmolatomdfsiter_getresidue)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getparent,_wrap_OBMolAtomDFSIter_GetParent,swig_arginfo_obmolatomdfsiter_getparent)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getnewbondvector,_wrap_OBMolAtomDFSIter_GetNewBondVector,swig_arginfo_obmolatomdfsiter_getnewbondvector)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getbond,_wrap_OBMolAtomDFSIter_GetBond,swig_arginfo_obmolatomdfsiter_getbond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getnextatom,_wrap_OBMolAtomDFSIter_GetNextAtom,swig_arginfo_obmolatomdfsiter_getnextatom)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_beginbonds,_wrap_OBMolAtomDFSIter_BeginBonds,swig_arginfo_obmolatomdfsiter_beginbonds)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_endbonds,_wrap_OBMolAtomDFSIter_EndBonds,swig_arginfo_obmolatomdfsiter_endbonds)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_beginbond,_wrap_OBMolAtomDFSIter_BeginBond,swig_arginfo_obmolatomdfsiter_beginbond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_nextbond,_wrap_OBMolAtomDFSIter_NextBond,swig_arginfo_obmolatomdfsiter_nextbond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_beginnbratom,_wrap_OBMolAtomDFSIter_BeginNbrAtom,swig_arginfo_obmolatomdfsiter_beginnbratom)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_nextnbratom,_wrap_OBMolAtomDFSIter_NextNbrAtom,swig_arginfo_obmolatomdfsiter_nextnbratom)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getdistance,_wrap_OBMolAtomDFSIter_GetDistance,swig_arginfo_obmolatomdfsiter_getdistance)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getangle,_wrap_OBMolAtomDFSIter_GetAngle,swig_arginfo_obmolatomdfsiter_getangle)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_newresidue,_wrap_OBMolAtomDFSIter_NewResidue,swig_arginfo_obmolatomdfsiter_newresidue)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_addresidue,_wrap_OBMolAtomDFSIter_AddResidue,swig_arginfo_obmolatomdfsiter_addresidue)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_deleteresidue,_wrap_OBMolAtomDFSIter_DeleteResidue,swig_arginfo_obmolatomdfsiter_deleteresidue)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_addbond,_wrap_OBMolAtomDFSIter_AddBond,swig_arginfo_obmolatomdfsiter_addbond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_insertbond,_wrap_OBMolAtomDFSIter_InsertBond,swig_arginfo_obmolatomdfsiter_insertbond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_deletebond,_wrap_OBMolAtomDFSIter_DeleteBond,swig_arginfo_obmolatomdfsiter_deletebond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_clearbond,_wrap_OBMolAtomDFSIter_ClearBond,swig_arginfo_obmolatomdfsiter_clearbond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_htomethyl,_wrap_OBMolAtomDFSIter_HtoMethyl,swig_arginfo_obmolatomdfsiter_htomethyl)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_sethybandgeom,_wrap_OBMolAtomDFSIter_SetHybAndGeom,swig_arginfo_obmolatomdfsiter_sethybandgeom)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_forcenoh,_wrap_OBMolAtomDFSIter_ForceNoH,swig_arginfo_obmolatomdfsiter_forcenoh)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasnohforced,_wrap_OBMolAtomDFSIter_HasNoHForced,swig_arginfo_obmolatomdfsiter_hasnohforced)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_forceimplh,_wrap_OBMolAtomDFSIter_ForceImplH,swig_arginfo_obmolatomdfsiter_forceimplh)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasimplhforced,_wrap_OBMolAtomDFSIter_HasImplHForced,swig_arginfo_obmolatomdfsiter_hasimplhforced)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_countfreeoxygens,_wrap_OBMolAtomDFSIter_CountFreeOxygens,swig_arginfo_obmolatomdfsiter_countfreeoxygens)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_countfreesulfurs,_wrap_OBMolAtomDFSIter_CountFreeSulfurs,swig_arginfo_obmolatomdfsiter_countfreesulfurs)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_implicithydrogencount,_wrap_OBMolAtomDFSIter_ImplicitHydrogenCount,swig_arginfo_obmolatomdfsiter_implicithydrogencount)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_explicithydrogencount,_wrap_OBMolAtomDFSIter_ExplicitHydrogenCount,swig_arginfo_obmolatomdfsiter_explicithydrogencount)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_memberofringcount,_wrap_OBMolAtomDFSIter_MemberOfRingCount,swig_arginfo_obmolatomdfsiter_memberofringcount)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_memberofringsize,_wrap_OBMolAtomDFSIter_MemberOfRingSize,swig_arginfo_obmolatomdfsiter_memberofringsize)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_countringbonds,_wrap_OBMolAtomDFSIter_CountRingBonds,swig_arginfo_obmolatomdfsiter_countringbonds)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_smallestbondangle,_wrap_OBMolAtomDFSIter_SmallestBondAngle,swig_arginfo_obmolatomdfsiter_smallestbondangle)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_averagebondangle,_wrap_OBMolAtomDFSIter_AverageBondAngle,swig_arginfo_obmolatomdfsiter_averagebondangle)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_bosum,_wrap_OBMolAtomDFSIter_BOSum,swig_arginfo_obmolatomdfsiter_bosum)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_kbosum,_wrap_OBMolAtomDFSIter_KBOSum,swig_arginfo_obmolatomdfsiter_kbosum)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_lewisacidbasecounts,_wrap_OBMolAtomDFSIter_LewisAcidBaseCounts,swig_arginfo_obmolatomdfsiter_lewisacidbasecounts)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasresidue,_wrap_OBMolAtomDFSIter_HasResidue,swig_arginfo_obmolatomdfsiter_hasresidue)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ishetatom,_wrap_OBMolAtomDFSIter_IsHetAtom,swig_arginfo_obmolatomdfsiter_ishetatom)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ishydrogen,_wrap_OBMolAtomDFSIter_IsHydrogen,swig_arginfo_obmolatomdfsiter_ishydrogen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_iscarbon,_wrap_OBMolAtomDFSIter_IsCarbon,swig_arginfo_obmolatomdfsiter_iscarbon)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isnitrogen,_wrap_OBMolAtomDFSIter_IsNitrogen,swig_arginfo_obmolatomdfsiter_isnitrogen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isoxygen,_wrap_OBMolAtomDFSIter_IsOxygen,swig_arginfo_obmolatomdfsiter_isoxygen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_issulfur,_wrap_OBMolAtomDFSIter_IsSulfur,swig_arginfo_obmolatomdfsiter_issulfur)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isphosphorus,_wrap_OBMolAtomDFSIter_IsPhosphorus,swig_arginfo_obmolatomdfsiter_isphosphorus)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isaromatic,_wrap_OBMolAtomDFSIter_IsAromatic,swig_arginfo_obmolatomdfsiter_isaromatic)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isinring,_wrap_OBMolAtomDFSIter_IsInRing,swig_arginfo_obmolatomdfsiter_isinring)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isinringsize,_wrap_OBMolAtomDFSIter_IsInRingSize,swig_arginfo_obmolatomdfsiter_isinringsize)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isheteroatom,_wrap_OBMolAtomDFSIter_IsHeteroatom,swig_arginfo_obmolatomdfsiter_isheteroatom)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isnotcorh,_wrap_OBMolAtomDFSIter_IsNotCorH,swig_arginfo_obmolatomdfsiter_isnotcorh)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isconnected,_wrap_OBMolAtomDFSIter_IsConnected,swig_arginfo_obmolatomdfsiter_isconnected)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isonethree,_wrap_OBMolAtomDFSIter_IsOneThree,swig_arginfo_obmolatomdfsiter_isonethree)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isonefour,_wrap_OBMolAtomDFSIter_IsOneFour,swig_arginfo_obmolatomdfsiter_isonefour)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_iscarboxyloxygen,_wrap_OBMolAtomDFSIter_IsCarboxylOxygen,swig_arginfo_obmolatomdfsiter_iscarboxyloxygen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isphosphateoxygen,_wrap_OBMolAtomDFSIter_IsPhosphateOxygen,swig_arginfo_obmolatomdfsiter_isphosphateoxygen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_issulfateoxygen,_wrap_OBMolAtomDFSIter_IsSulfateOxygen,swig_arginfo_obmolatomdfsiter_issulfateoxygen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isnitrooxygen,_wrap_OBMolAtomDFSIter_IsNitroOxygen,swig_arginfo_obmolatomdfsiter_isnitrooxygen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isamidenitrogen,_wrap_OBMolAtomDFSIter_IsAmideNitrogen,swig_arginfo_obmolatomdfsiter_isamidenitrogen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ispolarhydrogen,_wrap_OBMolAtomDFSIter_IsPolarHydrogen,swig_arginfo_obmolatomdfsiter_ispolarhydrogen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isnonpolarhydrogen,_wrap_OBMolAtomDFSIter_IsNonPolarHydrogen,swig_arginfo_obmolatomdfsiter_isnonpolarhydrogen)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isaromaticnoxide,_wrap_OBMolAtomDFSIter_IsAromaticNOxide,swig_arginfo_obmolatomdfsiter_isaromaticnoxide)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ischiral,_wrap_OBMolAtomDFSIter_IsChiral,swig_arginfo_obmolatomdfsiter_ischiral)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isaxial,_wrap_OBMolAtomDFSIter_IsAxial,swig_arginfo_obmolatomdfsiter_isaxial)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isclockwise,_wrap_OBMolAtomDFSIter_IsClockwise,swig_arginfo_obmolatomdfsiter_isclockwise)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isanticlockwise,_wrap_OBMolAtomDFSIter_IsAntiClockwise,swig_arginfo_obmolatomdfsiter_isanticlockwise)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ispositivestereo,_wrap_OBMolAtomDFSIter_IsPositiveStereo,swig_arginfo_obmolatomdfsiter_ispositivestereo)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_isnegativestereo,_wrap_OBMolAtomDFSIter_IsNegativeStereo,swig_arginfo_obmolatomdfsiter_isnegativestereo)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_haschiralityspecified,_wrap_OBMolAtomDFSIter_HasChiralitySpecified,swig_arginfo_obmolatomdfsiter_haschiralityspecified)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_haschiralvolume,_wrap_OBMolAtomDFSIter_HasChiralVolume,swig_arginfo_obmolatomdfsiter_haschiralvolume)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ishbondacceptor,_wrap_OBMolAtomDFSIter_IsHbondAcceptor,swig_arginfo_obmolatomdfsiter_ishbondacceptor)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ishbondacceptorsimple,_wrap_OBMolAtomDFSIter_IsHbondAcceptorSimple,swig_arginfo_obmolatomdfsiter_ishbondacceptorsimple)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ishbonddonor,_wrap_OBMolAtomDFSIter_IsHbondDonor,swig_arginfo_obmolatomdfsiter_ishbonddonor)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ishbonddonorh,_wrap_OBMolAtomDFSIter_IsHbondDonorH,swig_arginfo_obmolatomdfsiter_ishbonddonorh)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_ismetal,_wrap_OBMolAtomDFSIter_IsMetal,swig_arginfo_obmolatomdfsiter_ismetal)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasalphabetaunsat,_wrap_OBMolAtomDFSIter_HasAlphaBetaUnsat,swig_arginfo_obmolatomdfsiter_hasalphabetaunsat)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasbondoforder,_wrap_OBMolAtomDFSIter_HasBondOfOrder,swig_arginfo_obmolatomdfsiter_hasbondoforder)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_countbondsoforder,_wrap_OBMolAtomDFSIter_CountBondsOfOrder,swig_arginfo_obmolatomdfsiter_countbondsoforder)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_highestbondorder,_wrap_OBMolAtomDFSIter_HighestBondOrder,swig_arginfo_obmolatomdfsiter_highestbondorder)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasnonsinglebond,_wrap_OBMolAtomDFSIter_HasNonSingleBond,swig_arginfo_obmolatomdfsiter_hasnonsinglebond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hassinglebond,_wrap_OBMolAtomDFSIter_HasSingleBond,swig_arginfo_obmolatomdfsiter_hassinglebond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasdoublebond,_wrap_OBMolAtomDFSIter_HasDoubleBond,swig_arginfo_obmolatomdfsiter_hasdoublebond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasaromaticbond,_wrap_OBMolAtomDFSIter_HasAromaticBond,swig_arginfo_obmolatomdfsiter_hasaromaticbond)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_matchessmarts,_wrap_OBMolAtomDFSIter_MatchesSMARTS,swig_arginfo_obmolatomdfsiter_matchessmarts)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_clear,_wrap_OBMolAtomDFSIter_Clear,swig_arginfo_obmolatomdfsiter_clear)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_dotransformations,_wrap_OBMolAtomDFSIter_DoTransformations,swig_arginfo_obmolatomdfsiter_dotransformations)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_classdescription,_wrap_OBMolAtomDFSIter_ClassDescription,swig_arginfo_obmolatomdfsiter_classdescription)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_gettitle,_wrap_OBMolAtomDFSIter_GetTitle,swig_arginfo_obmolatomdfsiter_gettitle)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_settitle,_wrap_OBMolAtomDFSIter_SetTitle,swig_arginfo_obmolatomdfsiter_settitle)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_hasdata,_wrap_OBMolAtomDFSIter_HasData,swig_arginfo_obmolatomdfsiter_hasdata)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_deletedata,_wrap_OBMolAtomDFSIter_DeleteData,swig_arginfo_obmolatomdfsiter_deletedata)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_clonedata,_wrap_OBMolAtomDFSIter_CloneData,swig_arginfo_obmolatomdfsiter_clonedata)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_datasize,_wrap_OBMolAtomDFSIter_DataSize,swig_arginfo_obmolatomdfsiter_datasize)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getdata,_wrap_OBMolAtomDFSIter_GetData,swig_arginfo_obmolatomdfsiter_getdata)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_getalldata,_wrap_OBMolAtomDFSIter_GetAllData,swig_arginfo_obmolatomdfsiter_getalldata)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_begindata,_wrap_OBMolAtomDFSIter_BeginData,swig_arginfo_obmolatomdfsiter_begindata)
 SWIG_ZEND_NAMED_FE(obmolatomdfsiter_enddata,_wrap_OBMolAtomDFSIter_EndData,swig_arginfo_obmolatomdfsiter_enddata)
 SWIG_ZEND_NAMED_FE(new_obmolatombfsiter,_wrap_new_OBMolAtomBFSIter,swig_arginfo_new_obmolatombfsiter)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter___deref__,_wrap_OBMolAtomBFSIter___deref__,swig_arginfo_obmolatombfsiter___deref__)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter___ref__,_wrap_OBMolAtomBFSIter___ref__,swig_arginfo_obmolatombfsiter___ref__)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_currentdepth,_wrap_OBMolAtomBFSIter_CurrentDepth,swig_arginfo_obmolatombfsiter_currentdepth)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_visit_set,_wrap_OBMolAtomBFSIter_Visit_set,swig_arginfo_obmolatombfsiter_visit_set)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_visit_get,_wrap_OBMolAtomBFSIter_Visit_get,swig_arginfo_obmolatombfsiter_visit_get)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_duplicate,_wrap_OBMolAtomBFSIter_Duplicate,swig_arginfo_obmolatombfsiter_duplicate)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setidx,_wrap_OBMolAtomBFSIter_SetIdx,swig_arginfo_obmolatombfsiter_setidx)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setid,_wrap_OBMolAtomBFSIter_SetId,swig_arginfo_obmolatombfsiter_setid)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_sethyb,_wrap_OBMolAtomBFSIter_SetHyb,swig_arginfo_obmolatombfsiter_sethyb)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setatomicnum,_wrap_OBMolAtomBFSIter_SetAtomicNum,swig_arginfo_obmolatombfsiter_setatomicnum)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setisotope,_wrap_OBMolAtomBFSIter_SetIsotope,swig_arginfo_obmolatombfsiter_setisotope)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setimplicitvalence,_wrap_OBMolAtomBFSIter_SetImplicitValence,swig_arginfo_obmolatombfsiter_setimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_incrementimplicitvalence,_wrap_OBMolAtomBFSIter_IncrementImplicitValence,swig_arginfo_obmolatombfsiter_incrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_decrementimplicitvalence,_wrap_OBMolAtomBFSIter_DecrementImplicitValence,swig_arginfo_obmolatombfsiter_decrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setformalcharge,_wrap_OBMolAtomBFSIter_SetFormalCharge,swig_arginfo_obmolatombfsiter_setformalcharge)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setspinmultiplicity,_wrap_OBMolAtomBFSIter_SetSpinMultiplicity,swig_arginfo_obmolatombfsiter_setspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_settype,_wrap_OBMolAtomBFSIter_SetType,swig_arginfo_obmolatombfsiter_settype)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setpartialcharge,_wrap_OBMolAtomBFSIter_SetPartialCharge,swig_arginfo_obmolatombfsiter_setpartialcharge)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setvector,_wrap_OBMolAtomBFSIter_SetVector,swig_arginfo_obmolatombfsiter_setvector)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setcoordptr,_wrap_OBMolAtomBFSIter_SetCoordPtr,swig_arginfo_obmolatombfsiter_setcoordptr)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setresidue,_wrap_OBMolAtomBFSIter_SetResidue,swig_arginfo_obmolatombfsiter_setresidue)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setparent,_wrap_OBMolAtomBFSIter_SetParent,swig_arginfo_obmolatombfsiter_setparent)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setaromatic,_wrap_OBMolAtomBFSIter_SetAromatic,swig_arginfo_obmolatombfsiter_setaromatic)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_unsetaromatic,_wrap_OBMolAtomBFSIter_UnsetAromatic,swig_arginfo_obmolatombfsiter_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setclockwisestereo,_wrap_OBMolAtomBFSIter_SetClockwiseStereo,swig_arginfo_obmolatombfsiter_setclockwisestereo)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setanticlockwisestereo,_wrap_OBMolAtomBFSIter_SetAntiClockwiseStereo,swig_arginfo_obmolatombfsiter_setanticlockwisestereo)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setpositivestereo,_wrap_OBMolAtomBFSIter_SetPositiveStereo,swig_arginfo_obmolatombfsiter_setpositivestereo)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setnegativestereo,_wrap_OBMolAtomBFSIter_SetNegativeStereo,swig_arginfo_obmolatombfsiter_setnegativestereo)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_unsetstereo,_wrap_OBMolAtomBFSIter_UnsetStereo,swig_arginfo_obmolatombfsiter_unsetstereo)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setinring,_wrap_OBMolAtomBFSIter_SetInRing,swig_arginfo_obmolatombfsiter_setinring)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_setchiral,_wrap_OBMolAtomBFSIter_SetChiral,swig_arginfo_obmolatombfsiter_setchiral)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_clearcoordptr,_wrap_OBMolAtomBFSIter_ClearCoordPtr,swig_arginfo_obmolatombfsiter_clearcoordptr)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getformalcharge,_wrap_OBMolAtomBFSIter_GetFormalCharge,swig_arginfo_obmolatombfsiter_getformalcharge)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getatomicnum,_wrap_OBMolAtomBFSIter_GetAtomicNum,swig_arginfo_obmolatombfsiter_getatomicnum)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getisotope,_wrap_OBMolAtomBFSIter_GetIsotope,swig_arginfo_obmolatombfsiter_getisotope)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getspinmultiplicity,_wrap_OBMolAtomBFSIter_GetSpinMultiplicity,swig_arginfo_obmolatombfsiter_getspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getatomicmass,_wrap_OBMolAtomBFSIter_GetAtomicMass,swig_arginfo_obmolatombfsiter_getatomicmass)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getexactmass,_wrap_OBMolAtomBFSIter_GetExactMass,swig_arginfo_obmolatombfsiter_getexactmass)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getidx,_wrap_OBMolAtomBFSIter_GetIdx,swig_arginfo_obmolatombfsiter_getidx)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getindex,_wrap_OBMolAtomBFSIter_GetIndex,swig_arginfo_obmolatombfsiter_getindex)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getid,_wrap_OBMolAtomBFSIter_GetId,swig_arginfo_obmolatombfsiter_getid)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getcoordinateidx,_wrap_OBMolAtomBFSIter_GetCoordinateIdx,swig_arginfo_obmolatombfsiter_getcoordinateidx)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getcidx,_wrap_OBMolAtomBFSIter_GetCIdx,swig_arginfo_obmolatombfsiter_getcidx)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getvalence,_wrap_OBMolAtomBFSIter_GetValence,swig_arginfo_obmolatombfsiter_getvalence)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_gethyb,_wrap_OBMolAtomBFSIter_GetHyb,swig_arginfo_obmolatombfsiter_gethyb)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getimplicitvalence,_wrap_OBMolAtomBFSIter_GetImplicitValence,swig_arginfo_obmolatombfsiter_getimplicitvalence)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_gethvyvalence,_wrap_OBMolAtomBFSIter_GetHvyValence,swig_arginfo_obmolatombfsiter_gethvyvalence)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getheterovalence,_wrap_OBMolAtomBFSIter_GetHeteroValence,swig_arginfo_obmolatombfsiter_getheterovalence)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_gettype,_wrap_OBMolAtomBFSIter_GetType,swig_arginfo_obmolatombfsiter_gettype)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getx,_wrap_OBMolAtomBFSIter_GetX,swig_arginfo_obmolatombfsiter_getx)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_gety,_wrap_OBMolAtomBFSIter_GetY,swig_arginfo_obmolatombfsiter_gety)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getz,_wrap_OBMolAtomBFSIter_GetZ,swig_arginfo_obmolatombfsiter_getz)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_x,_wrap_OBMolAtomBFSIter_x,swig_arginfo_obmolatombfsiter_x)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_y,_wrap_OBMolAtomBFSIter_y,swig_arginfo_obmolatombfsiter_y)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_z,_wrap_OBMolAtomBFSIter_z,swig_arginfo_obmolatombfsiter_z)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getcoordinate,_wrap_OBMolAtomBFSIter_GetCoordinate,swig_arginfo_obmolatombfsiter_getcoordinate)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getvector,_wrap_OBMolAtomBFSIter_GetVector,swig_arginfo_obmolatombfsiter_getvector)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getpartialcharge,_wrap_OBMolAtomBFSIter_GetPartialCharge,swig_arginfo_obmolatombfsiter_getpartialcharge)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getresidue,_wrap_OBMolAtomBFSIter_GetResidue,swig_arginfo_obmolatombfsiter_getresidue)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getparent,_wrap_OBMolAtomBFSIter_GetParent,swig_arginfo_obmolatombfsiter_getparent)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getnewbondvector,_wrap_OBMolAtomBFSIter_GetNewBondVector,swig_arginfo_obmolatombfsiter_getnewbondvector)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getbond,_wrap_OBMolAtomBFSIter_GetBond,swig_arginfo_obmolatombfsiter_getbond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getnextatom,_wrap_OBMolAtomBFSIter_GetNextAtom,swig_arginfo_obmolatombfsiter_getnextatom)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_beginbonds,_wrap_OBMolAtomBFSIter_BeginBonds,swig_arginfo_obmolatombfsiter_beginbonds)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_endbonds,_wrap_OBMolAtomBFSIter_EndBonds,swig_arginfo_obmolatombfsiter_endbonds)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_beginbond,_wrap_OBMolAtomBFSIter_BeginBond,swig_arginfo_obmolatombfsiter_beginbond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_nextbond,_wrap_OBMolAtomBFSIter_NextBond,swig_arginfo_obmolatombfsiter_nextbond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_beginnbratom,_wrap_OBMolAtomBFSIter_BeginNbrAtom,swig_arginfo_obmolatombfsiter_beginnbratom)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_nextnbratom,_wrap_OBMolAtomBFSIter_NextNbrAtom,swig_arginfo_obmolatombfsiter_nextnbratom)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getdistance,_wrap_OBMolAtomBFSIter_GetDistance,swig_arginfo_obmolatombfsiter_getdistance)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getangle,_wrap_OBMolAtomBFSIter_GetAngle,swig_arginfo_obmolatombfsiter_getangle)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_newresidue,_wrap_OBMolAtomBFSIter_NewResidue,swig_arginfo_obmolatombfsiter_newresidue)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_addresidue,_wrap_OBMolAtomBFSIter_AddResidue,swig_arginfo_obmolatombfsiter_addresidue)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_deleteresidue,_wrap_OBMolAtomBFSIter_DeleteResidue,swig_arginfo_obmolatombfsiter_deleteresidue)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_addbond,_wrap_OBMolAtomBFSIter_AddBond,swig_arginfo_obmolatombfsiter_addbond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_insertbond,_wrap_OBMolAtomBFSIter_InsertBond,swig_arginfo_obmolatombfsiter_insertbond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_deletebond,_wrap_OBMolAtomBFSIter_DeleteBond,swig_arginfo_obmolatombfsiter_deletebond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_clearbond,_wrap_OBMolAtomBFSIter_ClearBond,swig_arginfo_obmolatombfsiter_clearbond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_htomethyl,_wrap_OBMolAtomBFSIter_HtoMethyl,swig_arginfo_obmolatombfsiter_htomethyl)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_sethybandgeom,_wrap_OBMolAtomBFSIter_SetHybAndGeom,swig_arginfo_obmolatombfsiter_sethybandgeom)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_forcenoh,_wrap_OBMolAtomBFSIter_ForceNoH,swig_arginfo_obmolatombfsiter_forcenoh)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasnohforced,_wrap_OBMolAtomBFSIter_HasNoHForced,swig_arginfo_obmolatombfsiter_hasnohforced)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_forceimplh,_wrap_OBMolAtomBFSIter_ForceImplH,swig_arginfo_obmolatombfsiter_forceimplh)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasimplhforced,_wrap_OBMolAtomBFSIter_HasImplHForced,swig_arginfo_obmolatombfsiter_hasimplhforced)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_countfreeoxygens,_wrap_OBMolAtomBFSIter_CountFreeOxygens,swig_arginfo_obmolatombfsiter_countfreeoxygens)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_countfreesulfurs,_wrap_OBMolAtomBFSIter_CountFreeSulfurs,swig_arginfo_obmolatombfsiter_countfreesulfurs)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_implicithydrogencount,_wrap_OBMolAtomBFSIter_ImplicitHydrogenCount,swig_arginfo_obmolatombfsiter_implicithydrogencount)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_explicithydrogencount,_wrap_OBMolAtomBFSIter_ExplicitHydrogenCount,swig_arginfo_obmolatombfsiter_explicithydrogencount)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_memberofringcount,_wrap_OBMolAtomBFSIter_MemberOfRingCount,swig_arginfo_obmolatombfsiter_memberofringcount)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_memberofringsize,_wrap_OBMolAtomBFSIter_MemberOfRingSize,swig_arginfo_obmolatombfsiter_memberofringsize)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_countringbonds,_wrap_OBMolAtomBFSIter_CountRingBonds,swig_arginfo_obmolatombfsiter_countringbonds)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_smallestbondangle,_wrap_OBMolAtomBFSIter_SmallestBondAngle,swig_arginfo_obmolatombfsiter_smallestbondangle)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_averagebondangle,_wrap_OBMolAtomBFSIter_AverageBondAngle,swig_arginfo_obmolatombfsiter_averagebondangle)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_bosum,_wrap_OBMolAtomBFSIter_BOSum,swig_arginfo_obmolatombfsiter_bosum)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_kbosum,_wrap_OBMolAtomBFSIter_KBOSum,swig_arginfo_obmolatombfsiter_kbosum)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_lewisacidbasecounts,_wrap_OBMolAtomBFSIter_LewisAcidBaseCounts,swig_arginfo_obmolatombfsiter_lewisacidbasecounts)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasresidue,_wrap_OBMolAtomBFSIter_HasResidue,swig_arginfo_obmolatombfsiter_hasresidue)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ishetatom,_wrap_OBMolAtomBFSIter_IsHetAtom,swig_arginfo_obmolatombfsiter_ishetatom)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ishydrogen,_wrap_OBMolAtomBFSIter_IsHydrogen,swig_arginfo_obmolatombfsiter_ishydrogen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_iscarbon,_wrap_OBMolAtomBFSIter_IsCarbon,swig_arginfo_obmolatombfsiter_iscarbon)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isnitrogen,_wrap_OBMolAtomBFSIter_IsNitrogen,swig_arginfo_obmolatombfsiter_isnitrogen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isoxygen,_wrap_OBMolAtomBFSIter_IsOxygen,swig_arginfo_obmolatombfsiter_isoxygen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_issulfur,_wrap_OBMolAtomBFSIter_IsSulfur,swig_arginfo_obmolatombfsiter_issulfur)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isphosphorus,_wrap_OBMolAtomBFSIter_IsPhosphorus,swig_arginfo_obmolatombfsiter_isphosphorus)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isaromatic,_wrap_OBMolAtomBFSIter_IsAromatic,swig_arginfo_obmolatombfsiter_isaromatic)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isinring,_wrap_OBMolAtomBFSIter_IsInRing,swig_arginfo_obmolatombfsiter_isinring)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isinringsize,_wrap_OBMolAtomBFSIter_IsInRingSize,swig_arginfo_obmolatombfsiter_isinringsize)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isheteroatom,_wrap_OBMolAtomBFSIter_IsHeteroatom,swig_arginfo_obmolatombfsiter_isheteroatom)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isnotcorh,_wrap_OBMolAtomBFSIter_IsNotCorH,swig_arginfo_obmolatombfsiter_isnotcorh)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isconnected,_wrap_OBMolAtomBFSIter_IsConnected,swig_arginfo_obmolatombfsiter_isconnected)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isonethree,_wrap_OBMolAtomBFSIter_IsOneThree,swig_arginfo_obmolatombfsiter_isonethree)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isonefour,_wrap_OBMolAtomBFSIter_IsOneFour,swig_arginfo_obmolatombfsiter_isonefour)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_iscarboxyloxygen,_wrap_OBMolAtomBFSIter_IsCarboxylOxygen,swig_arginfo_obmolatombfsiter_iscarboxyloxygen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isphosphateoxygen,_wrap_OBMolAtomBFSIter_IsPhosphateOxygen,swig_arginfo_obmolatombfsiter_isphosphateoxygen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_issulfateoxygen,_wrap_OBMolAtomBFSIter_IsSulfateOxygen,swig_arginfo_obmolatombfsiter_issulfateoxygen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isnitrooxygen,_wrap_OBMolAtomBFSIter_IsNitroOxygen,swig_arginfo_obmolatombfsiter_isnitrooxygen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isamidenitrogen,_wrap_OBMolAtomBFSIter_IsAmideNitrogen,swig_arginfo_obmolatombfsiter_isamidenitrogen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ispolarhydrogen,_wrap_OBMolAtomBFSIter_IsPolarHydrogen,swig_arginfo_obmolatombfsiter_ispolarhydrogen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isnonpolarhydrogen,_wrap_OBMolAtomBFSIter_IsNonPolarHydrogen,swig_arginfo_obmolatombfsiter_isnonpolarhydrogen)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isaromaticnoxide,_wrap_OBMolAtomBFSIter_IsAromaticNOxide,swig_arginfo_obmolatombfsiter_isaromaticnoxide)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ischiral,_wrap_OBMolAtomBFSIter_IsChiral,swig_arginfo_obmolatombfsiter_ischiral)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isaxial,_wrap_OBMolAtomBFSIter_IsAxial,swig_arginfo_obmolatombfsiter_isaxial)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isclockwise,_wrap_OBMolAtomBFSIter_IsClockwise,swig_arginfo_obmolatombfsiter_isclockwise)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isanticlockwise,_wrap_OBMolAtomBFSIter_IsAntiClockwise,swig_arginfo_obmolatombfsiter_isanticlockwise)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ispositivestereo,_wrap_OBMolAtomBFSIter_IsPositiveStereo,swig_arginfo_obmolatombfsiter_ispositivestereo)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_isnegativestereo,_wrap_OBMolAtomBFSIter_IsNegativeStereo,swig_arginfo_obmolatombfsiter_isnegativestereo)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_haschiralityspecified,_wrap_OBMolAtomBFSIter_HasChiralitySpecified,swig_arginfo_obmolatombfsiter_haschiralityspecified)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_haschiralvolume,_wrap_OBMolAtomBFSIter_HasChiralVolume,swig_arginfo_obmolatombfsiter_haschiralvolume)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ishbondacceptor,_wrap_OBMolAtomBFSIter_IsHbondAcceptor,swig_arginfo_obmolatombfsiter_ishbondacceptor)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ishbondacceptorsimple,_wrap_OBMolAtomBFSIter_IsHbondAcceptorSimple,swig_arginfo_obmolatombfsiter_ishbondacceptorsimple)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ishbonddonor,_wrap_OBMolAtomBFSIter_IsHbondDonor,swig_arginfo_obmolatombfsiter_ishbonddonor)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ishbonddonorh,_wrap_OBMolAtomBFSIter_IsHbondDonorH,swig_arginfo_obmolatombfsiter_ishbonddonorh)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_ismetal,_wrap_OBMolAtomBFSIter_IsMetal,swig_arginfo_obmolatombfsiter_ismetal)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasalphabetaunsat,_wrap_OBMolAtomBFSIter_HasAlphaBetaUnsat,swig_arginfo_obmolatombfsiter_hasalphabetaunsat)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasbondoforder,_wrap_OBMolAtomBFSIter_HasBondOfOrder,swig_arginfo_obmolatombfsiter_hasbondoforder)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_countbondsoforder,_wrap_OBMolAtomBFSIter_CountBondsOfOrder,swig_arginfo_obmolatombfsiter_countbondsoforder)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_highestbondorder,_wrap_OBMolAtomBFSIter_HighestBondOrder,swig_arginfo_obmolatombfsiter_highestbondorder)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasnonsinglebond,_wrap_OBMolAtomBFSIter_HasNonSingleBond,swig_arginfo_obmolatombfsiter_hasnonsinglebond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hassinglebond,_wrap_OBMolAtomBFSIter_HasSingleBond,swig_arginfo_obmolatombfsiter_hassinglebond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasdoublebond,_wrap_OBMolAtomBFSIter_HasDoubleBond,swig_arginfo_obmolatombfsiter_hasdoublebond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasaromaticbond,_wrap_OBMolAtomBFSIter_HasAromaticBond,swig_arginfo_obmolatombfsiter_hasaromaticbond)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_matchessmarts,_wrap_OBMolAtomBFSIter_MatchesSMARTS,swig_arginfo_obmolatombfsiter_matchessmarts)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_clear,_wrap_OBMolAtomBFSIter_Clear,swig_arginfo_obmolatombfsiter_clear)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_dotransformations,_wrap_OBMolAtomBFSIter_DoTransformations,swig_arginfo_obmolatombfsiter_dotransformations)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_classdescription,_wrap_OBMolAtomBFSIter_ClassDescription,swig_arginfo_obmolatombfsiter_classdescription)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_gettitle,_wrap_OBMolAtomBFSIter_GetTitle,swig_arginfo_obmolatombfsiter_gettitle)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_settitle,_wrap_OBMolAtomBFSIter_SetTitle,swig_arginfo_obmolatombfsiter_settitle)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_hasdata,_wrap_OBMolAtomBFSIter_HasData,swig_arginfo_obmolatombfsiter_hasdata)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_deletedata,_wrap_OBMolAtomBFSIter_DeleteData,swig_arginfo_obmolatombfsiter_deletedata)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_clonedata,_wrap_OBMolAtomBFSIter_CloneData,swig_arginfo_obmolatombfsiter_clonedata)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_datasize,_wrap_OBMolAtomBFSIter_DataSize,swig_arginfo_obmolatombfsiter_datasize)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getdata,_wrap_OBMolAtomBFSIter_GetData,swig_arginfo_obmolatombfsiter_getdata)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_getalldata,_wrap_OBMolAtomBFSIter_GetAllData,swig_arginfo_obmolatombfsiter_getalldata)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_begindata,_wrap_OBMolAtomBFSIter_BeginData,swig_arginfo_obmolatombfsiter_begindata)
 SWIG_ZEND_NAMED_FE(obmolatombfsiter_enddata,_wrap_OBMolAtomBFSIter_EndData,swig_arginfo_obmolatombfsiter_enddata)
 SWIG_ZEND_NAMED_FE(new_obmolbondbfsiter,_wrap_new_OBMolBondBFSIter,swig_arginfo_new_obmolbondbfsiter)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter___deref__,_wrap_OBMolBondBFSIter___deref__,swig_arginfo_obmolbondbfsiter___deref__)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter___ref__,_wrap_OBMolBondBFSIter___ref__,swig_arginfo_obmolbondbfsiter___ref__)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_currentdepth,_wrap_OBMolBondBFSIter_CurrentDepth,swig_arginfo_obmolbondbfsiter_currentdepth)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_visit_set,_wrap_OBMolBondBFSIter_Visit_set,swig_arginfo_obmolbondbfsiter_visit_set)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_visit_get,_wrap_OBMolBondBFSIter_Visit_get,swig_arginfo_obmolbondbfsiter_visit_get)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setidx,_wrap_OBMolBondBFSIter_SetIdx,swig_arginfo_obmolbondbfsiter_setidx)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setid,_wrap_OBMolBondBFSIter_SetId,swig_arginfo_obmolbondbfsiter_setid)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setbo,_wrap_OBMolBondBFSIter_SetBO,swig_arginfo_obmolbondbfsiter_setbo)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setbondorder,_wrap_OBMolBondBFSIter_SetBondOrder,swig_arginfo_obmolbondbfsiter_setbondorder)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setbegin,_wrap_OBMolBondBFSIter_SetBegin,swig_arginfo_obmolbondbfsiter_setbegin)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setend,_wrap_OBMolBondBFSIter_SetEnd,swig_arginfo_obmolbondbfsiter_setend)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setparent,_wrap_OBMolBondBFSIter_SetParent,swig_arginfo_obmolbondbfsiter_setparent)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setlength,_wrap_OBMolBondBFSIter_SetLength,swig_arginfo_obmolbondbfsiter_setlength)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_set,_wrap_OBMolBondBFSIter_Set,swig_arginfo_obmolbondbfsiter_set)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setksingle,_wrap_OBMolBondBFSIter_SetKSingle,swig_arginfo_obmolbondbfsiter_setksingle)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setkdouble,_wrap_OBMolBondBFSIter_SetKDouble,swig_arginfo_obmolbondbfsiter_setkdouble)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setktriple,_wrap_OBMolBondBFSIter_SetKTriple,swig_arginfo_obmolbondbfsiter_setktriple)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setaromatic,_wrap_OBMolBondBFSIter_SetAromatic,swig_arginfo_obmolbondbfsiter_setaromatic)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setwedge,_wrap_OBMolBondBFSIter_SetWedge,swig_arginfo_obmolbondbfsiter_setwedge)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_sethash,_wrap_OBMolBondBFSIter_SetHash,swig_arginfo_obmolbondbfsiter_sethash)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setwedgeorhash,_wrap_OBMolBondBFSIter_SetWedgeOrHash,swig_arginfo_obmolbondbfsiter_setwedgeorhash)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setup,_wrap_OBMolBondBFSIter_SetUp,swig_arginfo_obmolbondbfsiter_setup)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setdown,_wrap_OBMolBondBFSIter_SetDown,swig_arginfo_obmolbondbfsiter_setdown)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setinring,_wrap_OBMolBondBFSIter_SetInRing,swig_arginfo_obmolbondbfsiter_setinring)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_setclosure,_wrap_OBMolBondBFSIter_SetClosure,swig_arginfo_obmolbondbfsiter_setclosure)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_unsethash,_wrap_OBMolBondBFSIter_UnsetHash,swig_arginfo_obmolbondbfsiter_unsethash)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_unsetwedge,_wrap_OBMolBondBFSIter_UnsetWedge,swig_arginfo_obmolbondbfsiter_unsetwedge)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_unsetup,_wrap_OBMolBondBFSIter_UnsetUp,swig_arginfo_obmolbondbfsiter_unsetup)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_unsetdown,_wrap_OBMolBondBFSIter_UnsetDown,swig_arginfo_obmolbondbfsiter_unsetdown)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_unsetaromatic,_wrap_OBMolBondBFSIter_UnsetAromatic,swig_arginfo_obmolbondbfsiter_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_unsetkekule,_wrap_OBMolBondBFSIter_UnsetKekule,swig_arginfo_obmolbondbfsiter_unsetkekule)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getidx,_wrap_OBMolBondBFSIter_GetIdx,swig_arginfo_obmolbondbfsiter_getidx)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getid,_wrap_OBMolBondBFSIter_GetId,swig_arginfo_obmolbondbfsiter_getid)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getbo,_wrap_OBMolBondBFSIter_GetBO,swig_arginfo_obmolbondbfsiter_getbo)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getbondorder,_wrap_OBMolBondBFSIter_GetBondOrder,swig_arginfo_obmolbondbfsiter_getbondorder)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getflags,_wrap_OBMolBondBFSIter_GetFlags,swig_arginfo_obmolbondbfsiter_getflags)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getbeginatomidx,_wrap_OBMolBondBFSIter_GetBeginAtomIdx,swig_arginfo_obmolbondbfsiter_getbeginatomidx)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getendatomidx,_wrap_OBMolBondBFSIter_GetEndAtomIdx,swig_arginfo_obmolbondbfsiter_getendatomidx)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getbeginatom,_wrap_OBMolBondBFSIter_GetBeginAtom,swig_arginfo_obmolbondbfsiter_getbeginatom)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getendatom,_wrap_OBMolBondBFSIter_GetEndAtom,swig_arginfo_obmolbondbfsiter_getendatom)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getnbratom,_wrap_OBMolBondBFSIter_GetNbrAtom,swig_arginfo_obmolbondbfsiter_getnbratom)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getparent,_wrap_OBMolBondBFSIter_GetParent,swig_arginfo_obmolbondbfsiter_getparent)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getequiblength,_wrap_OBMolBondBFSIter_GetEquibLength,swig_arginfo_obmolbondbfsiter_getequiblength)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getlength,_wrap_OBMolBondBFSIter_GetLength,swig_arginfo_obmolbondbfsiter_getlength)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getnbratomidx,_wrap_OBMolBondBFSIter_GetNbrAtomIdx,swig_arginfo_obmolbondbfsiter_getnbratomidx)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_findsmallestring,_wrap_OBMolBondBFSIter_FindSmallestRing,swig_arginfo_obmolbondbfsiter_findsmallestring)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isaromatic,_wrap_OBMolBondBFSIter_IsAromatic,swig_arginfo_obmolbondbfsiter_isaromatic)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isinring,_wrap_OBMolBondBFSIter_IsInRing,swig_arginfo_obmolbondbfsiter_isinring)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isrotor,_wrap_OBMolBondBFSIter_IsRotor,swig_arginfo_obmolbondbfsiter_isrotor)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isamide,_wrap_OBMolBondBFSIter_IsAmide,swig_arginfo_obmolbondbfsiter_isamide)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isprimaryamide,_wrap_OBMolBondBFSIter_IsPrimaryAmide,swig_arginfo_obmolbondbfsiter_isprimaryamide)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_issecondaryamide,_wrap_OBMolBondBFSIter_IsSecondaryAmide,swig_arginfo_obmolbondbfsiter_issecondaryamide)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_istertiaryamide,_wrap_OBMolBondBFSIter_IsTertiaryAmide,swig_arginfo_obmolbondbfsiter_istertiaryamide)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isester,_wrap_OBMolBondBFSIter_IsEster,swig_arginfo_obmolbondbfsiter_isester)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_iscarbonyl,_wrap_OBMolBondBFSIter_IsCarbonyl,swig_arginfo_obmolbondbfsiter_iscarbonyl)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_issingle,_wrap_OBMolBondBFSIter_IsSingle,swig_arginfo_obmolbondbfsiter_issingle)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isdouble,_wrap_OBMolBondBFSIter_IsDouble,swig_arginfo_obmolbondbfsiter_isdouble)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_istriple,_wrap_OBMolBondBFSIter_IsTriple,swig_arginfo_obmolbondbfsiter_istriple)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isksingle,_wrap_OBMolBondBFSIter_IsKSingle,swig_arginfo_obmolbondbfsiter_isksingle)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_iskdouble,_wrap_OBMolBondBFSIter_IsKDouble,swig_arginfo_obmolbondbfsiter_iskdouble)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isktriple,_wrap_OBMolBondBFSIter_IsKTriple,swig_arginfo_obmolbondbfsiter_isktriple)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isclosure,_wrap_OBMolBondBFSIter_IsClosure,swig_arginfo_obmolbondbfsiter_isclosure)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isup,_wrap_OBMolBondBFSIter_IsUp,swig_arginfo_obmolbondbfsiter_isup)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isdown,_wrap_OBMolBondBFSIter_IsDown,swig_arginfo_obmolbondbfsiter_isdown)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_iswedge,_wrap_OBMolBondBFSIter_IsWedge,swig_arginfo_obmolbondbfsiter_iswedge)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_ishash,_wrap_OBMolBondBFSIter_IsHash,swig_arginfo_obmolbondbfsiter_ishash)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_iswedgeorhash,_wrap_OBMolBondBFSIter_IsWedgeOrHash,swig_arginfo_obmolbondbfsiter_iswedgeorhash)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_iscisortrans,_wrap_OBMolBondBFSIter_IsCisOrTrans,swig_arginfo_obmolbondbfsiter_iscisortrans)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_isdoublebondgeometry,_wrap_OBMolBondBFSIter_IsDoubleBondGeometry,swig_arginfo_obmolbondbfsiter_isdoublebondgeometry)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_clear,_wrap_OBMolBondBFSIter_Clear,swig_arginfo_obmolbondbfsiter_clear)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_dotransformations,_wrap_OBMolBondBFSIter_DoTransformations,swig_arginfo_obmolbondbfsiter_dotransformations)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_classdescription,_wrap_OBMolBondBFSIter_ClassDescription,swig_arginfo_obmolbondbfsiter_classdescription)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_gettitle,_wrap_OBMolBondBFSIter_GetTitle,swig_arginfo_obmolbondbfsiter_gettitle)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_settitle,_wrap_OBMolBondBFSIter_SetTitle,swig_arginfo_obmolbondbfsiter_settitle)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_hasdata,_wrap_OBMolBondBFSIter_HasData,swig_arginfo_obmolbondbfsiter_hasdata)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_deletedata,_wrap_OBMolBondBFSIter_DeleteData,swig_arginfo_obmolbondbfsiter_deletedata)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_clonedata,_wrap_OBMolBondBFSIter_CloneData,swig_arginfo_obmolbondbfsiter_clonedata)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_datasize,_wrap_OBMolBondBFSIter_DataSize,swig_arginfo_obmolbondbfsiter_datasize)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getdata,_wrap_OBMolBondBFSIter_GetData,swig_arginfo_obmolbondbfsiter_getdata)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_getalldata,_wrap_OBMolBondBFSIter_GetAllData,swig_arginfo_obmolbondbfsiter_getalldata)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_begindata,_wrap_OBMolBondBFSIter_BeginData,swig_arginfo_obmolbondbfsiter_begindata)
 SWIG_ZEND_NAMED_FE(obmolbondbfsiter_enddata,_wrap_OBMolBondBFSIter_EndData,swig_arginfo_obmolbondbfsiter_enddata)
 SWIG_ZEND_NAMED_FE(new_obmolbonditer,_wrap_new_OBMolBondIter,swig_arginfo_new_obmolbonditer)
 SWIG_ZEND_NAMED_FE(obmolbonditer___deref__,_wrap_OBMolBondIter___deref__,swig_arginfo_obmolbonditer___deref__)
 SWIG_ZEND_NAMED_FE(obmolbonditer___ref__,_wrap_OBMolBondIter___ref__,swig_arginfo_obmolbonditer___ref__)
 SWIG_ZEND_NAMED_FE(obmolbonditer_visit_set,_wrap_OBMolBondIter_Visit_set,swig_arginfo_obmolbonditer_visit_set)
 SWIG_ZEND_NAMED_FE(obmolbonditer_visit_get,_wrap_OBMolBondIter_Visit_get,swig_arginfo_obmolbonditer_visit_get)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setidx,_wrap_OBMolBondIter_SetIdx,swig_arginfo_obmolbonditer_setidx)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setid,_wrap_OBMolBondIter_SetId,swig_arginfo_obmolbonditer_setid)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setbo,_wrap_OBMolBondIter_SetBO,swig_arginfo_obmolbonditer_setbo)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setbondorder,_wrap_OBMolBondIter_SetBondOrder,swig_arginfo_obmolbonditer_setbondorder)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setbegin,_wrap_OBMolBondIter_SetBegin,swig_arginfo_obmolbonditer_setbegin)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setend,_wrap_OBMolBondIter_SetEnd,swig_arginfo_obmolbonditer_setend)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setparent,_wrap_OBMolBondIter_SetParent,swig_arginfo_obmolbonditer_setparent)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setlength,_wrap_OBMolBondIter_SetLength,swig_arginfo_obmolbonditer_setlength)
 SWIG_ZEND_NAMED_FE(obmolbonditer_set,_wrap_OBMolBondIter_Set,swig_arginfo_obmolbonditer_set)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setksingle,_wrap_OBMolBondIter_SetKSingle,swig_arginfo_obmolbonditer_setksingle)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setkdouble,_wrap_OBMolBondIter_SetKDouble,swig_arginfo_obmolbonditer_setkdouble)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setktriple,_wrap_OBMolBondIter_SetKTriple,swig_arginfo_obmolbonditer_setktriple)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setaromatic,_wrap_OBMolBondIter_SetAromatic,swig_arginfo_obmolbonditer_setaromatic)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setwedge,_wrap_OBMolBondIter_SetWedge,swig_arginfo_obmolbonditer_setwedge)
 SWIG_ZEND_NAMED_FE(obmolbonditer_sethash,_wrap_OBMolBondIter_SetHash,swig_arginfo_obmolbonditer_sethash)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setwedgeorhash,_wrap_OBMolBondIter_SetWedgeOrHash,swig_arginfo_obmolbonditer_setwedgeorhash)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setup,_wrap_OBMolBondIter_SetUp,swig_arginfo_obmolbonditer_setup)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setdown,_wrap_OBMolBondIter_SetDown,swig_arginfo_obmolbonditer_setdown)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setinring,_wrap_OBMolBondIter_SetInRing,swig_arginfo_obmolbonditer_setinring)
 SWIG_ZEND_NAMED_FE(obmolbonditer_setclosure,_wrap_OBMolBondIter_SetClosure,swig_arginfo_obmolbonditer_setclosure)
 SWIG_ZEND_NAMED_FE(obmolbonditer_unsethash,_wrap_OBMolBondIter_UnsetHash,swig_arginfo_obmolbonditer_unsethash)
 SWIG_ZEND_NAMED_FE(obmolbonditer_unsetwedge,_wrap_OBMolBondIter_UnsetWedge,swig_arginfo_obmolbonditer_unsetwedge)
 SWIG_ZEND_NAMED_FE(obmolbonditer_unsetup,_wrap_OBMolBondIter_UnsetUp,swig_arginfo_obmolbonditer_unsetup)
 SWIG_ZEND_NAMED_FE(obmolbonditer_unsetdown,_wrap_OBMolBondIter_UnsetDown,swig_arginfo_obmolbonditer_unsetdown)
 SWIG_ZEND_NAMED_FE(obmolbonditer_unsetaromatic,_wrap_OBMolBondIter_UnsetAromatic,swig_arginfo_obmolbonditer_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obmolbonditer_unsetkekule,_wrap_OBMolBondIter_UnsetKekule,swig_arginfo_obmolbonditer_unsetkekule)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getidx,_wrap_OBMolBondIter_GetIdx,swig_arginfo_obmolbonditer_getidx)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getid,_wrap_OBMolBondIter_GetId,swig_arginfo_obmolbonditer_getid)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getbo,_wrap_OBMolBondIter_GetBO,swig_arginfo_obmolbonditer_getbo)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getbondorder,_wrap_OBMolBondIter_GetBondOrder,swig_arginfo_obmolbonditer_getbondorder)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getflags,_wrap_OBMolBondIter_GetFlags,swig_arginfo_obmolbonditer_getflags)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getbeginatomidx,_wrap_OBMolBondIter_GetBeginAtomIdx,swig_arginfo_obmolbonditer_getbeginatomidx)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getendatomidx,_wrap_OBMolBondIter_GetEndAtomIdx,swig_arginfo_obmolbonditer_getendatomidx)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getbeginatom,_wrap_OBMolBondIter_GetBeginAtom,swig_arginfo_obmolbonditer_getbeginatom)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getendatom,_wrap_OBMolBondIter_GetEndAtom,swig_arginfo_obmolbonditer_getendatom)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getnbratom,_wrap_OBMolBondIter_GetNbrAtom,swig_arginfo_obmolbonditer_getnbratom)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getparent,_wrap_OBMolBondIter_GetParent,swig_arginfo_obmolbonditer_getparent)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getequiblength,_wrap_OBMolBondIter_GetEquibLength,swig_arginfo_obmolbonditer_getequiblength)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getlength,_wrap_OBMolBondIter_GetLength,swig_arginfo_obmolbonditer_getlength)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getnbratomidx,_wrap_OBMolBondIter_GetNbrAtomIdx,swig_arginfo_obmolbonditer_getnbratomidx)
 SWIG_ZEND_NAMED_FE(obmolbonditer_findsmallestring,_wrap_OBMolBondIter_FindSmallestRing,swig_arginfo_obmolbonditer_findsmallestring)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isaromatic,_wrap_OBMolBondIter_IsAromatic,swig_arginfo_obmolbonditer_isaromatic)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isinring,_wrap_OBMolBondIter_IsInRing,swig_arginfo_obmolbonditer_isinring)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isrotor,_wrap_OBMolBondIter_IsRotor,swig_arginfo_obmolbonditer_isrotor)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isamide,_wrap_OBMolBondIter_IsAmide,swig_arginfo_obmolbonditer_isamide)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isprimaryamide,_wrap_OBMolBondIter_IsPrimaryAmide,swig_arginfo_obmolbonditer_isprimaryamide)
 SWIG_ZEND_NAMED_FE(obmolbonditer_issecondaryamide,_wrap_OBMolBondIter_IsSecondaryAmide,swig_arginfo_obmolbonditer_issecondaryamide)
 SWIG_ZEND_NAMED_FE(obmolbonditer_istertiaryamide,_wrap_OBMolBondIter_IsTertiaryAmide,swig_arginfo_obmolbonditer_istertiaryamide)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isester,_wrap_OBMolBondIter_IsEster,swig_arginfo_obmolbonditer_isester)
 SWIG_ZEND_NAMED_FE(obmolbonditer_iscarbonyl,_wrap_OBMolBondIter_IsCarbonyl,swig_arginfo_obmolbonditer_iscarbonyl)
 SWIG_ZEND_NAMED_FE(obmolbonditer_issingle,_wrap_OBMolBondIter_IsSingle,swig_arginfo_obmolbonditer_issingle)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isdouble,_wrap_OBMolBondIter_IsDouble,swig_arginfo_obmolbonditer_isdouble)
 SWIG_ZEND_NAMED_FE(obmolbonditer_istriple,_wrap_OBMolBondIter_IsTriple,swig_arginfo_obmolbonditer_istriple)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isksingle,_wrap_OBMolBondIter_IsKSingle,swig_arginfo_obmolbonditer_isksingle)
 SWIG_ZEND_NAMED_FE(obmolbonditer_iskdouble,_wrap_OBMolBondIter_IsKDouble,swig_arginfo_obmolbonditer_iskdouble)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isktriple,_wrap_OBMolBondIter_IsKTriple,swig_arginfo_obmolbonditer_isktriple)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isclosure,_wrap_OBMolBondIter_IsClosure,swig_arginfo_obmolbonditer_isclosure)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isup,_wrap_OBMolBondIter_IsUp,swig_arginfo_obmolbonditer_isup)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isdown,_wrap_OBMolBondIter_IsDown,swig_arginfo_obmolbonditer_isdown)
 SWIG_ZEND_NAMED_FE(obmolbonditer_iswedge,_wrap_OBMolBondIter_IsWedge,swig_arginfo_obmolbonditer_iswedge)
 SWIG_ZEND_NAMED_FE(obmolbonditer_ishash,_wrap_OBMolBondIter_IsHash,swig_arginfo_obmolbonditer_ishash)
 SWIG_ZEND_NAMED_FE(obmolbonditer_iswedgeorhash,_wrap_OBMolBondIter_IsWedgeOrHash,swig_arginfo_obmolbonditer_iswedgeorhash)
 SWIG_ZEND_NAMED_FE(obmolbonditer_iscisortrans,_wrap_OBMolBondIter_IsCisOrTrans,swig_arginfo_obmolbonditer_iscisortrans)
 SWIG_ZEND_NAMED_FE(obmolbonditer_isdoublebondgeometry,_wrap_OBMolBondIter_IsDoubleBondGeometry,swig_arginfo_obmolbonditer_isdoublebondgeometry)
 SWIG_ZEND_NAMED_FE(obmolbonditer_clear,_wrap_OBMolBondIter_Clear,swig_arginfo_obmolbonditer_clear)
 SWIG_ZEND_NAMED_FE(obmolbonditer_dotransformations,_wrap_OBMolBondIter_DoTransformations,swig_arginfo_obmolbonditer_dotransformations)
 SWIG_ZEND_NAMED_FE(obmolbonditer_classdescription,_wrap_OBMolBondIter_ClassDescription,swig_arginfo_obmolbonditer_classdescription)
 SWIG_ZEND_NAMED_FE(obmolbonditer_gettitle,_wrap_OBMolBondIter_GetTitle,swig_arginfo_obmolbonditer_gettitle)
 SWIG_ZEND_NAMED_FE(obmolbonditer_settitle,_wrap_OBMolBondIter_SetTitle,swig_arginfo_obmolbonditer_settitle)
 SWIG_ZEND_NAMED_FE(obmolbonditer_hasdata,_wrap_OBMolBondIter_HasData,swig_arginfo_obmolbonditer_hasdata)
 SWIG_ZEND_NAMED_FE(obmolbonditer_deletedata,_wrap_OBMolBondIter_DeleteData,swig_arginfo_obmolbonditer_deletedata)
 SWIG_ZEND_NAMED_FE(obmolbonditer_clonedata,_wrap_OBMolBondIter_CloneData,swig_arginfo_obmolbonditer_clonedata)
 SWIG_ZEND_NAMED_FE(obmolbonditer_datasize,_wrap_OBMolBondIter_DataSize,swig_arginfo_obmolbonditer_datasize)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getdata,_wrap_OBMolBondIter_GetData,swig_arginfo_obmolbonditer_getdata)
 SWIG_ZEND_NAMED_FE(obmolbonditer_getalldata,_wrap_OBMolBondIter_GetAllData,swig_arginfo_obmolbonditer_getalldata)
 SWIG_ZEND_NAMED_FE(obmolbonditer_begindata,_wrap_OBMolBondIter_BeginData,swig_arginfo_obmolbonditer_begindata)
 SWIG_ZEND_NAMED_FE(obmolbonditer_enddata,_wrap_OBMolBondIter_EndData,swig_arginfo_obmolbonditer_enddata)
 SWIG_ZEND_NAMED_FE(new_obatomatomiter,_wrap_new_OBAtomAtomIter,swig_arginfo_new_obatomatomiter)
 SWIG_ZEND_NAMED_FE(obatomatomiter___deref__,_wrap_OBAtomAtomIter___deref__,swig_arginfo_obatomatomiter___deref__)
 SWIG_ZEND_NAMED_FE(obatomatomiter___ref__,_wrap_OBAtomAtomIter___ref__,swig_arginfo_obatomatomiter___ref__)
 SWIG_ZEND_NAMED_FE(obatomatomiter_visit_set,_wrap_OBAtomAtomIter_Visit_set,swig_arginfo_obatomatomiter_visit_set)
 SWIG_ZEND_NAMED_FE(obatomatomiter_visit_get,_wrap_OBAtomAtomIter_Visit_get,swig_arginfo_obatomatomiter_visit_get)
 SWIG_ZEND_NAMED_FE(obatomatomiter_duplicate,_wrap_OBAtomAtomIter_Duplicate,swig_arginfo_obatomatomiter_duplicate)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setidx,_wrap_OBAtomAtomIter_SetIdx,swig_arginfo_obatomatomiter_setidx)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setid,_wrap_OBAtomAtomIter_SetId,swig_arginfo_obatomatomiter_setid)
 SWIG_ZEND_NAMED_FE(obatomatomiter_sethyb,_wrap_OBAtomAtomIter_SetHyb,swig_arginfo_obatomatomiter_sethyb)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setatomicnum,_wrap_OBAtomAtomIter_SetAtomicNum,swig_arginfo_obatomatomiter_setatomicnum)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setisotope,_wrap_OBAtomAtomIter_SetIsotope,swig_arginfo_obatomatomiter_setisotope)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setimplicitvalence,_wrap_OBAtomAtomIter_SetImplicitValence,swig_arginfo_obatomatomiter_setimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatomatomiter_incrementimplicitvalence,_wrap_OBAtomAtomIter_IncrementImplicitValence,swig_arginfo_obatomatomiter_incrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatomatomiter_decrementimplicitvalence,_wrap_OBAtomAtomIter_DecrementImplicitValence,swig_arginfo_obatomatomiter_decrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setformalcharge,_wrap_OBAtomAtomIter_SetFormalCharge,swig_arginfo_obatomatomiter_setformalcharge)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setspinmultiplicity,_wrap_OBAtomAtomIter_SetSpinMultiplicity,swig_arginfo_obatomatomiter_setspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obatomatomiter_settype,_wrap_OBAtomAtomIter_SetType,swig_arginfo_obatomatomiter_settype)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setpartialcharge,_wrap_OBAtomAtomIter_SetPartialCharge,swig_arginfo_obatomatomiter_setpartialcharge)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setvector,_wrap_OBAtomAtomIter_SetVector,swig_arginfo_obatomatomiter_setvector)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setcoordptr,_wrap_OBAtomAtomIter_SetCoordPtr,swig_arginfo_obatomatomiter_setcoordptr)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setresidue,_wrap_OBAtomAtomIter_SetResidue,swig_arginfo_obatomatomiter_setresidue)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setparent,_wrap_OBAtomAtomIter_SetParent,swig_arginfo_obatomatomiter_setparent)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setaromatic,_wrap_OBAtomAtomIter_SetAromatic,swig_arginfo_obatomatomiter_setaromatic)
 SWIG_ZEND_NAMED_FE(obatomatomiter_unsetaromatic,_wrap_OBAtomAtomIter_UnsetAromatic,swig_arginfo_obatomatomiter_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setclockwisestereo,_wrap_OBAtomAtomIter_SetClockwiseStereo,swig_arginfo_obatomatomiter_setclockwisestereo)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setanticlockwisestereo,_wrap_OBAtomAtomIter_SetAntiClockwiseStereo,swig_arginfo_obatomatomiter_setanticlockwisestereo)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setpositivestereo,_wrap_OBAtomAtomIter_SetPositiveStereo,swig_arginfo_obatomatomiter_setpositivestereo)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setnegativestereo,_wrap_OBAtomAtomIter_SetNegativeStereo,swig_arginfo_obatomatomiter_setnegativestereo)
 SWIG_ZEND_NAMED_FE(obatomatomiter_unsetstereo,_wrap_OBAtomAtomIter_UnsetStereo,swig_arginfo_obatomatomiter_unsetstereo)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setinring,_wrap_OBAtomAtomIter_SetInRing,swig_arginfo_obatomatomiter_setinring)
 SWIG_ZEND_NAMED_FE(obatomatomiter_setchiral,_wrap_OBAtomAtomIter_SetChiral,swig_arginfo_obatomatomiter_setchiral)
 SWIG_ZEND_NAMED_FE(obatomatomiter_clearcoordptr,_wrap_OBAtomAtomIter_ClearCoordPtr,swig_arginfo_obatomatomiter_clearcoordptr)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getformalcharge,_wrap_OBAtomAtomIter_GetFormalCharge,swig_arginfo_obatomatomiter_getformalcharge)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getatomicnum,_wrap_OBAtomAtomIter_GetAtomicNum,swig_arginfo_obatomatomiter_getatomicnum)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getisotope,_wrap_OBAtomAtomIter_GetIsotope,swig_arginfo_obatomatomiter_getisotope)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getspinmultiplicity,_wrap_OBAtomAtomIter_GetSpinMultiplicity,swig_arginfo_obatomatomiter_getspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getatomicmass,_wrap_OBAtomAtomIter_GetAtomicMass,swig_arginfo_obatomatomiter_getatomicmass)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getexactmass,_wrap_OBAtomAtomIter_GetExactMass,swig_arginfo_obatomatomiter_getexactmass)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getidx,_wrap_OBAtomAtomIter_GetIdx,swig_arginfo_obatomatomiter_getidx)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getindex,_wrap_OBAtomAtomIter_GetIndex,swig_arginfo_obatomatomiter_getindex)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getid,_wrap_OBAtomAtomIter_GetId,swig_arginfo_obatomatomiter_getid)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getcoordinateidx,_wrap_OBAtomAtomIter_GetCoordinateIdx,swig_arginfo_obatomatomiter_getcoordinateidx)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getcidx,_wrap_OBAtomAtomIter_GetCIdx,swig_arginfo_obatomatomiter_getcidx)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getvalence,_wrap_OBAtomAtomIter_GetValence,swig_arginfo_obatomatomiter_getvalence)
 SWIG_ZEND_NAMED_FE(obatomatomiter_gethyb,_wrap_OBAtomAtomIter_GetHyb,swig_arginfo_obatomatomiter_gethyb)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getimplicitvalence,_wrap_OBAtomAtomIter_GetImplicitValence,swig_arginfo_obatomatomiter_getimplicitvalence)
 SWIG_ZEND_NAMED_FE(obatomatomiter_gethvyvalence,_wrap_OBAtomAtomIter_GetHvyValence,swig_arginfo_obatomatomiter_gethvyvalence)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getheterovalence,_wrap_OBAtomAtomIter_GetHeteroValence,swig_arginfo_obatomatomiter_getheterovalence)
 SWIG_ZEND_NAMED_FE(obatomatomiter_gettype,_wrap_OBAtomAtomIter_GetType,swig_arginfo_obatomatomiter_gettype)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getx,_wrap_OBAtomAtomIter_GetX,swig_arginfo_obatomatomiter_getx)
 SWIG_ZEND_NAMED_FE(obatomatomiter_gety,_wrap_OBAtomAtomIter_GetY,swig_arginfo_obatomatomiter_gety)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getz,_wrap_OBAtomAtomIter_GetZ,swig_arginfo_obatomatomiter_getz)
 SWIG_ZEND_NAMED_FE(obatomatomiter_x,_wrap_OBAtomAtomIter_x,swig_arginfo_obatomatomiter_x)
 SWIG_ZEND_NAMED_FE(obatomatomiter_y,_wrap_OBAtomAtomIter_y,swig_arginfo_obatomatomiter_y)
 SWIG_ZEND_NAMED_FE(obatomatomiter_z,_wrap_OBAtomAtomIter_z,swig_arginfo_obatomatomiter_z)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getcoordinate,_wrap_OBAtomAtomIter_GetCoordinate,swig_arginfo_obatomatomiter_getcoordinate)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getvector,_wrap_OBAtomAtomIter_GetVector,swig_arginfo_obatomatomiter_getvector)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getpartialcharge,_wrap_OBAtomAtomIter_GetPartialCharge,swig_arginfo_obatomatomiter_getpartialcharge)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getresidue,_wrap_OBAtomAtomIter_GetResidue,swig_arginfo_obatomatomiter_getresidue)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getparent,_wrap_OBAtomAtomIter_GetParent,swig_arginfo_obatomatomiter_getparent)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getnewbondvector,_wrap_OBAtomAtomIter_GetNewBondVector,swig_arginfo_obatomatomiter_getnewbondvector)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getbond,_wrap_OBAtomAtomIter_GetBond,swig_arginfo_obatomatomiter_getbond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getnextatom,_wrap_OBAtomAtomIter_GetNextAtom,swig_arginfo_obatomatomiter_getnextatom)
 SWIG_ZEND_NAMED_FE(obatomatomiter_beginbonds,_wrap_OBAtomAtomIter_BeginBonds,swig_arginfo_obatomatomiter_beginbonds)
 SWIG_ZEND_NAMED_FE(obatomatomiter_endbonds,_wrap_OBAtomAtomIter_EndBonds,swig_arginfo_obatomatomiter_endbonds)
 SWIG_ZEND_NAMED_FE(obatomatomiter_beginbond,_wrap_OBAtomAtomIter_BeginBond,swig_arginfo_obatomatomiter_beginbond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_nextbond,_wrap_OBAtomAtomIter_NextBond,swig_arginfo_obatomatomiter_nextbond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_beginnbratom,_wrap_OBAtomAtomIter_BeginNbrAtom,swig_arginfo_obatomatomiter_beginnbratom)
 SWIG_ZEND_NAMED_FE(obatomatomiter_nextnbratom,_wrap_OBAtomAtomIter_NextNbrAtom,swig_arginfo_obatomatomiter_nextnbratom)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getdistance,_wrap_OBAtomAtomIter_GetDistance,swig_arginfo_obatomatomiter_getdistance)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getangle,_wrap_OBAtomAtomIter_GetAngle,swig_arginfo_obatomatomiter_getangle)
 SWIG_ZEND_NAMED_FE(obatomatomiter_newresidue,_wrap_OBAtomAtomIter_NewResidue,swig_arginfo_obatomatomiter_newresidue)
 SWIG_ZEND_NAMED_FE(obatomatomiter_addresidue,_wrap_OBAtomAtomIter_AddResidue,swig_arginfo_obatomatomiter_addresidue)
 SWIG_ZEND_NAMED_FE(obatomatomiter_deleteresidue,_wrap_OBAtomAtomIter_DeleteResidue,swig_arginfo_obatomatomiter_deleteresidue)
 SWIG_ZEND_NAMED_FE(obatomatomiter_addbond,_wrap_OBAtomAtomIter_AddBond,swig_arginfo_obatomatomiter_addbond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_insertbond,_wrap_OBAtomAtomIter_InsertBond,swig_arginfo_obatomatomiter_insertbond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_deletebond,_wrap_OBAtomAtomIter_DeleteBond,swig_arginfo_obatomatomiter_deletebond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_clearbond,_wrap_OBAtomAtomIter_ClearBond,swig_arginfo_obatomatomiter_clearbond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_htomethyl,_wrap_OBAtomAtomIter_HtoMethyl,swig_arginfo_obatomatomiter_htomethyl)
 SWIG_ZEND_NAMED_FE(obatomatomiter_sethybandgeom,_wrap_OBAtomAtomIter_SetHybAndGeom,swig_arginfo_obatomatomiter_sethybandgeom)
 SWIG_ZEND_NAMED_FE(obatomatomiter_forcenoh,_wrap_OBAtomAtomIter_ForceNoH,swig_arginfo_obatomatomiter_forcenoh)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasnohforced,_wrap_OBAtomAtomIter_HasNoHForced,swig_arginfo_obatomatomiter_hasnohforced)
 SWIG_ZEND_NAMED_FE(obatomatomiter_forceimplh,_wrap_OBAtomAtomIter_ForceImplH,swig_arginfo_obatomatomiter_forceimplh)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasimplhforced,_wrap_OBAtomAtomIter_HasImplHForced,swig_arginfo_obatomatomiter_hasimplhforced)
 SWIG_ZEND_NAMED_FE(obatomatomiter_countfreeoxygens,_wrap_OBAtomAtomIter_CountFreeOxygens,swig_arginfo_obatomatomiter_countfreeoxygens)
 SWIG_ZEND_NAMED_FE(obatomatomiter_countfreesulfurs,_wrap_OBAtomAtomIter_CountFreeSulfurs,swig_arginfo_obatomatomiter_countfreesulfurs)
 SWIG_ZEND_NAMED_FE(obatomatomiter_implicithydrogencount,_wrap_OBAtomAtomIter_ImplicitHydrogenCount,swig_arginfo_obatomatomiter_implicithydrogencount)
 SWIG_ZEND_NAMED_FE(obatomatomiter_explicithydrogencount,_wrap_OBAtomAtomIter_ExplicitHydrogenCount,swig_arginfo_obatomatomiter_explicithydrogencount)
 SWIG_ZEND_NAMED_FE(obatomatomiter_memberofringcount,_wrap_OBAtomAtomIter_MemberOfRingCount,swig_arginfo_obatomatomiter_memberofringcount)
 SWIG_ZEND_NAMED_FE(obatomatomiter_memberofringsize,_wrap_OBAtomAtomIter_MemberOfRingSize,swig_arginfo_obatomatomiter_memberofringsize)
 SWIG_ZEND_NAMED_FE(obatomatomiter_countringbonds,_wrap_OBAtomAtomIter_CountRingBonds,swig_arginfo_obatomatomiter_countringbonds)
 SWIG_ZEND_NAMED_FE(obatomatomiter_smallestbondangle,_wrap_OBAtomAtomIter_SmallestBondAngle,swig_arginfo_obatomatomiter_smallestbondangle)
 SWIG_ZEND_NAMED_FE(obatomatomiter_averagebondangle,_wrap_OBAtomAtomIter_AverageBondAngle,swig_arginfo_obatomatomiter_averagebondangle)
 SWIG_ZEND_NAMED_FE(obatomatomiter_bosum,_wrap_OBAtomAtomIter_BOSum,swig_arginfo_obatomatomiter_bosum)
 SWIG_ZEND_NAMED_FE(obatomatomiter_kbosum,_wrap_OBAtomAtomIter_KBOSum,swig_arginfo_obatomatomiter_kbosum)
 SWIG_ZEND_NAMED_FE(obatomatomiter_lewisacidbasecounts,_wrap_OBAtomAtomIter_LewisAcidBaseCounts,swig_arginfo_obatomatomiter_lewisacidbasecounts)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasresidue,_wrap_OBAtomAtomIter_HasResidue,swig_arginfo_obatomatomiter_hasresidue)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ishetatom,_wrap_OBAtomAtomIter_IsHetAtom,swig_arginfo_obatomatomiter_ishetatom)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ishydrogen,_wrap_OBAtomAtomIter_IsHydrogen,swig_arginfo_obatomatomiter_ishydrogen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_iscarbon,_wrap_OBAtomAtomIter_IsCarbon,swig_arginfo_obatomatomiter_iscarbon)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isnitrogen,_wrap_OBAtomAtomIter_IsNitrogen,swig_arginfo_obatomatomiter_isnitrogen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isoxygen,_wrap_OBAtomAtomIter_IsOxygen,swig_arginfo_obatomatomiter_isoxygen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_issulfur,_wrap_OBAtomAtomIter_IsSulfur,swig_arginfo_obatomatomiter_issulfur)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isphosphorus,_wrap_OBAtomAtomIter_IsPhosphorus,swig_arginfo_obatomatomiter_isphosphorus)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isaromatic,_wrap_OBAtomAtomIter_IsAromatic,swig_arginfo_obatomatomiter_isaromatic)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isinring,_wrap_OBAtomAtomIter_IsInRing,swig_arginfo_obatomatomiter_isinring)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isinringsize,_wrap_OBAtomAtomIter_IsInRingSize,swig_arginfo_obatomatomiter_isinringsize)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isheteroatom,_wrap_OBAtomAtomIter_IsHeteroatom,swig_arginfo_obatomatomiter_isheteroatom)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isnotcorh,_wrap_OBAtomAtomIter_IsNotCorH,swig_arginfo_obatomatomiter_isnotcorh)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isconnected,_wrap_OBAtomAtomIter_IsConnected,swig_arginfo_obatomatomiter_isconnected)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isonethree,_wrap_OBAtomAtomIter_IsOneThree,swig_arginfo_obatomatomiter_isonethree)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isonefour,_wrap_OBAtomAtomIter_IsOneFour,swig_arginfo_obatomatomiter_isonefour)
 SWIG_ZEND_NAMED_FE(obatomatomiter_iscarboxyloxygen,_wrap_OBAtomAtomIter_IsCarboxylOxygen,swig_arginfo_obatomatomiter_iscarboxyloxygen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isphosphateoxygen,_wrap_OBAtomAtomIter_IsPhosphateOxygen,swig_arginfo_obatomatomiter_isphosphateoxygen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_issulfateoxygen,_wrap_OBAtomAtomIter_IsSulfateOxygen,swig_arginfo_obatomatomiter_issulfateoxygen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isnitrooxygen,_wrap_OBAtomAtomIter_IsNitroOxygen,swig_arginfo_obatomatomiter_isnitrooxygen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isamidenitrogen,_wrap_OBAtomAtomIter_IsAmideNitrogen,swig_arginfo_obatomatomiter_isamidenitrogen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ispolarhydrogen,_wrap_OBAtomAtomIter_IsPolarHydrogen,swig_arginfo_obatomatomiter_ispolarhydrogen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isnonpolarhydrogen,_wrap_OBAtomAtomIter_IsNonPolarHydrogen,swig_arginfo_obatomatomiter_isnonpolarhydrogen)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isaromaticnoxide,_wrap_OBAtomAtomIter_IsAromaticNOxide,swig_arginfo_obatomatomiter_isaromaticnoxide)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ischiral,_wrap_OBAtomAtomIter_IsChiral,swig_arginfo_obatomatomiter_ischiral)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isaxial,_wrap_OBAtomAtomIter_IsAxial,swig_arginfo_obatomatomiter_isaxial)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isclockwise,_wrap_OBAtomAtomIter_IsClockwise,swig_arginfo_obatomatomiter_isclockwise)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isanticlockwise,_wrap_OBAtomAtomIter_IsAntiClockwise,swig_arginfo_obatomatomiter_isanticlockwise)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ispositivestereo,_wrap_OBAtomAtomIter_IsPositiveStereo,swig_arginfo_obatomatomiter_ispositivestereo)
 SWIG_ZEND_NAMED_FE(obatomatomiter_isnegativestereo,_wrap_OBAtomAtomIter_IsNegativeStereo,swig_arginfo_obatomatomiter_isnegativestereo)
 SWIG_ZEND_NAMED_FE(obatomatomiter_haschiralityspecified,_wrap_OBAtomAtomIter_HasChiralitySpecified,swig_arginfo_obatomatomiter_haschiralityspecified)
 SWIG_ZEND_NAMED_FE(obatomatomiter_haschiralvolume,_wrap_OBAtomAtomIter_HasChiralVolume,swig_arginfo_obatomatomiter_haschiralvolume)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ishbondacceptor,_wrap_OBAtomAtomIter_IsHbondAcceptor,swig_arginfo_obatomatomiter_ishbondacceptor)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ishbondacceptorsimple,_wrap_OBAtomAtomIter_IsHbondAcceptorSimple,swig_arginfo_obatomatomiter_ishbondacceptorsimple)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ishbonddonor,_wrap_OBAtomAtomIter_IsHbondDonor,swig_arginfo_obatomatomiter_ishbonddonor)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ishbonddonorh,_wrap_OBAtomAtomIter_IsHbondDonorH,swig_arginfo_obatomatomiter_ishbonddonorh)
 SWIG_ZEND_NAMED_FE(obatomatomiter_ismetal,_wrap_OBAtomAtomIter_IsMetal,swig_arginfo_obatomatomiter_ismetal)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasalphabetaunsat,_wrap_OBAtomAtomIter_HasAlphaBetaUnsat,swig_arginfo_obatomatomiter_hasalphabetaunsat)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasbondoforder,_wrap_OBAtomAtomIter_HasBondOfOrder,swig_arginfo_obatomatomiter_hasbondoforder)
 SWIG_ZEND_NAMED_FE(obatomatomiter_countbondsoforder,_wrap_OBAtomAtomIter_CountBondsOfOrder,swig_arginfo_obatomatomiter_countbondsoforder)
 SWIG_ZEND_NAMED_FE(obatomatomiter_highestbondorder,_wrap_OBAtomAtomIter_HighestBondOrder,swig_arginfo_obatomatomiter_highestbondorder)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasnonsinglebond,_wrap_OBAtomAtomIter_HasNonSingleBond,swig_arginfo_obatomatomiter_hasnonsinglebond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hassinglebond,_wrap_OBAtomAtomIter_HasSingleBond,swig_arginfo_obatomatomiter_hassinglebond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasdoublebond,_wrap_OBAtomAtomIter_HasDoubleBond,swig_arginfo_obatomatomiter_hasdoublebond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasaromaticbond,_wrap_OBAtomAtomIter_HasAromaticBond,swig_arginfo_obatomatomiter_hasaromaticbond)
 SWIG_ZEND_NAMED_FE(obatomatomiter_matchessmarts,_wrap_OBAtomAtomIter_MatchesSMARTS,swig_arginfo_obatomatomiter_matchessmarts)
 SWIG_ZEND_NAMED_FE(obatomatomiter_clear,_wrap_OBAtomAtomIter_Clear,swig_arginfo_obatomatomiter_clear)
 SWIG_ZEND_NAMED_FE(obatomatomiter_dotransformations,_wrap_OBAtomAtomIter_DoTransformations,swig_arginfo_obatomatomiter_dotransformations)
 SWIG_ZEND_NAMED_FE(obatomatomiter_classdescription,_wrap_OBAtomAtomIter_ClassDescription,swig_arginfo_obatomatomiter_classdescription)
 SWIG_ZEND_NAMED_FE(obatomatomiter_gettitle,_wrap_OBAtomAtomIter_GetTitle,swig_arginfo_obatomatomiter_gettitle)
 SWIG_ZEND_NAMED_FE(obatomatomiter_settitle,_wrap_OBAtomAtomIter_SetTitle,swig_arginfo_obatomatomiter_settitle)
 SWIG_ZEND_NAMED_FE(obatomatomiter_hasdata,_wrap_OBAtomAtomIter_HasData,swig_arginfo_obatomatomiter_hasdata)
 SWIG_ZEND_NAMED_FE(obatomatomiter_deletedata,_wrap_OBAtomAtomIter_DeleteData,swig_arginfo_obatomatomiter_deletedata)
 SWIG_ZEND_NAMED_FE(obatomatomiter_clonedata,_wrap_OBAtomAtomIter_CloneData,swig_arginfo_obatomatomiter_clonedata)
 SWIG_ZEND_NAMED_FE(obatomatomiter_datasize,_wrap_OBAtomAtomIter_DataSize,swig_arginfo_obatomatomiter_datasize)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getdata,_wrap_OBAtomAtomIter_GetData,swig_arginfo_obatomatomiter_getdata)
 SWIG_ZEND_NAMED_FE(obatomatomiter_getalldata,_wrap_OBAtomAtomIter_GetAllData,swig_arginfo_obatomatomiter_getalldata)
 SWIG_ZEND_NAMED_FE(obatomatomiter_begindata,_wrap_OBAtomAtomIter_BeginData,swig_arginfo_obatomatomiter_begindata)
 SWIG_ZEND_NAMED_FE(obatomatomiter_enddata,_wrap_OBAtomAtomIter_EndData,swig_arginfo_obatomatomiter_enddata)
 SWIG_ZEND_NAMED_FE(new_obatombonditer,_wrap_new_OBAtomBondIter,swig_arginfo_new_obatombonditer)
 SWIG_ZEND_NAMED_FE(obatombonditer___deref__,_wrap_OBAtomBondIter___deref__,swig_arginfo_obatombonditer___deref__)
 SWIG_ZEND_NAMED_FE(obatombonditer___ref__,_wrap_OBAtomBondIter___ref__,swig_arginfo_obatombonditer___ref__)
 SWIG_ZEND_NAMED_FE(obatombonditer_visit_set,_wrap_OBAtomBondIter_Visit_set,swig_arginfo_obatombonditer_visit_set)
 SWIG_ZEND_NAMED_FE(obatombonditer_visit_get,_wrap_OBAtomBondIter_Visit_get,swig_arginfo_obatombonditer_visit_get)
 SWIG_ZEND_NAMED_FE(obatombonditer_setidx,_wrap_OBAtomBondIter_SetIdx,swig_arginfo_obatombonditer_setidx)
 SWIG_ZEND_NAMED_FE(obatombonditer_setid,_wrap_OBAtomBondIter_SetId,swig_arginfo_obatombonditer_setid)
 SWIG_ZEND_NAMED_FE(obatombonditer_setbo,_wrap_OBAtomBondIter_SetBO,swig_arginfo_obatombonditer_setbo)
 SWIG_ZEND_NAMED_FE(obatombonditer_setbondorder,_wrap_OBAtomBondIter_SetBondOrder,swig_arginfo_obatombonditer_setbondorder)
 SWIG_ZEND_NAMED_FE(obatombonditer_setbegin,_wrap_OBAtomBondIter_SetBegin,swig_arginfo_obatombonditer_setbegin)
 SWIG_ZEND_NAMED_FE(obatombonditer_setend,_wrap_OBAtomBondIter_SetEnd,swig_arginfo_obatombonditer_setend)
 SWIG_ZEND_NAMED_FE(obatombonditer_setparent,_wrap_OBAtomBondIter_SetParent,swig_arginfo_obatombonditer_setparent)
 SWIG_ZEND_NAMED_FE(obatombonditer_setlength,_wrap_OBAtomBondIter_SetLength,swig_arginfo_obatombonditer_setlength)
 SWIG_ZEND_NAMED_FE(obatombonditer_set,_wrap_OBAtomBondIter_Set,swig_arginfo_obatombonditer_set)
 SWIG_ZEND_NAMED_FE(obatombonditer_setksingle,_wrap_OBAtomBondIter_SetKSingle,swig_arginfo_obatombonditer_setksingle)
 SWIG_ZEND_NAMED_FE(obatombonditer_setkdouble,_wrap_OBAtomBondIter_SetKDouble,swig_arginfo_obatombonditer_setkdouble)
 SWIG_ZEND_NAMED_FE(obatombonditer_setktriple,_wrap_OBAtomBondIter_SetKTriple,swig_arginfo_obatombonditer_setktriple)
 SWIG_ZEND_NAMED_FE(obatombonditer_setaromatic,_wrap_OBAtomBondIter_SetAromatic,swig_arginfo_obatombonditer_setaromatic)
 SWIG_ZEND_NAMED_FE(obatombonditer_setwedge,_wrap_OBAtomBondIter_SetWedge,swig_arginfo_obatombonditer_setwedge)
 SWIG_ZEND_NAMED_FE(obatombonditer_sethash,_wrap_OBAtomBondIter_SetHash,swig_arginfo_obatombonditer_sethash)
 SWIG_ZEND_NAMED_FE(obatombonditer_setwedgeorhash,_wrap_OBAtomBondIter_SetWedgeOrHash,swig_arginfo_obatombonditer_setwedgeorhash)
 SWIG_ZEND_NAMED_FE(obatombonditer_setup,_wrap_OBAtomBondIter_SetUp,swig_arginfo_obatombonditer_setup)
 SWIG_ZEND_NAMED_FE(obatombonditer_setdown,_wrap_OBAtomBondIter_SetDown,swig_arginfo_obatombonditer_setdown)
 SWIG_ZEND_NAMED_FE(obatombonditer_setinring,_wrap_OBAtomBondIter_SetInRing,swig_arginfo_obatombonditer_setinring)
 SWIG_ZEND_NAMED_FE(obatombonditer_setclosure,_wrap_OBAtomBondIter_SetClosure,swig_arginfo_obatombonditer_setclosure)
 SWIG_ZEND_NAMED_FE(obatombonditer_unsethash,_wrap_OBAtomBondIter_UnsetHash,swig_arginfo_obatombonditer_unsethash)
 SWIG_ZEND_NAMED_FE(obatombonditer_unsetwedge,_wrap_OBAtomBondIter_UnsetWedge,swig_arginfo_obatombonditer_unsetwedge)
 SWIG_ZEND_NAMED_FE(obatombonditer_unsetup,_wrap_OBAtomBondIter_UnsetUp,swig_arginfo_obatombonditer_unsetup)
 SWIG_ZEND_NAMED_FE(obatombonditer_unsetdown,_wrap_OBAtomBondIter_UnsetDown,swig_arginfo_obatombonditer_unsetdown)
 SWIG_ZEND_NAMED_FE(obatombonditer_unsetaromatic,_wrap_OBAtomBondIter_UnsetAromatic,swig_arginfo_obatombonditer_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obatombonditer_unsetkekule,_wrap_OBAtomBondIter_UnsetKekule,swig_arginfo_obatombonditer_unsetkekule)
 SWIG_ZEND_NAMED_FE(obatombonditer_getidx,_wrap_OBAtomBondIter_GetIdx,swig_arginfo_obatombonditer_getidx)
 SWIG_ZEND_NAMED_FE(obatombonditer_getid,_wrap_OBAtomBondIter_GetId,swig_arginfo_obatombonditer_getid)
 SWIG_ZEND_NAMED_FE(obatombonditer_getbo,_wrap_OBAtomBondIter_GetBO,swig_arginfo_obatombonditer_getbo)
 SWIG_ZEND_NAMED_FE(obatombonditer_getbondorder,_wrap_OBAtomBondIter_GetBondOrder,swig_arginfo_obatombonditer_getbondorder)
 SWIG_ZEND_NAMED_FE(obatombonditer_getflags,_wrap_OBAtomBondIter_GetFlags,swig_arginfo_obatombonditer_getflags)
 SWIG_ZEND_NAMED_FE(obatombonditer_getbeginatomidx,_wrap_OBAtomBondIter_GetBeginAtomIdx,swig_arginfo_obatombonditer_getbeginatomidx)
 SWIG_ZEND_NAMED_FE(obatombonditer_getendatomidx,_wrap_OBAtomBondIter_GetEndAtomIdx,swig_arginfo_obatombonditer_getendatomidx)
 SWIG_ZEND_NAMED_FE(obatombonditer_getbeginatom,_wrap_OBAtomBondIter_GetBeginAtom,swig_arginfo_obatombonditer_getbeginatom)
 SWIG_ZEND_NAMED_FE(obatombonditer_getendatom,_wrap_OBAtomBondIter_GetEndAtom,swig_arginfo_obatombonditer_getendatom)
 SWIG_ZEND_NAMED_FE(obatombonditer_getnbratom,_wrap_OBAtomBondIter_GetNbrAtom,swig_arginfo_obatombonditer_getnbratom)
 SWIG_ZEND_NAMED_FE(obatombonditer_getparent,_wrap_OBAtomBondIter_GetParent,swig_arginfo_obatombonditer_getparent)
 SWIG_ZEND_NAMED_FE(obatombonditer_getequiblength,_wrap_OBAtomBondIter_GetEquibLength,swig_arginfo_obatombonditer_getequiblength)
 SWIG_ZEND_NAMED_FE(obatombonditer_getlength,_wrap_OBAtomBondIter_GetLength,swig_arginfo_obatombonditer_getlength)
 SWIG_ZEND_NAMED_FE(obatombonditer_getnbratomidx,_wrap_OBAtomBondIter_GetNbrAtomIdx,swig_arginfo_obatombonditer_getnbratomidx)
 SWIG_ZEND_NAMED_FE(obatombonditer_findsmallestring,_wrap_OBAtomBondIter_FindSmallestRing,swig_arginfo_obatombonditer_findsmallestring)
 SWIG_ZEND_NAMED_FE(obatombonditer_isaromatic,_wrap_OBAtomBondIter_IsAromatic,swig_arginfo_obatombonditer_isaromatic)
 SWIG_ZEND_NAMED_FE(obatombonditer_isinring,_wrap_OBAtomBondIter_IsInRing,swig_arginfo_obatombonditer_isinring)
 SWIG_ZEND_NAMED_FE(obatombonditer_isrotor,_wrap_OBAtomBondIter_IsRotor,swig_arginfo_obatombonditer_isrotor)
 SWIG_ZEND_NAMED_FE(obatombonditer_isamide,_wrap_OBAtomBondIter_IsAmide,swig_arginfo_obatombonditer_isamide)
 SWIG_ZEND_NAMED_FE(obatombonditer_isprimaryamide,_wrap_OBAtomBondIter_IsPrimaryAmide,swig_arginfo_obatombonditer_isprimaryamide)
 SWIG_ZEND_NAMED_FE(obatombonditer_issecondaryamide,_wrap_OBAtomBondIter_IsSecondaryAmide,swig_arginfo_obatombonditer_issecondaryamide)
 SWIG_ZEND_NAMED_FE(obatombonditer_istertiaryamide,_wrap_OBAtomBondIter_IsTertiaryAmide,swig_arginfo_obatombonditer_istertiaryamide)
 SWIG_ZEND_NAMED_FE(obatombonditer_isester,_wrap_OBAtomBondIter_IsEster,swig_arginfo_obatombonditer_isester)
 SWIG_ZEND_NAMED_FE(obatombonditer_iscarbonyl,_wrap_OBAtomBondIter_IsCarbonyl,swig_arginfo_obatombonditer_iscarbonyl)
 SWIG_ZEND_NAMED_FE(obatombonditer_issingle,_wrap_OBAtomBondIter_IsSingle,swig_arginfo_obatombonditer_issingle)
 SWIG_ZEND_NAMED_FE(obatombonditer_isdouble,_wrap_OBAtomBondIter_IsDouble,swig_arginfo_obatombonditer_isdouble)
 SWIG_ZEND_NAMED_FE(obatombonditer_istriple,_wrap_OBAtomBondIter_IsTriple,swig_arginfo_obatombonditer_istriple)
 SWIG_ZEND_NAMED_FE(obatombonditer_isksingle,_wrap_OBAtomBondIter_IsKSingle,swig_arginfo_obatombonditer_isksingle)
 SWIG_ZEND_NAMED_FE(obatombonditer_iskdouble,_wrap_OBAtomBondIter_IsKDouble,swig_arginfo_obatombonditer_iskdouble)
 SWIG_ZEND_NAMED_FE(obatombonditer_isktriple,_wrap_OBAtomBondIter_IsKTriple,swig_arginfo_obatombonditer_isktriple)
 SWIG_ZEND_NAMED_FE(obatombonditer_isclosure,_wrap_OBAtomBondIter_IsClosure,swig_arginfo_obatombonditer_isclosure)
 SWIG_ZEND_NAMED_FE(obatombonditer_isup,_wrap_OBAtomBondIter_IsUp,swig_arginfo_obatombonditer_isup)
 SWIG_ZEND_NAMED_FE(obatombonditer_isdown,_wrap_OBAtomBondIter_IsDown,swig_arginfo_obatombonditer_isdown)
 SWIG_ZEND_NAMED_FE(obatombonditer_iswedge,_wrap_OBAtomBondIter_IsWedge,swig_arginfo_obatombonditer_iswedge)
 SWIG_ZEND_NAMED_FE(obatombonditer_ishash,_wrap_OBAtomBondIter_IsHash,swig_arginfo_obatombonditer_ishash)
 SWIG_ZEND_NAMED_FE(obatombonditer_iswedgeorhash,_wrap_OBAtomBondIter_IsWedgeOrHash,swig_arginfo_obatombonditer_iswedgeorhash)
 SWIG_ZEND_NAMED_FE(obatombonditer_iscisortrans,_wrap_OBAtomBondIter_IsCisOrTrans,swig_arginfo_obatombonditer_iscisortrans)
 SWIG_ZEND_NAMED_FE(obatombonditer_isdoublebondgeometry,_wrap_OBAtomBondIter_IsDoubleBondGeometry,swig_arginfo_obatombonditer_isdoublebondgeometry)
 SWIG_ZEND_NAMED_FE(obatombonditer_clear,_wrap_OBAtomBondIter_Clear,swig_arginfo_obatombonditer_clear)
 SWIG_ZEND_NAMED_FE(obatombonditer_dotransformations,_wrap_OBAtomBondIter_DoTransformations,swig_arginfo_obatombonditer_dotransformations)
 SWIG_ZEND_NAMED_FE(obatombonditer_classdescription,_wrap_OBAtomBondIter_ClassDescription,swig_arginfo_obatombonditer_classdescription)
 SWIG_ZEND_NAMED_FE(obatombonditer_gettitle,_wrap_OBAtomBondIter_GetTitle,swig_arginfo_obatombonditer_gettitle)
 SWIG_ZEND_NAMED_FE(obatombonditer_settitle,_wrap_OBAtomBondIter_SetTitle,swig_arginfo_obatombonditer_settitle)
 SWIG_ZEND_NAMED_FE(obatombonditer_hasdata,_wrap_OBAtomBondIter_HasData,swig_arginfo_obatombonditer_hasdata)
 SWIG_ZEND_NAMED_FE(obatombonditer_deletedata,_wrap_OBAtomBondIter_DeleteData,swig_arginfo_obatombonditer_deletedata)
 SWIG_ZEND_NAMED_FE(obatombonditer_clonedata,_wrap_OBAtomBondIter_CloneData,swig_arginfo_obatombonditer_clonedata)
 SWIG_ZEND_NAMED_FE(obatombonditer_datasize,_wrap_OBAtomBondIter_DataSize,swig_arginfo_obatombonditer_datasize)
 SWIG_ZEND_NAMED_FE(obatombonditer_getdata,_wrap_OBAtomBondIter_GetData,swig_arginfo_obatombonditer_getdata)
 SWIG_ZEND_NAMED_FE(obatombonditer_getalldata,_wrap_OBAtomBondIter_GetAllData,swig_arginfo_obatombonditer_getalldata)
 SWIG_ZEND_NAMED_FE(obatombonditer_begindata,_wrap_OBAtomBondIter_BeginData,swig_arginfo_obatombonditer_begindata)
 SWIG_ZEND_NAMED_FE(obatombonditer_enddata,_wrap_OBAtomBondIter_EndData,swig_arginfo_obatombonditer_enddata)
 SWIG_ZEND_NAMED_FE(new_obresidueiter,_wrap_new_OBResidueIter,swig_arginfo_new_obresidueiter)
 SWIG_ZEND_NAMED_FE(obresidueiter___deref__,_wrap_OBResidueIter___deref__,swig_arginfo_obresidueiter___deref__)
 SWIG_ZEND_NAMED_FE(obresidueiter___ref__,_wrap_OBResidueIter___ref__,swig_arginfo_obresidueiter___ref__)
 SWIG_ZEND_NAMED_FE(obresidueiter_addatom,_wrap_OBResidueIter_AddAtom,swig_arginfo_obresidueiter_addatom)
 SWIG_ZEND_NAMED_FE(obresidueiter_insertatom,_wrap_OBResidueIter_InsertAtom,swig_arginfo_obresidueiter_insertatom)
 SWIG_ZEND_NAMED_FE(obresidueiter_removeatom,_wrap_OBResidueIter_RemoveAtom,swig_arginfo_obresidueiter_removeatom)
 SWIG_ZEND_NAMED_FE(obresidueiter_setname,_wrap_OBResidueIter_SetName,swig_arginfo_obresidueiter_setname)
 SWIG_ZEND_NAMED_FE(obresidueiter_setnum,_wrap_OBResidueIter_SetNum,swig_arginfo_obresidueiter_setnum)
 SWIG_ZEND_NAMED_FE(obresidueiter_setchain,_wrap_OBResidueIter_SetChain,swig_arginfo_obresidueiter_setchain)
 SWIG_ZEND_NAMED_FE(obresidueiter_setchainnum,_wrap_OBResidueIter_SetChainNum,swig_arginfo_obresidueiter_setchainnum)
 SWIG_ZEND_NAMED_FE(obresidueiter_setidx,_wrap_OBResidueIter_SetIdx,swig_arginfo_obresidueiter_setidx)
 SWIG_ZEND_NAMED_FE(obresidueiter_setinsertioncode,_wrap_OBResidueIter_SetInsertionCode,swig_arginfo_obresidueiter_setinsertioncode)
 SWIG_ZEND_NAMED_FE(obresidueiter_setatomid,_wrap_OBResidueIter_SetAtomID,swig_arginfo_obresidueiter_setatomid)
 SWIG_ZEND_NAMED_FE(obresidueiter_sethetatom,_wrap_OBResidueIter_SetHetAtom,swig_arginfo_obresidueiter_sethetatom)
 SWIG_ZEND_NAMED_FE(obresidueiter_setserialnum,_wrap_OBResidueIter_SetSerialNum,swig_arginfo_obresidueiter_setserialnum)
 SWIG_ZEND_NAMED_FE(obresidueiter_getname,_wrap_OBResidueIter_GetName,swig_arginfo_obresidueiter_getname)
 SWIG_ZEND_NAMED_FE(obresidueiter_getnum,_wrap_OBResidueIter_GetNum,swig_arginfo_obresidueiter_getnum)
 SWIG_ZEND_NAMED_FE(obresidueiter_getnumstring,_wrap_OBResidueIter_GetNumString,swig_arginfo_obresidueiter_getnumstring)
 SWIG_ZEND_NAMED_FE(obresidueiter_getnumatoms,_wrap_OBResidueIter_GetNumAtoms,swig_arginfo_obresidueiter_getnumatoms)
 SWIG_ZEND_NAMED_FE(obresidueiter_getchain,_wrap_OBResidueIter_GetChain,swig_arginfo_obresidueiter_getchain)
 SWIG_ZEND_NAMED_FE(obresidueiter_getchainnum,_wrap_OBResidueIter_GetChainNum,swig_arginfo_obresidueiter_getchainnum)
 SWIG_ZEND_NAMED_FE(obresidueiter_getidx,_wrap_OBResidueIter_GetIdx,swig_arginfo_obresidueiter_getidx)
 SWIG_ZEND_NAMED_FE(obresidueiter_getreskey,_wrap_OBResidueIter_GetResKey,swig_arginfo_obresidueiter_getreskey)
 SWIG_ZEND_NAMED_FE(obresidueiter_getatoms,_wrap_OBResidueIter_GetAtoms,swig_arginfo_obresidueiter_getatoms)
 SWIG_ZEND_NAMED_FE(obresidueiter_getbonds,_wrap_OBResidueIter_GetBonds,swig_arginfo_obresidueiter_getbonds)
 SWIG_ZEND_NAMED_FE(obresidueiter_getatomid,_wrap_OBResidueIter_GetAtomID,swig_arginfo_obresidueiter_getatomid)
 SWIG_ZEND_NAMED_FE(obresidueiter_getserialnum,_wrap_OBResidueIter_GetSerialNum,swig_arginfo_obresidueiter_getserialnum)
 SWIG_ZEND_NAMED_FE(obresidueiter_getinsertioncode,_wrap_OBResidueIter_GetInsertionCode,swig_arginfo_obresidueiter_getinsertioncode)
 SWIG_ZEND_NAMED_FE(obresidueiter_getaminoacidproperty,_wrap_OBResidueIter_GetAminoAcidProperty,swig_arginfo_obresidueiter_getaminoacidproperty)
 SWIG_ZEND_NAMED_FE(obresidueiter_getatomproperty,_wrap_OBResidueIter_GetAtomProperty,swig_arginfo_obresidueiter_getatomproperty)
 SWIG_ZEND_NAMED_FE(obresidueiter_getresidueproperty,_wrap_OBResidueIter_GetResidueProperty,swig_arginfo_obresidueiter_getresidueproperty)
 SWIG_ZEND_NAMED_FE(obresidueiter_ishetatom,_wrap_OBResidueIter_IsHetAtom,swig_arginfo_obresidueiter_ishetatom)
 SWIG_ZEND_NAMED_FE(obresidueiter_isresiduetype,_wrap_OBResidueIter_IsResidueType,swig_arginfo_obresidueiter_isresiduetype)
 SWIG_ZEND_NAMED_FE(obresidueiter_beginatoms,_wrap_OBResidueIter_BeginAtoms,swig_arginfo_obresidueiter_beginatoms)
 SWIG_ZEND_NAMED_FE(obresidueiter_endatoms,_wrap_OBResidueIter_EndAtoms,swig_arginfo_obresidueiter_endatoms)
 SWIG_ZEND_NAMED_FE(obresidueiter_beginatom,_wrap_OBResidueIter_BeginAtom,swig_arginfo_obresidueiter_beginatom)
 SWIG_ZEND_NAMED_FE(obresidueiter_nextatom,_wrap_OBResidueIter_NextAtom,swig_arginfo_obresidueiter_nextatom)
 SWIG_ZEND_NAMED_FE(obresidueiter_clear,_wrap_OBResidueIter_Clear,swig_arginfo_obresidueiter_clear)
 SWIG_ZEND_NAMED_FE(obresidueiter_dotransformations,_wrap_OBResidueIter_DoTransformations,swig_arginfo_obresidueiter_dotransformations)
 SWIG_ZEND_NAMED_FE(obresidueiter_classdescription,_wrap_OBResidueIter_ClassDescription,swig_arginfo_obresidueiter_classdescription)
 SWIG_ZEND_NAMED_FE(obresidueiter_gettitle,_wrap_OBResidueIter_GetTitle,swig_arginfo_obresidueiter_gettitle)
 SWIG_ZEND_NAMED_FE(obresidueiter_settitle,_wrap_OBResidueIter_SetTitle,swig_arginfo_obresidueiter_settitle)
 SWIG_ZEND_NAMED_FE(obresidueiter_hasdata,_wrap_OBResidueIter_HasData,swig_arginfo_obresidueiter_hasdata)
 SWIG_ZEND_NAMED_FE(obresidueiter_deletedata,_wrap_OBResidueIter_DeleteData,swig_arginfo_obresidueiter_deletedata)
 SWIG_ZEND_NAMED_FE(obresidueiter_clonedata,_wrap_OBResidueIter_CloneData,swig_arginfo_obresidueiter_clonedata)
 SWIG_ZEND_NAMED_FE(obresidueiter_datasize,_wrap_OBResidueIter_DataSize,swig_arginfo_obresidueiter_datasize)
 SWIG_ZEND_NAMED_FE(obresidueiter_getdata,_wrap_OBResidueIter_GetData,swig_arginfo_obresidueiter_getdata)
 SWIG_ZEND_NAMED_FE(obresidueiter_getalldata,_wrap_OBResidueIter_GetAllData,swig_arginfo_obresidueiter_getalldata)
 SWIG_ZEND_NAMED_FE(obresidueiter_begindata,_wrap_OBResidueIter_BeginData,swig_arginfo_obresidueiter_begindata)
 SWIG_ZEND_NAMED_FE(obresidueiter_enddata,_wrap_OBResidueIter_EndData,swig_arginfo_obresidueiter_enddata)
 SWIG_ZEND_NAMED_FE(new_obresidueatomiter,_wrap_new_OBResidueAtomIter,swig_arginfo_new_obresidueatomiter)
 SWIG_ZEND_NAMED_FE(obresidueatomiter___deref__,_wrap_OBResidueAtomIter___deref__,swig_arginfo_obresidueatomiter___deref__)
 SWIG_ZEND_NAMED_FE(obresidueatomiter___ref__,_wrap_OBResidueAtomIter___ref__,swig_arginfo_obresidueatomiter___ref__)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_visit_set,_wrap_OBResidueAtomIter_Visit_set,swig_arginfo_obresidueatomiter_visit_set)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_visit_get,_wrap_OBResidueAtomIter_Visit_get,swig_arginfo_obresidueatomiter_visit_get)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_duplicate,_wrap_OBResidueAtomIter_Duplicate,swig_arginfo_obresidueatomiter_duplicate)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setidx,_wrap_OBResidueAtomIter_SetIdx,swig_arginfo_obresidueatomiter_setidx)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setid,_wrap_OBResidueAtomIter_SetId,swig_arginfo_obresidueatomiter_setid)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_sethyb,_wrap_OBResidueAtomIter_SetHyb,swig_arginfo_obresidueatomiter_sethyb)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setatomicnum,_wrap_OBResidueAtomIter_SetAtomicNum,swig_arginfo_obresidueatomiter_setatomicnum)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setisotope,_wrap_OBResidueAtomIter_SetIsotope,swig_arginfo_obresidueatomiter_setisotope)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setimplicitvalence,_wrap_OBResidueAtomIter_SetImplicitValence,swig_arginfo_obresidueatomiter_setimplicitvalence)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_incrementimplicitvalence,_wrap_OBResidueAtomIter_IncrementImplicitValence,swig_arginfo_obresidueatomiter_incrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_decrementimplicitvalence,_wrap_OBResidueAtomIter_DecrementImplicitValence,swig_arginfo_obresidueatomiter_decrementimplicitvalence)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setformalcharge,_wrap_OBResidueAtomIter_SetFormalCharge,swig_arginfo_obresidueatomiter_setformalcharge)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setspinmultiplicity,_wrap_OBResidueAtomIter_SetSpinMultiplicity,swig_arginfo_obresidueatomiter_setspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_settype,_wrap_OBResidueAtomIter_SetType,swig_arginfo_obresidueatomiter_settype)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setpartialcharge,_wrap_OBResidueAtomIter_SetPartialCharge,swig_arginfo_obresidueatomiter_setpartialcharge)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setvector,_wrap_OBResidueAtomIter_SetVector,swig_arginfo_obresidueatomiter_setvector)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setcoordptr,_wrap_OBResidueAtomIter_SetCoordPtr,swig_arginfo_obresidueatomiter_setcoordptr)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setresidue,_wrap_OBResidueAtomIter_SetResidue,swig_arginfo_obresidueatomiter_setresidue)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setparent,_wrap_OBResidueAtomIter_SetParent,swig_arginfo_obresidueatomiter_setparent)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setaromatic,_wrap_OBResidueAtomIter_SetAromatic,swig_arginfo_obresidueatomiter_setaromatic)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_unsetaromatic,_wrap_OBResidueAtomIter_UnsetAromatic,swig_arginfo_obresidueatomiter_unsetaromatic)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setclockwisestereo,_wrap_OBResidueAtomIter_SetClockwiseStereo,swig_arginfo_obresidueatomiter_setclockwisestereo)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setanticlockwisestereo,_wrap_OBResidueAtomIter_SetAntiClockwiseStereo,swig_arginfo_obresidueatomiter_setanticlockwisestereo)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setpositivestereo,_wrap_OBResidueAtomIter_SetPositiveStereo,swig_arginfo_obresidueatomiter_setpositivestereo)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setnegativestereo,_wrap_OBResidueAtomIter_SetNegativeStereo,swig_arginfo_obresidueatomiter_setnegativestereo)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_unsetstereo,_wrap_OBResidueAtomIter_UnsetStereo,swig_arginfo_obresidueatomiter_unsetstereo)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setinring,_wrap_OBResidueAtomIter_SetInRing,swig_arginfo_obresidueatomiter_setinring)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_setchiral,_wrap_OBResidueAtomIter_SetChiral,swig_arginfo_obresidueatomiter_setchiral)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_clearcoordptr,_wrap_OBResidueAtomIter_ClearCoordPtr,swig_arginfo_obresidueatomiter_clearcoordptr)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getformalcharge,_wrap_OBResidueAtomIter_GetFormalCharge,swig_arginfo_obresidueatomiter_getformalcharge)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getatomicnum,_wrap_OBResidueAtomIter_GetAtomicNum,swig_arginfo_obresidueatomiter_getatomicnum)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getisotope,_wrap_OBResidueAtomIter_GetIsotope,swig_arginfo_obresidueatomiter_getisotope)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getspinmultiplicity,_wrap_OBResidueAtomIter_GetSpinMultiplicity,swig_arginfo_obresidueatomiter_getspinmultiplicity)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getatomicmass,_wrap_OBResidueAtomIter_GetAtomicMass,swig_arginfo_obresidueatomiter_getatomicmass)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getexactmass,_wrap_OBResidueAtomIter_GetExactMass,swig_arginfo_obresidueatomiter_getexactmass)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getidx,_wrap_OBResidueAtomIter_GetIdx,swig_arginfo_obresidueatomiter_getidx)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getindex,_wrap_OBResidueAtomIter_GetIndex,swig_arginfo_obresidueatomiter_getindex)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getid,_wrap_OBResidueAtomIter_GetId,swig_arginfo_obresidueatomiter_getid)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getcoordinateidx,_wrap_OBResidueAtomIter_GetCoordinateIdx,swig_arginfo_obresidueatomiter_getcoordinateidx)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getcidx,_wrap_OBResidueAtomIter_GetCIdx,swig_arginfo_obresidueatomiter_getcidx)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getvalence,_wrap_OBResidueAtomIter_GetValence,swig_arginfo_obresidueatomiter_getvalence)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_gethyb,_wrap_OBResidueAtomIter_GetHyb,swig_arginfo_obresidueatomiter_gethyb)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getimplicitvalence,_wrap_OBResidueAtomIter_GetImplicitValence,swig_arginfo_obresidueatomiter_getimplicitvalence)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_gethvyvalence,_wrap_OBResidueAtomIter_GetHvyValence,swig_arginfo_obresidueatomiter_gethvyvalence)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getheterovalence,_wrap_OBResidueAtomIter_GetHeteroValence,swig_arginfo_obresidueatomiter_getheterovalence)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_gettype,_wrap_OBResidueAtomIter_GetType,swig_arginfo_obresidueatomiter_gettype)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getx,_wrap_OBResidueAtomIter_GetX,swig_arginfo_obresidueatomiter_getx)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_gety,_wrap_OBResidueAtomIter_GetY,swig_arginfo_obresidueatomiter_gety)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getz,_wrap_OBResidueAtomIter_GetZ,swig_arginfo_obresidueatomiter_getz)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_x,_wrap_OBResidueAtomIter_x,swig_arginfo_obresidueatomiter_x)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_y,_wrap_OBResidueAtomIter_y,swig_arginfo_obresidueatomiter_y)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_z,_wrap_OBResidueAtomIter_z,swig_arginfo_obresidueatomiter_z)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getcoordinate,_wrap_OBResidueAtomIter_GetCoordinate,swig_arginfo_obresidueatomiter_getcoordinate)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getvector,_wrap_OBResidueAtomIter_GetVector,swig_arginfo_obresidueatomiter_getvector)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getpartialcharge,_wrap_OBResidueAtomIter_GetPartialCharge,swig_arginfo_obresidueatomiter_getpartialcharge)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getresidue,_wrap_OBResidueAtomIter_GetResidue,swig_arginfo_obresidueatomiter_getresidue)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getparent,_wrap_OBResidueAtomIter_GetParent,swig_arginfo_obresidueatomiter_getparent)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getnewbondvector,_wrap_OBResidueAtomIter_GetNewBondVector,swig_arginfo_obresidueatomiter_getnewbondvector)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getbond,_wrap_OBResidueAtomIter_GetBond,swig_arginfo_obresidueatomiter_getbond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getnextatom,_wrap_OBResidueAtomIter_GetNextAtom,swig_arginfo_obresidueatomiter_getnextatom)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_beginbonds,_wrap_OBResidueAtomIter_BeginBonds,swig_arginfo_obresidueatomiter_beginbonds)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_endbonds,_wrap_OBResidueAtomIter_EndBonds,swig_arginfo_obresidueatomiter_endbonds)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_beginbond,_wrap_OBResidueAtomIter_BeginBond,swig_arginfo_obresidueatomiter_beginbond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_nextbond,_wrap_OBResidueAtomIter_NextBond,swig_arginfo_obresidueatomiter_nextbond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_beginnbratom,_wrap_OBResidueAtomIter_BeginNbrAtom,swig_arginfo_obresidueatomiter_beginnbratom)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_nextnbratom,_wrap_OBResidueAtomIter_NextNbrAtom,swig_arginfo_obresidueatomiter_nextnbratom)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getdistance,_wrap_OBResidueAtomIter_GetDistance,swig_arginfo_obresidueatomiter_getdistance)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getangle,_wrap_OBResidueAtomIter_GetAngle,swig_arginfo_obresidueatomiter_getangle)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_newresidue,_wrap_OBResidueAtomIter_NewResidue,swig_arginfo_obresidueatomiter_newresidue)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_addresidue,_wrap_OBResidueAtomIter_AddResidue,swig_arginfo_obresidueatomiter_addresidue)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_deleteresidue,_wrap_OBResidueAtomIter_DeleteResidue,swig_arginfo_obresidueatomiter_deleteresidue)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_addbond,_wrap_OBResidueAtomIter_AddBond,swig_arginfo_obresidueatomiter_addbond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_insertbond,_wrap_OBResidueAtomIter_InsertBond,swig_arginfo_obresidueatomiter_insertbond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_deletebond,_wrap_OBResidueAtomIter_DeleteBond,swig_arginfo_obresidueatomiter_deletebond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_clearbond,_wrap_OBResidueAtomIter_ClearBond,swig_arginfo_obresidueatomiter_clearbond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_htomethyl,_wrap_OBResidueAtomIter_HtoMethyl,swig_arginfo_obresidueatomiter_htomethyl)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_sethybandgeom,_wrap_OBResidueAtomIter_SetHybAndGeom,swig_arginfo_obresidueatomiter_sethybandgeom)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_forcenoh,_wrap_OBResidueAtomIter_ForceNoH,swig_arginfo_obresidueatomiter_forcenoh)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasnohforced,_wrap_OBResidueAtomIter_HasNoHForced,swig_arginfo_obresidueatomiter_hasnohforced)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_forceimplh,_wrap_OBResidueAtomIter_ForceImplH,swig_arginfo_obresidueatomiter_forceimplh)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasimplhforced,_wrap_OBResidueAtomIter_HasImplHForced,swig_arginfo_obresidueatomiter_hasimplhforced)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_countfreeoxygens,_wrap_OBResidueAtomIter_CountFreeOxygens,swig_arginfo_obresidueatomiter_countfreeoxygens)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_countfreesulfurs,_wrap_OBResidueAtomIter_CountFreeSulfurs,swig_arginfo_obresidueatomiter_countfreesulfurs)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_implicithydrogencount,_wrap_OBResidueAtomIter_ImplicitHydrogenCount,swig_arginfo_obresidueatomiter_implicithydrogencount)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_explicithydrogencount,_wrap_OBResidueAtomIter_ExplicitHydrogenCount,swig_arginfo_obresidueatomiter_explicithydrogencount)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_memberofringcount,_wrap_OBResidueAtomIter_MemberOfRingCount,swig_arginfo_obresidueatomiter_memberofringcount)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_memberofringsize,_wrap_OBResidueAtomIter_MemberOfRingSize,swig_arginfo_obresidueatomiter_memberofringsize)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_countringbonds,_wrap_OBResidueAtomIter_CountRingBonds,swig_arginfo_obresidueatomiter_countringbonds)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_smallestbondangle,_wrap_OBResidueAtomIter_SmallestBondAngle,swig_arginfo_obresidueatomiter_smallestbondangle)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_averagebondangle,_wrap_OBResidueAtomIter_AverageBondAngle,swig_arginfo_obresidueatomiter_averagebondangle)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_bosum,_wrap_OBResidueAtomIter_BOSum,swig_arginfo_obresidueatomiter_bosum)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_kbosum,_wrap_OBResidueAtomIter_KBOSum,swig_arginfo_obresidueatomiter_kbosum)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_lewisacidbasecounts,_wrap_OBResidueAtomIter_LewisAcidBaseCounts,swig_arginfo_obresidueatomiter_lewisacidbasecounts)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasresidue,_wrap_OBResidueAtomIter_HasResidue,swig_arginfo_obresidueatomiter_hasresidue)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ishetatom,_wrap_OBResidueAtomIter_IsHetAtom,swig_arginfo_obresidueatomiter_ishetatom)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ishydrogen,_wrap_OBResidueAtomIter_IsHydrogen,swig_arginfo_obresidueatomiter_ishydrogen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_iscarbon,_wrap_OBResidueAtomIter_IsCarbon,swig_arginfo_obresidueatomiter_iscarbon)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isnitrogen,_wrap_OBResidueAtomIter_IsNitrogen,swig_arginfo_obresidueatomiter_isnitrogen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isoxygen,_wrap_OBResidueAtomIter_IsOxygen,swig_arginfo_obresidueatomiter_isoxygen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_issulfur,_wrap_OBResidueAtomIter_IsSulfur,swig_arginfo_obresidueatomiter_issulfur)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isphosphorus,_wrap_OBResidueAtomIter_IsPhosphorus,swig_arginfo_obresidueatomiter_isphosphorus)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isaromatic,_wrap_OBResidueAtomIter_IsAromatic,swig_arginfo_obresidueatomiter_isaromatic)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isinring,_wrap_OBResidueAtomIter_IsInRing,swig_arginfo_obresidueatomiter_isinring)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isinringsize,_wrap_OBResidueAtomIter_IsInRingSize,swig_arginfo_obresidueatomiter_isinringsize)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isheteroatom,_wrap_OBResidueAtomIter_IsHeteroatom,swig_arginfo_obresidueatomiter_isheteroatom)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isnotcorh,_wrap_OBResidueAtomIter_IsNotCorH,swig_arginfo_obresidueatomiter_isnotcorh)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isconnected,_wrap_OBResidueAtomIter_IsConnected,swig_arginfo_obresidueatomiter_isconnected)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isonethree,_wrap_OBResidueAtomIter_IsOneThree,swig_arginfo_obresidueatomiter_isonethree)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isonefour,_wrap_OBResidueAtomIter_IsOneFour,swig_arginfo_obresidueatomiter_isonefour)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_iscarboxyloxygen,_wrap_OBResidueAtomIter_IsCarboxylOxygen,swig_arginfo_obresidueatomiter_iscarboxyloxygen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isphosphateoxygen,_wrap_OBResidueAtomIter_IsPhosphateOxygen,swig_arginfo_obresidueatomiter_isphosphateoxygen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_issulfateoxygen,_wrap_OBResidueAtomIter_IsSulfateOxygen,swig_arginfo_obresidueatomiter_issulfateoxygen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isnitrooxygen,_wrap_OBResidueAtomIter_IsNitroOxygen,swig_arginfo_obresidueatomiter_isnitrooxygen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isamidenitrogen,_wrap_OBResidueAtomIter_IsAmideNitrogen,swig_arginfo_obresidueatomiter_isamidenitrogen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ispolarhydrogen,_wrap_OBResidueAtomIter_IsPolarHydrogen,swig_arginfo_obresidueatomiter_ispolarhydrogen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isnonpolarhydrogen,_wrap_OBResidueAtomIter_IsNonPolarHydrogen,swig_arginfo_obresidueatomiter_isnonpolarhydrogen)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isaromaticnoxide,_wrap_OBResidueAtomIter_IsAromaticNOxide,swig_arginfo_obresidueatomiter_isaromaticnoxide)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ischiral,_wrap_OBResidueAtomIter_IsChiral,swig_arginfo_obresidueatomiter_ischiral)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isaxial,_wrap_OBResidueAtomIter_IsAxial,swig_arginfo_obresidueatomiter_isaxial)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isclockwise,_wrap_OBResidueAtomIter_IsClockwise,swig_arginfo_obresidueatomiter_isclockwise)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isanticlockwise,_wrap_OBResidueAtomIter_IsAntiClockwise,swig_arginfo_obresidueatomiter_isanticlockwise)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ispositivestereo,_wrap_OBResidueAtomIter_IsPositiveStereo,swig_arginfo_obresidueatomiter_ispositivestereo)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_isnegativestereo,_wrap_OBResidueAtomIter_IsNegativeStereo,swig_arginfo_obresidueatomiter_isnegativestereo)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_haschiralityspecified,_wrap_OBResidueAtomIter_HasChiralitySpecified,swig_arginfo_obresidueatomiter_haschiralityspecified)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_haschiralvolume,_wrap_OBResidueAtomIter_HasChiralVolume,swig_arginfo_obresidueatomiter_haschiralvolume)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ishbondacceptor,_wrap_OBResidueAtomIter_IsHbondAcceptor,swig_arginfo_obresidueatomiter_ishbondacceptor)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ishbondacceptorsimple,_wrap_OBResidueAtomIter_IsHbondAcceptorSimple,swig_arginfo_obresidueatomiter_ishbondacceptorsimple)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ishbonddonor,_wrap_OBResidueAtomIter_IsHbondDonor,swig_arginfo_obresidueatomiter_ishbonddonor)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ishbonddonorh,_wrap_OBResidueAtomIter_IsHbondDonorH,swig_arginfo_obresidueatomiter_ishbonddonorh)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_ismetal,_wrap_OBResidueAtomIter_IsMetal,swig_arginfo_obresidueatomiter_ismetal)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasalphabetaunsat,_wrap_OBResidueAtomIter_HasAlphaBetaUnsat,swig_arginfo_obresidueatomiter_hasalphabetaunsat)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasbondoforder,_wrap_OBResidueAtomIter_HasBondOfOrder,swig_arginfo_obresidueatomiter_hasbondoforder)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_countbondsoforder,_wrap_OBResidueAtomIter_CountBondsOfOrder,swig_arginfo_obresidueatomiter_countbondsoforder)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_highestbondorder,_wrap_OBResidueAtomIter_HighestBondOrder,swig_arginfo_obresidueatomiter_highestbondorder)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasnonsinglebond,_wrap_OBResidueAtomIter_HasNonSingleBond,swig_arginfo_obresidueatomiter_hasnonsinglebond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hassinglebond,_wrap_OBResidueAtomIter_HasSingleBond,swig_arginfo_obresidueatomiter_hassinglebond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasdoublebond,_wrap_OBResidueAtomIter_HasDoubleBond,swig_arginfo_obresidueatomiter_hasdoublebond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasaromaticbond,_wrap_OBResidueAtomIter_HasAromaticBond,swig_arginfo_obresidueatomiter_hasaromaticbond)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_matchessmarts,_wrap_OBResidueAtomIter_MatchesSMARTS,swig_arginfo_obresidueatomiter_matchessmarts)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_clear,_wrap_OBResidueAtomIter_Clear,swig_arginfo_obresidueatomiter_clear)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_dotransformations,_wrap_OBResidueAtomIter_DoTransformations,swig_arginfo_obresidueatomiter_dotransformations)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_classdescription,_wrap_OBResidueAtomIter_ClassDescription,swig_arginfo_obresidueatomiter_classdescription)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_gettitle,_wrap_OBResidueAtomIter_GetTitle,swig_arginfo_obresidueatomiter_gettitle)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_settitle,_wrap_OBResidueAtomIter_SetTitle,swig_arginfo_obresidueatomiter_settitle)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_hasdata,_wrap_OBResidueAtomIter_HasData,swig_arginfo_obresidueatomiter_hasdata)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_deletedata,_wrap_OBResidueAtomIter_DeleteData,swig_arginfo_obresidueatomiter_deletedata)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_clonedata,_wrap_OBResidueAtomIter_CloneData,swig_arginfo_obresidueatomiter_clonedata)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_datasize,_wrap_OBResidueAtomIter_DataSize,swig_arginfo_obresidueatomiter_datasize)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getdata,_wrap_OBResidueAtomIter_GetData,swig_arginfo_obresidueatomiter_getdata)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_getalldata,_wrap_OBResidueAtomIter_GetAllData,swig_arginfo_obresidueatomiter_getalldata)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_begindata,_wrap_OBResidueAtomIter_BeginData,swig_arginfo_obresidueatomiter_begindata)
 SWIG_ZEND_NAMED_FE(obresidueatomiter_enddata,_wrap_OBResidueAtomIter_EndData,swig_arginfo_obresidueatomiter_enddata)
 SWIG_ZEND_NAMED_FE(new_obmolangleiter,_wrap_new_OBMolAngleIter,swig_arginfo_new_obmolangleiter)
 SWIG_ZEND_NAMED_FE(obmolangleiter___ref__,_wrap_OBMolAngleIter___ref__,swig_arginfo_obmolangleiter___ref__)
 SWIG_ZEND_NAMED_FE(new_obmoltorsioniter,_wrap_new_OBMolTorsionIter,swig_arginfo_new_obmoltorsioniter)
 SWIG_ZEND_NAMED_FE(obmoltorsioniter___ref__,_wrap_OBMolTorsionIter___ref__,swig_arginfo_obmoltorsioniter___ref__)
 SWIG_ZEND_NAMED_FE(new_obmolpairiter,_wrap_new_OBMolPairIter,swig_arginfo_new_obmolpairiter)
 SWIG_ZEND_NAMED_FE(obmolpairiter___ref__,_wrap_OBMolPairIter___ref__,swig_arginfo_obmolpairiter___ref__)
 SWIG_ZEND_NAMED_FE(new_obmolringiter,_wrap_new_OBMolRingIter,swig_arginfo_new_obmolringiter)
 SWIG_ZEND_NAMED_FE(obmolringiter___deref__,_wrap_OBMolRingIter___deref__,swig_arginfo_obmolringiter___deref__)
 SWIG_ZEND_NAMED_FE(obmolringiter___ref__,_wrap_OBMolRingIter___ref__,swig_arginfo_obmolringiter___ref__)
 SWIG_ZEND_NAMED_FE(obmolringiter_ring_id_set,_wrap_OBMolRingIter_ring_id_set,swig_arginfo_obmolringiter_ring_id_set)
 SWIG_ZEND_NAMED_FE(obmolringiter_ring_id_get,_wrap_OBMolRingIter_ring_id_get,swig_arginfo_obmolringiter_ring_id_get)
 SWIG_ZEND_NAMED_FE(obmolringiter__path_set,_wrap_OBMolRingIter__path_set,swig_arginfo_obmolringiter__path_set)
 SWIG_ZEND_NAMED_FE(obmolringiter__path_get,_wrap_OBMolRingIter__path_get,swig_arginfo_obmolringiter__path_get)
 SWIG_ZEND_NAMED_FE(obmolringiter__pathset_set,_wrap_OBMolRingIter__pathset_set,swig_arginfo_obmolringiter__pathset_set)
 SWIG_ZEND_NAMED_FE(obmolringiter__pathset_get,_wrap_OBMolRingIter__pathset_get,swig_arginfo_obmolringiter__pathset_get)
 SWIG_ZEND_NAMED_FE(obmolringiter_size,_wrap_OBMolRingIter_Size,swig_arginfo_obmolringiter_size)
 SWIG_ZEND_NAMED_FE(obmolringiter_pathsize,_wrap_OBMolRingIter_PathSize,swig_arginfo_obmolringiter_pathsize)
 SWIG_ZEND_NAMED_FE(obmolringiter_isaromatic,_wrap_OBMolRingIter_IsAromatic,swig_arginfo_obmolringiter_isaromatic)
 SWIG_ZEND_NAMED_FE(obmolringiter_settype,_wrap_OBMolRingIter_SetType,swig_arginfo_obmolringiter_settype)
 SWIG_ZEND_NAMED_FE(obmolringiter_gettype,_wrap_OBMolRingIter_GetType,swig_arginfo_obmolringiter_gettype)
 SWIG_ZEND_NAMED_FE(obmolringiter_getrootatom,_wrap_OBMolRingIter_GetRootAtom,swig_arginfo_obmolringiter_getrootatom)
 SWIG_ZEND_NAMED_FE(obmolringiter_ismember,_wrap_OBMolRingIter_IsMember,swig_arginfo_obmolringiter_ismember)
 SWIG_ZEND_NAMED_FE(obmolringiter_isinring,_wrap_OBMolRingIter_IsInRing,swig_arginfo_obmolringiter_isinring)
 SWIG_ZEND_NAMED_FE(obmolringiter_setparent,_wrap_OBMolRingIter_SetParent,swig_arginfo_obmolringiter_setparent)
 SWIG_ZEND_NAMED_FE(obmolringiter_getparent,_wrap_OBMolRingIter_GetParent,swig_arginfo_obmolringiter_getparent)
 SWIG_ZEND_NAMED_FE(obmolringiter_findcenterandnormal,_wrap_OBMolRingIter_findCenterAndNormal,swig_arginfo_obmolringiter_findcenterandnormal)
 SWIG_ZEND_NAMED_FE(swig_openbabel_alter_newobject,_wrap_swig_openbabel_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_openbabel_get_newobject,_wrap_swig_openbabel_get_newobject,NULL)
 ZEND_FE_END
};

/* init section */
#if ZEND_MODULE_API_NO <= 20090626
#undef ZEND_MODULE_BUILD_ID
#define ZEND_MODULE_BUILD_ID (char*)"API" ZEND_TOSTR(ZEND_MODULE_API_NO) ZEND_BUILD_TS ZEND_BUILD_DEBUG ZEND_BUILD_SYSTEM ZEND_BUILD_EXTRA
#endif
zend_module_entry openbabel_module_entry = {
    STANDARD_MODULE_HEADER,
    (char*)"openbabel",
    openbabel_functions,
    PHP_MINIT(openbabel),
    PHP_MSHUTDOWN(openbabel),
    PHP_RINIT(openbabel),
    PHP_RSHUTDOWN(openbabel),
    PHP_MINFO(openbabel),
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &openbabel_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &openbabel_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(openbabel)
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(openbabel, openbabel_init_globals, openbabel_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_void=zend_register_list_destructors_ex(_wrap_destroy_p_void,NULL,(char *)(SWIGTYPE_p_void->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_void,&le_swig__p_void);
le_swig__p_OpenBabel__OBPairTemplateT_double_t=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBPairTemplateT_double_t,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBPairTemplateT_double_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBPairTemplateT_double_t,&le_swig__p_OpenBabel__OBPairTemplateT_double_t);
le_swig__p_std__vectorT_double_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_double_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_double_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_t,&le_swig__p_std__vectorT_double_t);
le_swig__p_OpenBabel__OBPairTemplateT_bool_t=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBPairTemplateT_bool_t,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBPairTemplateT_bool_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBPairTemplateT_bool_t,&le_swig__p_OpenBabel__OBPairTemplateT_bool_t);
le_swig__p_OpenBabel__OBIsomorphismMapper__Functor=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBIsomorphismMapper__Functor,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBIsomorphismMapper__Functor,&le_swig__p_OpenBabel__OBIsomorphismMapper__Functor);
le_swig__p_unsigned_char=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_char,NULL,(char *)(SWIGTYPE_p_unsigned_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_char,&le_swig__p_unsigned_char);
le_swig__p_OpenBabel__OBGlobalDataBase=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBGlobalDataBase,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBGlobalDataBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBGlobalDataBase,&le_swig__p_OpenBabel__OBGlobalDataBase);
le_swig__p_std__vectorT_std__pairT_std__string_std__string_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__pairT_std__string_std__string_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_t,&le_swig__p_std__vectorT_std__pairT_std__string_std__string_t_t);
le_swig__p_std__string=zend_register_list_destructors_ex(_wrap_destroy_p_std__string,NULL,(char *)(SWIGTYPE_p_std__string->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__string,&le_swig__p_std__string);
le_swig__p_OpenBabel__OBFFConstraint=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFFConstraint,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFFConstraint->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFFConstraint,&le_swig__p_OpenBabel__OBFFConstraint);
le_swig__p_OpenBabel__OBAngle=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAngle,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAngle->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAngle,&le_swig__p_OpenBabel__OBAngle);
le_swig__p_OpenBabel__OBVectorData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBVectorData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBVectorData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBVectorData,&le_swig__p_OpenBabel__OBVectorData);
le_swig__p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t,&le_swig__p_std__vectorT_OpenBabel__OBTetrahedralStereo_p_t);
le_swig__p_std__vectorT_OpenBabel__OBCisTransStereo_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBCisTransStereo_p_t,&le_swig__p_std__vectorT_OpenBabel__OBCisTransStereo_p_t);
le_swig__p_OpenBabel__OBSqrtTbl=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSqrtTbl,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSqrtTbl->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSqrtTbl,&le_swig__p_OpenBabel__OBSqrtTbl);
le_swig__p_std__vectorT_uint32_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_uint32_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_uint32_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_uint32_t_t,&le_swig__p_std__vectorT_uint32_t_t);
le_swig__p_std__vectorT_OpenBabel__OBStereoUnit_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBStereoUnit_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBStereoUnit_t,&le_swig__p_std__vectorT_OpenBabel__OBStereoUnit_t);
le_swig__p_OpenBabel__OBRotor=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRotor,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRotor->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRotor,&le_swig__p_OpenBabel__OBRotor);
le_swig__p_OpenBabel__OBMolPairIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolPairIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolPairIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolPairIter,&le_swig__p_OpenBabel__OBMolPairIter);
le_swig__p_std__vectorT_double_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_double_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_double_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_p_t,&le_swig__p_std__vectorT_double_p_t);
le_swig__p_OpenBabel__OBIsotopeTable=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBIsotopeTable,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBIsotopeTable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBIsotopeTable,&le_swig__p_OpenBabel__OBIsotopeTable);
le_swig__p_OpenBabel__OBTypeTable=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBTypeTable,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBTypeTable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBTypeTable,&le_swig__p_OpenBabel__OBTypeTable);
le_swig__p_OpenBabel__AliasData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__AliasData,NULL,(char *)(SWIGTYPE_p_OpenBabel__AliasData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__AliasData,&le_swig__p_OpenBabel__AliasData);
le_swig__p_a_4__char=zend_register_list_destructors_ex(_wrap_destroy_p_a_4__char,NULL,(char *)(SWIGTYPE_p_a_4__char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_a_4__char,&le_swig__p_a_4__char);
le_swig__p_OpenBabel__OBResidue=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBResidue,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBResidue->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBResidue,&le_swig__p_OpenBabel__OBResidue);
le_swig__p_p_OpenBabel__OBDescriptor=zend_register_list_destructors_ex(_wrap_destroy_p_p_OpenBabel__OBDescriptor,NULL,(char *)(SWIGTYPE_p_p_OpenBabel__OBDescriptor->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_OpenBabel__OBDescriptor,&le_swig__p_p_OpenBabel__OBDescriptor);
le_swig__p_OpenBabel__OBDescriptor=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBDescriptor,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBDescriptor->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBDescriptor,&le_swig__p_OpenBabel__OBDescriptor);
le_swig__p_OpenBabel__OBExternalBond=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBExternalBond,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBExternalBond->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBExternalBond,&le_swig__p_OpenBabel__OBExternalBond);
le_swig__p_OpenBabel__OBUnitCell=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBUnitCell,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBUnitCell->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBUnitCell,&le_swig__p_OpenBabel__OBUnitCell);
le_swig__p_OpenBabel__OBStereoUnit=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBStereoUnit,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBStereoUnit->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBStereoUnit,&le_swig__p_OpenBabel__OBStereoUnit);
le_swig__p_OpenBabel__OBSymmetryData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSymmetryData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSymmetryData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSymmetryData,&le_swig__p_OpenBabel__OBSymmetryData);
le_swig__p_OpenBabel__FptIndexHeader=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__FptIndexHeader,NULL,(char *)(SWIGTYPE_p_OpenBabel__FptIndexHeader->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__FptIndexHeader,&le_swig__p_OpenBabel__FptIndexHeader);
le_swig__p_OpenBabel__OBBitVec=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBBitVec,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBBitVec->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBBitVec,&le_swig__p_OpenBabel__OBBitVec);
le_swig__p_OpenBabel__OBStopwatch=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBStopwatch,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBStopwatch->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBStopwatch,&le_swig__p_OpenBabel__OBStopwatch);
le_swig__p_OpenBabel__FastSearch=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__FastSearch,NULL,(char *)(SWIGTYPE_p_OpenBabel__FastSearch->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__FastSearch,&le_swig__p_OpenBabel__FastSearch);
le_swig__p_OpMap=zend_register_list_destructors_ex(_wrap_destroy_p_OpMap,NULL,(char *)(SWIGTYPE_p_OpMap->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpMap,&le_swig__p_OpMap);
le_swig__p_OpenBabel__OBSmartsMatcher=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSmartsMatcher,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSmartsMatcher->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSmartsMatcher,&le_swig__p_OpenBabel__OBSmartsMatcher);
le_swig__p_OpenBabel__OBRateData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRateData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRateData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRateData,&le_swig__p_OpenBabel__OBRateData);
le_swig__p_OpenBabel__FptIndex=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__FptIndex,NULL,(char *)(SWIGTYPE_p_OpenBabel__FptIndex->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__FptIndex,&le_swig__p_OpenBabel__FptIndex);
le_swig__p_Ref=zend_register_list_destructors_ex(_wrap_destroy_p_Ref,NULL,(char *)(SWIGTYPE_p_Ref->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Ref,&le_swig__p_Ref);
le_swig__p_std__vectorT_OpenBabel__OBAtom_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBAtom_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t,&le_swig__p_std__vectorT_OpenBabel__OBAtom_p_t);
le_swig__p_std__mapT_int_OpenBabel__OBAtom_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__mapT_int_OpenBabel__OBAtom_p_t,NULL,(char *)(SWIGTYPE_p_std__mapT_int_OpenBabel__OBAtom_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__mapT_int_OpenBabel__OBAtom_p_t,&le_swig__p_std__mapT_int_OpenBabel__OBAtom_p_t);
le_swig__p_std__vectorT_OpenBabel__OBQueryAtom_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBQueryAtom_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryAtom_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryAtom_p_t,&le_swig__p_std__vectorT_OpenBabel__OBQueryAtom_p_t);
le_swig__p_OpenBabel__OBRotamerList=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRotamerList,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRotamerList->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRotamerList,&le_swig__p_OpenBabel__OBRotamerList);
le_swig__p_unsigned_int=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_int,NULL,(char *)(SWIGTYPE_p_unsigned_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_int,&le_swig__p_unsigned_int);
le_swig__p_OpenBabel__OBElement=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBElement,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBElement->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBElement,&le_swig__p_OpenBabel__OBElement);
le_swig__p_OpenBabel__SpaceGroup=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__SpaceGroup,NULL,(char *)(SWIGTYPE_p_OpenBabel__SpaceGroup->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__SpaceGroup,&le_swig__p_OpenBabel__SpaceGroup);
le_swig__p_std__stringbuf=zend_register_list_destructors_ex(_wrap_destroy_p_std__stringbuf,NULL,(char *)(SWIGTYPE_p_std__stringbuf->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__stringbuf,&le_swig__p_std__stringbuf);
le_swig__p_p_OpenBabel__OBOp=zend_register_list_destructors_ex(_wrap_destroy_p_p_OpenBabel__OBOp,NULL,(char *)(SWIGTYPE_p_p_OpenBabel__OBOp->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_OpenBabel__OBOp,&le_swig__p_p_OpenBabel__OBOp);
le_swig__p_OpenBabel__OBOp=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBOp,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBOp->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBOp,&le_swig__p_OpenBabel__OBOp);
le_swig__p_OpenBabel__OBReaction=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBReaction,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBReaction->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBReaction,&le_swig__p_OpenBabel__OBReaction);
le_swig__p_OpenBabel__OBOrbital=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBOrbital,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBOrbital->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBOrbital,&le_swig__p_OpenBabel__OBOrbital);
le_swig__p_std__vectorT_OpenBabel__OBRing_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBRing_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_t,&le_swig__p_std__vectorT_OpenBabel__OBRing_t);
le_swig__p_OpenBabel__obLogBuf=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__obLogBuf,NULL,(char *)(SWIGTYPE_p_OpenBabel__obLogBuf->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__obLogBuf,&le_swig__p_OpenBabel__obLogBuf);
le_swig__p_std__dequeT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__dequeT_int_t,NULL,(char *)(SWIGTYPE_p_std__dequeT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__dequeT_int_t,&le_swig__p_std__dequeT_int_t);
le_swig__p_std__pairT_int_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__pairT_int_int_t,NULL,(char *)(SWIGTYPE_p_std__pairT_int_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__pairT_int_int_t,&le_swig__p_std__pairT_int_int_t);
le_swig__p_OpenBabel__OBPairTemplateT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBPairTemplateT_int_t,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBPairTemplateT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBPairTemplateT_int_t,&le_swig__p_OpenBabel__OBPairTemplateT_int_t);
le_swig__p_std__pairT_unsigned_int_unsigned_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__pairT_unsigned_int_unsigned_int_t,NULL,(char *)(SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t,&le_swig__p_std__pairT_unsigned_int_unsigned_int_t);
le_swig__p_std__vectorT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_int_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_int_t,&le_swig__p_std__vectorT_int_t);
le_swig__p_std__vectorT_unsigned_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_int_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_int_t,&le_swig__p_std__vectorT_unsigned_int_t);
le_swig__p_OpenBabel__OBNasaThermoData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBNasaThermoData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBNasaThermoData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBNasaThermoData,&le_swig__p_OpenBabel__OBNasaThermoData);
le_swig__p_OpenBabel__OBElementTable=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBElementTable,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBElementTable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBElementTable,&le_swig__p_OpenBabel__OBElementTable);
le_swig__p_std__multimapT_double_unsigned_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__multimapT_double_unsigned_int_t,NULL,(char *)(SWIGTYPE_p_std__multimapT_double_unsigned_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__multimapT_double_unsigned_int_t,&le_swig__p_std__multimapT_double_unsigned_int_t);
le_swig__p_OpenBabel__OBIsomorphismMapper=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBIsomorphismMapper,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBIsomorphismMapper->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBIsomorphismMapper,&le_swig__p_OpenBabel__OBIsomorphismMapper);
le_swig__p_OpenBabel__OBAtom=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAtom,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAtom->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAtom,&le_swig__p_OpenBabel__OBAtom);
le_swig__p_OpenBabel__transform3d=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__transform3d,NULL,(char *)(SWIGTYPE_p_OpenBabel__transform3d->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__transform3d,&le_swig__p_OpenBabel__transform3d);
le_swig__p_p_OpenBabel__OBForceField=zend_register_list_destructors_ex(_wrap_destroy_p_p_OpenBabel__OBForceField,NULL,(char *)(SWIGTYPE_p_p_OpenBabel__OBForceField->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_OpenBabel__OBForceField,&le_swig__p_p_OpenBabel__OBForceField);
le_swig__p_OpenBabel__OBForceField=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBForceField,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBForceField->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBForceField,&le_swig__p_OpenBabel__OBForceField);
le_swig__p_std__vectorT_OpenBabel__OBResidue_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBResidue_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_t,&le_swig__p_std__vectorT_OpenBabel__OBResidue_t);
le_swig__p_std__vectorT_std__vectorT_int_t_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__vectorT_int_t_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t__iterator,&le_swig__p_std__vectorT_std__vectorT_int_t_t__iterator);
le_swig__p_std__vectorT_double_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_double_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_double_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_p_t__iterator,&le_swig__p_std__vectorT_double_p_t__iterator);
le_swig__p_std__vectorT_OpenBabel__OBResidue_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBResidue_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBResidue_p_t__iterator,&le_swig__p_std__vectorT_OpenBabel__OBResidue_p_t__iterator);
le_swig__p_std__vectorT_OpenBabel__OBBond_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBBond_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t__iterator,&le_swig__p_std__vectorT_OpenBabel__OBBond_p_t__iterator);
le_swig__p_std__vectorT_OpenBabel__OBAtom_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBAtom_p_t__iterator,&le_swig__p_std__vectorT_OpenBabel__OBAtom_p_t__iterator);
le_swig__p_PluginIterator=zend_register_list_destructors_ex(_wrap_destroy_p_PluginIterator,NULL,(char *)(SWIGTYPE_p_PluginIterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_PluginIterator,&le_swig__p_PluginIterator);
le_swig__p_std__vectorT_OpenBabel__OBRing_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBRing_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t__iterator,&le_swig__p_std__vectorT_OpenBabel__OBRing_p_t__iterator);
le_swig__p_std__vectorT_double_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_double_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_double_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_t__iterator,&le_swig__p_std__vectorT_double_t__iterator);
le_swig__p_std__vectorT_OpenBabel__OBRotor_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBRotor_p_t__iterator,&le_swig__p_std__vectorT_OpenBabel__OBRotor_p_t__iterator);
le_swig__p_std__vectorT_unsigned_char_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_char_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_char_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_char_p_t__iterator,&le_swig__p_std__vectorT_unsigned_char_p_t__iterator);
le_swig__p_std__vectorT_OpenBabel__OBGenericData_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBGenericData_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t,&le_swig__p_std__vectorT_OpenBabel__OBGenericData_p_t);
le_swig__p_OpenBabel__OBRingSearch=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRingSearch,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRingSearch->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRingSearch,&le_swig__p_OpenBabel__OBRingSearch);
le_swig__p_OpenBabel__OBSSMatch=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSSMatch,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSSMatch->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSSMatch,&le_swig__p_OpenBabel__OBSSMatch);
le_swig__p_OpenBabel__OBRingTyper=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRingTyper,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRingTyper->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRingTyper,&le_swig__p_OpenBabel__OBRingTyper);
le_swig__p_std__listT_OpenBabel__transform3d_p_t__const_iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__listT_OpenBabel__transform3d_p_t__const_iterator,NULL,(char *)(SWIGTYPE_p_std__listT_OpenBabel__transform3d_p_t__const_iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__listT_OpenBabel__transform3d_p_t__const_iterator,&le_swig__p_std__listT_OpenBabel__transform3d_p_t__const_iterator);
le_swig__p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,NULL,(char *)(SWIGTYPE_p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,&le_swig__p_OpenBabel__quadT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t);
le_swig__p_OpenBabel__OBMol=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMol,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMol->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMol,&le_swig__p_OpenBabel__OBMol);
le_swig__p_OpenBabel__Template=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__Template,NULL,(char *)(SWIGTYPE_p_OpenBabel__Template->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__Template,&le_swig__p_OpenBabel__Template);
le_swig__p_OpenBabel__OBQueryAtom=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBQueryAtom,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBQueryAtom->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBQueryAtom,&le_swig__p_OpenBabel__OBQueryAtom);
le_swig__p_OpenBabel__OBMolRingIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolRingIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolRingIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolRingIter,&le_swig__p_OpenBabel__OBMolRingIter);
le_swig__p_std__istream=zend_register_list_destructors_ex(_wrap_destroy_p_std__istream,NULL,(char *)(SWIGTYPE_p_std__istream->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__istream,&le_swig__p_std__istream);
le_swig__p_std__ostream=zend_register_list_destructors_ex(_wrap_destroy_p_std__ostream,NULL,(char *)(SWIGTYPE_p_std__ostream->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__ostream,&le_swig__p_std__ostream);
le_swig__p_OpenBabel__CharPtrLess=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__CharPtrLess,NULL,(char *)(SWIGTYPE_p_OpenBabel__CharPtrLess->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__CharPtrLess,&le_swig__p_OpenBabel__CharPtrLess);
le_swig__p_OpenBabel__OBOrbitalData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBOrbitalData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBOrbitalData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBOrbitalData,&le_swig__p_OpenBabel__OBOrbitalData);
le_swig__p_OpenBabel__OBChiralData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBChiralData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBChiralData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBChiralData,&le_swig__p_OpenBabel__OBChiralData);
le_swig__p_OpenBabel__FastSearchIndexer=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__FastSearchIndexer,NULL,(char *)(SWIGTYPE_p_OpenBabel__FastSearchIndexer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__FastSearchIndexer,&le_swig__p_OpenBabel__FastSearchIndexer);
le_swig__p_OpenBabel__OBMolBondIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolBondIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolBondIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolBondIter,&le_swig__p_OpenBabel__OBMolBondIter);
le_swig__p_OpenBabel__OBAtomBondIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAtomBondIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAtomBondIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAtomBondIter,&le_swig__p_OpenBabel__OBAtomBondIter);
le_swig__p_OpenBabel__OBInternalCoord=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBInternalCoord,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBInternalCoord->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBInternalCoord,&le_swig__p_OpenBabel__OBInternalCoord);
le_swig__p_std__mapT_std__string_std__string_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__mapT_std__string_std__string_t,NULL,(char *)(SWIGTYPE_p_std__mapT_std__string_std__string_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__mapT_std__string_std__string_t,&le_swig__p_std__mapT_std__string_std__string_t);
le_swig__p_std__vectorT_std__string_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__string_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__string_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__string_t,&le_swig__p_std__vectorT_std__string_t);
le_swig__p_OpenBabel__OBChainsParser=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBChainsParser,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBChainsParser->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBChainsParser,&le_swig__p_OpenBabel__OBChainsParser);
le_swig__p_std__pairT_std__string_std__string_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__pairT_std__string_std__string_t,NULL,(char *)(SWIGTYPE_p_std__pairT_std__string_std__string_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__pairT_std__string_std__string_t,&le_swig__p_std__pairT_std__string_std__string_t);
le_swig__p_OpenBabel__OBPairData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBPairData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBPairData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBPairData,&le_swig__p_OpenBabel__OBPairData);
le_swig__p_std__type_info=zend_register_list_destructors_ex(_wrap_destroy_p_std__type_info,NULL,(char *)(SWIGTYPE_p_std__type_info->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__type_info,&le_swig__p_std__type_info);
le_swig__p_std__listT_OpenBabel__vector3_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__listT_OpenBabel__vector3_t,NULL,(char *)(SWIGTYPE_p_std__listT_OpenBabel__vector3_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__listT_OpenBabel__vector3_t,&le_swig__p_std__listT_OpenBabel__vector3_t);
le_swig__p_std__vectorT_OpenBabel__vector3_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__vector3_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__vector3_t,&le_swig__p_std__vectorT_OpenBabel__vector3_t);
le_swig__p_OpenBabel__OBResidueIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBResidueIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBResidueIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBResidueIter,&le_swig__p_OpenBabel__OBResidueIter);
le_swig__p_OpenBabel__OBFormat=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFormat,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFormat->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFormat,&le_swig__p_OpenBabel__OBFormat);
le_swig__p_p_OpenBabel__OBFormat=zend_register_list_destructors_ex(_wrap_destroy_p_p_OpenBabel__OBFormat,NULL,(char *)(SWIGTYPE_p_p_OpenBabel__OBFormat->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_OpenBabel__OBFormat,&le_swig__p_p_OpenBabel__OBFormat);
le_swig__p_OpenBabel__OBMolAtomDFSIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolAtomDFSIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolAtomDFSIter,&le_swig__p_OpenBabel__OBMolAtomDFSIter);
le_swig__p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,NULL,(char *)(SWIGTYPE_p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,&le_swig__p_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t);
le_swig__p_std__vectorT_OpenBabel__OBInternalCoord_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBInternalCoord_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t,&le_swig__p_std__vectorT_OpenBabel__OBInternalCoord_p_t);
le_swig__p_OpenBabel__OBMolAtomBFSIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolAtomBFSIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolAtomBFSIter,&le_swig__p_OpenBabel__OBMolAtomBFSIter);
le_swig__p_OpenBabel__OBMolBondBFSIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolBondBFSIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolBondBFSIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolBondBFSIter,&le_swig__p_OpenBabel__OBMolBondBFSIter);
le_swig__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t,NULL,(char *)(SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t,&le_swig__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t);
le_swig__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator,NULL,(char *)(SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator,&le_swig__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_t__const_iterator);
le_swig__p_OpenBabel__OBCommentData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBCommentData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBCommentData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBCommentData,&le_swig__p_OpenBabel__OBCommentData);
le_swig__p_word_vector=zend_register_list_destructors_ex(_wrap_destroy_p_word_vector,NULL,(char *)(SWIGTYPE_p_word_vector->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_word_vector,&le_swig__p_word_vector);
le_swig__p_OpenBabel__OBStereo=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBStereo,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBStereo->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBStereo,&le_swig__p_OpenBabel__OBStereo);
le_swig__p_OpenBabel__OBTetrahedralStereo=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBTetrahedralStereo,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBTetrahedralStereo->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBTetrahedralStereo,&le_swig__p_OpenBabel__OBTetrahedralStereo);
le_swig__p_OpenBabel__OBSquarePlanarStereo=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSquarePlanarStereo,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSquarePlanarStereo->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSquarePlanarStereo,&le_swig__p_OpenBabel__OBSquarePlanarStereo);
le_swig__p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t,&le_swig__p_std__vectorT_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t_t);
le_swig__p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t,&le_swig__p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t);
le_swig__p_OpenBabel__OBDOSData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBDOSData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBDOSData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBDOSData,&le_swig__p_OpenBabel__OBDOSData);
le_swig__p_OpenBabel__OBMatrixData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMatrixData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMatrixData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMatrixData,&le_swig__p_OpenBabel__OBMatrixData);
le_swig__p_OpenBabel__OBRotorList=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRotorList,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRotorList->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRotorList,&le_swig__p_OpenBabel__OBRotorList);
le_swig__p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator,&le_swig__p_std__vectorT_OpenBabel__OBGenericData_p_t__iterator);
le_swig__p_OpenBabel__OBRing=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRing,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRing->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRing,&le_swig__p_OpenBabel__OBRing);
le_swig__p_OpenBabel__OBRotorKeys=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRotorKeys,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRotorKeys->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRotorKeys,&le_swig__p_OpenBabel__OBRotorKeys);
le_swig__p_OpenBabel__OBRotorRules=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRotorRules,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRotorRules->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRotorRules,&le_swig__p_OpenBabel__OBRotorRules);
le_swig__p_OpenBabel__OBStereoFacade=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBStereoFacade,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBStereoFacade->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBStereoFacade,&le_swig__p_OpenBabel__OBStereoFacade);
le_swig__p_OpenBabel__OBFFConstraints=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFFConstraints,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFFConstraints->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFFConstraints,&le_swig__p_OpenBabel__OBFFConstraints);
le_swig__p_OpenBabel__OBFreeGridPoint=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFreeGridPoint,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFreeGridPoint->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFreeGridPoint,&le_swig__p_OpenBabel__OBFreeGridPoint);
le_swig__p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t,&le_swig__p_std__vectorT_OpenBabel__tripleT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_double_t_t);
le_swig__p_OpenBabel__rotor_digit=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__rotor_digit,NULL,(char *)(SWIGTYPE_p_OpenBabel__rotor_digit->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__rotor_digit,&le_swig__p_OpenBabel__rotor_digit);
le_swig__p_OpenBabel__OBAtomClassData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAtomClassData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAtomClassData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAtomClassData,&le_swig__p_OpenBabel__OBAtomClassData);
le_swig__p_std__vectorT_OpenBabel__OBOrbital_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBOrbital_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBOrbital_t,&le_swig__p_std__vectorT_OpenBabel__OBOrbital_t);
le_swig__p_OpenBabel__OBAromaticTyper=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAromaticTyper,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAromaticTyper->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAromaticTyper,&le_swig__p_OpenBabel__OBAromaticTyper);
le_swig__p_OpenBabel__OBPlugin=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBPlugin,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBPlugin->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBPlugin,&le_swig__p_OpenBabel__OBPlugin);
le_swig__p_p_int=zend_register_list_destructors_ex(_wrap_destroy_p_p_int,NULL,(char *)(SWIGTYPE_p_p_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_int,&le_swig__p_p_int);
le_swig__p_int=zend_register_list_destructors_ex(_wrap_destroy_p_int,NULL,(char *)(SWIGTYPE_p_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_int,&le_swig__p_int);
le_swig__p_OpenBabel__OBGraphSym=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBGraphSym,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBGraphSym->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBGraphSym,&le_swig__p_OpenBabel__OBGraphSym);
le_swig__p_OpenBabel__Pattern=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__Pattern,NULL,(char *)(SWIGTYPE_p_OpenBabel__Pattern->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__Pattern,&le_swig__p_OpenBabel__Pattern);
le_swig__p_OpenBabel__OBSmartsPattern=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSmartsPattern,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSmartsPattern->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSmartsPattern,&le_swig__p_OpenBabel__OBSmartsPattern);
le_swig__p_OpenBabel__DoubleType=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__DoubleType,NULL,(char *)(SWIGTYPE_p_OpenBabel__DoubleType->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__DoubleType,&le_swig__p_OpenBabel__DoubleType);
le_swig__p_OpenBabel__matrix3x3=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__matrix3x3,NULL,(char *)(SWIGTYPE_p_OpenBabel__matrix3x3->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__matrix3x3,&le_swig__p_OpenBabel__matrix3x3);
le_swig__p_Refs=zend_register_list_destructors_ex(_wrap_destroy_p_Refs,NULL,(char *)(SWIGTYPE_p_Refs->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Refs,&le_swig__p_Refs);
le_swig__p_OpenBabel__OBRotorRule=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRotorRule,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRotorRule->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRotorRule,&le_swig__p_OpenBabel__OBRotorRule);
le_swig__p_OpenBabel__OBMolAngleIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolAngleIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolAngleIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolAngleIter,&le_swig__p_OpenBabel__OBMolAngleIter);
le_swig__p_OpenBabel__OBCisTransStereo=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBCisTransStereo,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBCisTransStereo->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBCisTransStereo,&le_swig__p_OpenBabel__OBCisTransStereo);
le_swig__p_OpenBabel__OBMessageHandler=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMessageHandler,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMessageHandler->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMessageHandler,&le_swig__p_OpenBabel__OBMessageHandler);
le_swig__p_bool=zend_register_list_destructors_ex(_wrap_destroy_p_bool,NULL,(char *)(SWIGTYPE_p_bool->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bool,&le_swig__p_bool);
le_swig__p_value_type=zend_register_list_destructors_ex(_wrap_destroy_p_value_type,NULL,(char *)(SWIGTYPE_p_value_type->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_value_type,&le_swig__p_value_type);
le_swig__p_difference_type=zend_register_list_destructors_ex(_wrap_destroy_p_difference_type,NULL,(char *)(SWIGTYPE_p_difference_type->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_difference_type,&le_swig__p_difference_type);
le_swig__p_std__vectorT_std__pairT_int_int_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__pairT_int_int_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t,&le_swig__p_std__vectorT_std__pairT_int_int_t_t);
le_swig__p_std__vectorT_std__vectorT_unsigned_int_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__vectorT_unsigned_int_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,&le_swig__p_std__vectorT_std__vectorT_unsigned_int_t_t);
le_swig__p_std__vectorT_std__vectorT_int_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__vectorT_int_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t,&le_swig__p_std__vectorT_std__vectorT_int_t_t);
le_swig__p_OpenBabel__OBAtomTyper=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAtomTyper,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAtomTyper->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAtomTyper,&le_swig__p_OpenBabel__OBAtomTyper);
le_swig__p_Mapping=zend_register_list_destructors_ex(_wrap_destroy_p_Mapping,NULL,(char *)(SWIGTYPE_p_Mapping->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Mapping,&le_swig__p_Mapping);
le_swig__p_OpenBabel__OBMolTorsionIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolTorsionIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolTorsionIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolTorsionIter,&le_swig__p_OpenBabel__OBMolTorsionIter);
le_swig__p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator,&le_swig__p_std__vectorT_OpenBabel__OBInternalCoord_p_t__iterator);
le_swig__p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator,&le_swig__p_std__vectorT_OpenBabel__OBFreeGridPoint_p_t__iterator);
le_swig__p_OpenBabel__OBBond=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBBond,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBBond->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBBond,&le_swig__p_OpenBabel__OBBond);
le_swig__p_OpenBabel__OBRTree=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRTree,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRTree->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRTree,&le_swig__p_OpenBabel__OBRTree);
le_swig__p_OpenBabel__OBAtomicHeatOfFormationTable=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAtomicHeatOfFormationTable,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAtomicHeatOfFormationTable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAtomicHeatOfFormationTable,&le_swig__p_OpenBabel__OBAtomicHeatOfFormationTable);
le_swig__p_OpenBabel__OBRandom=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRandom,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRandom->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRandom,&le_swig__p_OpenBabel__OBRandom);
le_swig__p_p_double=zend_register_list_destructors_ex(_wrap_destroy_p_p_double,NULL,(char *)(SWIGTYPE_p_p_double->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_double,&le_swig__p_p_double);
le_swig__p_double=zend_register_list_destructors_ex(_wrap_destroy_p_double,NULL,(char *)(SWIGTYPE_p_double->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_double,&le_swig__p_double);
le_swig__double=zend_register_list_destructors_ex(_wrap_destroy_double,NULL,(char *)(SWIGTYPE_double->name),module_number);
SWIG_TypeClientData(SWIGTYPE_double,&le_swig__double);
le_swig__p_a_3__double=zend_register_list_destructors_ex(_wrap_destroy_p_a_3__double,NULL,(char *)(SWIGTYPE_p_a_3__double->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_a_3__double,&le_swig__p_a_3__double);
le_swig__p_PluginMapType=zend_register_list_destructors_ex(_wrap_destroy_p_PluginMapType,NULL,(char *)(SWIGTYPE_p_PluginMapType->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_PluginMapType,&le_swig__p_PluginMapType);
le_swig__p_OpenBabel__OBRingData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRingData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRingData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRingData,&le_swig__p_OpenBabel__OBRingData);
le_swig__p_std__vectorT_unsigned_long_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_long_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_long_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_long_t,&le_swig__p_std__vectorT_unsigned_long_t);
le_swig__p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t,NULL,(char *)(SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t,&le_swig__p_std__mapT_OpenBabel__OBBond_p_unsigned_long_t);
le_swig__p_OpenBabel__OBBase=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBBase,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBBase,&le_swig__p_OpenBabel__OBBase);
le_swig__p_OpenBabel__OBQuery=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBQuery,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBQuery->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBQuery,&le_swig__p_OpenBabel__OBQuery);
le_swig__p_Mappings=zend_register_list_destructors_ex(_wrap_destroy_p_Mappings,NULL,(char *)(SWIGTYPE_p_Mappings->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Mappings,&le_swig__p_Mappings);
le_swig__p_OpenBabel__OBQueryBond=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBQueryBond,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBQueryBond->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBQueryBond,&le_swig__p_OpenBabel__OBQueryBond);
le_swig__p_OpenBabel__OBConversion=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBConversion,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBConversion->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBConversion,&le_swig__p_OpenBabel__OBConversion);
le_swig__p_std__vectorT_OpenBabel__OBExternalBond_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBExternalBond_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBExternalBond_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBExternalBond_t,&le_swig__p_std__vectorT_OpenBabel__OBExternalBond_t);
le_swig__p_std__vectorT_OpenBabel__OBBond_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBBond_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_t,&le_swig__p_std__vectorT_OpenBabel__OBBond_t);
le_swig__p_std__binary_functionT_char_const_p_char_const_p_bool_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__binary_functionT_char_const_p_char_const_p_bool_t,NULL,(char *)(SWIGTYPE_p_std__binary_functionT_char_const_p_char_const_p_bool_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__binary_functionT_char_const_p_char_const_p_bool_t,&le_swig__p_std__binary_functionT_char_const_p_char_const_p_bool_t);
le_swig__p_OpenBabel__OBExternalBondData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBExternalBondData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBExternalBondData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBExternalBondData,&le_swig__p_OpenBabel__OBExternalBondData);
le_swig__p_std__vectorT_OpenBabel__OBRing_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBRing_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBRing_p_t,&le_swig__p_std__vectorT_OpenBabel__OBRing_p_t);
le_swig__p_OpenBabel__OBSetData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSetData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSetData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSetData,&le_swig__p_OpenBabel__OBSetData);
le_swig__p_OpenBabel__OBResidueData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBResidueData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBResidueData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBResidueData,&le_swig__p_OpenBabel__OBResidueData);
le_swig__p_p_OpenBabel__OBChargeModel=zend_register_list_destructors_ex(_wrap_destroy_p_p_OpenBabel__OBChargeModel,NULL,(char *)(SWIGTYPE_p_p_OpenBabel__OBChargeModel->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_OpenBabel__OBChargeModel,&le_swig__p_p_OpenBabel__OBChargeModel);
le_swig__p_OpenBabel__OBChargeModel=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBChargeModel,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBChargeModel->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBChargeModel,&le_swig__p_OpenBabel__OBChargeModel);
le_swig__p_OpenBabel__OBStereoBase=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBStereoBase,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBStereoBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBStereoBase,&le_swig__p_OpenBabel__OBStereoBase);
le_swig__p_OpenBabel__OBFingerprint=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFingerprint,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFingerprint->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFingerprint,&le_swig__p_OpenBabel__OBFingerprint);
le_swig__p_p_OpenBabel__OBFingerprint=zend_register_list_destructors_ex(_wrap_destroy_p_p_OpenBabel__OBFingerprint,NULL,(char *)(SWIGTYPE_p_p_OpenBabel__OBFingerprint->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_OpenBabel__OBFingerprint,&le_swig__p_p_OpenBabel__OBFingerprint);
le_swig__p_size_type=zend_register_list_destructors_ex(_wrap_destroy_p_size_type,NULL,(char *)(SWIGTYPE_p_size_type->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_size_type,&le_swig__p_size_type);
le_swig__p_OpenBabel__OBSpectrophore=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSpectrophore,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSpectrophore->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSpectrophore,&le_swig__p_OpenBabel__OBSpectrophore);
le_swig__p_OpenBabel__OBAtomHOF=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAtomHOF,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAtomHOF->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAtomHOF,&le_swig__p_OpenBabel__OBAtomHOF);
le_swig__p_OpenBabel__OBConformerData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBConformerData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBConformerData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBConformerData,&le_swig__p_OpenBabel__OBConformerData);
le_swig__p_std__vectorT_OpenBabel__OBBond_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBBond_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBBond_p_t,&le_swig__p_std__vectorT_OpenBabel__OBBond_p_t);
le_swig__p_std__vectorT_OpenBabel__OBQueryBond_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBQueryBond_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryBond_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBQueryBond_p_t,&le_swig__p_std__vectorT_OpenBabel__OBQueryBond_p_t);
le_swig__p_std__setT_OpenBabel__OBBond_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__setT_OpenBabel__OBBond_p_t,NULL,(char *)(SWIGTYPE_p_std__setT_OpenBabel__OBBond_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__setT_OpenBabel__OBBond_p_t,&le_swig__p_std__setT_OpenBabel__OBBond_p_t);
le_swig__p_obsharedptrT_OpenBabel__OBMol_t=zend_register_list_destructors_ex(_wrap_destroy_p_obsharedptrT_OpenBabel__OBMol_t,NULL,(char *)(SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_obsharedptrT_OpenBabel__OBMol_t,&le_swig__p_obsharedptrT_OpenBabel__OBMol_t);
le_swig__p_Unit=zend_register_list_destructors_ex(_wrap_destroy_p_Unit,NULL,(char *)(SWIGTYPE_p_Unit->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Unit,&le_swig__p_Unit);
le_swig__p_std__vectorT_OpenBabel__OBMol_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBMol_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBMol_t,&le_swig__p_std__vectorT_OpenBabel__OBMol_t);
le_swig__p_OpenBabel__LineSearchType=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__LineSearchType,NULL,(char *)(SWIGTYPE_p_OpenBabel__LineSearchType->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__LineSearchType,&le_swig__p_OpenBabel__LineSearchType);
le_swig__p_OpenBabel__OBMolAtomIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBMolAtomIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBMolAtomIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMolAtomIter,&le_swig__p_OpenBabel__OBMolAtomIter);
le_swig__p_OpenBabel__OBAtomAtomIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAtomAtomIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAtomAtomIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAtomAtomIter,&le_swig__p_OpenBabel__OBAtomAtomIter);
le_swig__p_OpenBabel__OBResidueAtomIter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBResidueAtomIter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBResidueAtomIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBResidueAtomIter,&le_swig__p_OpenBabel__OBResidueAtomIter);
le_swig__p_std__vectorT_OpenBabel__OBBase_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBBase_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBBase_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBBase_p_t,&le_swig__p_std__vectorT_OpenBabel__OBBase_p_t);
le_swig__p_RefIter=zend_register_list_destructors_ex(_wrap_destroy_p_RefIter,NULL,(char *)(SWIGTYPE_p_RefIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_RefIter,&le_swig__p_RefIter);
le_swig__p_ConstRefIter=zend_register_list_destructors_ex(_wrap_destroy_p_ConstRefIter,NULL,(char *)(SWIGTYPE_p_ConstRefIter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ConstRefIter,&le_swig__p_ConstRefIter);
le_swig__p_std__vectorT_unsigned_short_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_short_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_short_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_short_t,&le_swig__p_std__vectorT_unsigned_short_t);
le_swig__p_std__vectorT_OpenBabel__OBTorsion_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_OpenBabel__OBTorsion_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_OpenBabel__OBTorsion_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_OpenBabel__OBTorsion_t,&le_swig__p_std__vectorT_OpenBabel__OBTorsion_t);
le_swig__p_OpenBabel__OBGridData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBGridData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBGridData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBGridData,&le_swig__p_OpenBabel__OBGridData);
le_swig__p_OpenBabel__OBTorsion=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBTorsion,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBTorsion->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBTorsion,&le_swig__p_OpenBabel__OBTorsion);
le_swig__int=zend_register_list_destructors_ex(_wrap_destroy_int,NULL,(char *)(SWIGTYPE_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_int,&le_swig__int);
le_swig__p_OpenBabel__OBGenericData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBGenericData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBGenericData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBGenericData,&le_swig__p_OpenBabel__OBGenericData);
le_swig__p_OpenBabel__OBError=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBError,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBError->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBError,&le_swig__p_OpenBabel__OBError);
le_swig__p_std__streampos=zend_register_list_destructors_ex(_wrap_destroy_p_std__streampos,NULL,(char *)(SWIGTYPE_p_std__streampos->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__streampos,&le_swig__p_std__streampos);
le_swig__p_OpenBabel__OBFFCalculation2=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFFCalculation2,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFFCalculation2->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFFCalculation2,&le_swig__p_OpenBabel__OBFFCalculation2);
le_swig__p_OpenBabel__OBFFCalculation3=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFFCalculation3,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFFCalculation3->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFFCalculation3,&le_swig__p_OpenBabel__OBFFCalculation3);
le_swig__p_OpenBabel__OBFFCalculation4=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFFCalculation4,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFFCalculation4->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFFCalculation4,&le_swig__p_OpenBabel__OBFFCalculation4);
le_swig__p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t,&le_swig__p_std__vectorT_std__vectorT_OpenBabel__OBStereoUnit_t_t);
le_swig__p_OpenBabel__OBAngleData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBAngleData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBAngleData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAngleData,&le_swig__p_OpenBabel__OBAngleData);
le_swig__p_OpenBabel__OBBuilder=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBBuilder,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBBuilder->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBBuilder,&le_swig__p_OpenBabel__OBBuilder);
le_swig__p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t,NULL,(char *)(SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t,&le_swig__p_std__mapT_OpenBabel__OBBond_p_OpenBabel__OBStereo__BondDirection_t);
le_swig__p_OpenBabel__OBFFParameter=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFFParameter,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFFParameter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFFParameter,&le_swig__p_OpenBabel__OBFFParameter);
le_swig__p_OpenBabel__OBFreeGrid=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBFreeGrid,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBFreeGrid->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFreeGrid,&le_swig__p_OpenBabel__OBFreeGrid);
le_swig__p_OpenBabel__OBSerialNums=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBSerialNums,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBSerialNums->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBSerialNums,&le_swig__p_OpenBabel__OBSerialNums);
le_swig__p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t,&le_swig__p_std__vectorT_std__vectorT_OpenBabel__vector3_t_t);
le_swig__p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,NULL,(char *)(SWIGTYPE_p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t,&le_swig__p_std__pairT_OpenBabel__OBAtom_p_OpenBabel__OBAtom_p_t);
le_swig__p_char=zend_register_list_destructors_ex(_wrap_destroy_p_char,NULL,(char *)(SWIGTYPE_p_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_char,&le_swig__p_char);
le_swig__p_OpenBabel__vector3=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__vector3,NULL,(char *)(SWIGTYPE_p_OpenBabel__vector3->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__vector3,&le_swig__p_OpenBabel__vector3);
le_swig__p_OpenBabel__OBElectronicTransitionData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBElectronicTransitionData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBElectronicTransitionData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBElectronicTransitionData,&le_swig__p_OpenBabel__OBElectronicTransitionData);
le_swig__p_OpenBabel__OBRotationData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBRotationData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBRotationData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBRotationData,&le_swig__p_OpenBabel__OBRotationData);
le_swig__p_OpenBabel__OBTorsionData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBTorsionData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBTorsionData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBTorsionData,&le_swig__p_OpenBabel__OBTorsionData);
le_swig__p_OpenBabel__OBVibrationData=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBVibrationData,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBVibrationData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBVibrationData,&le_swig__p_OpenBabel__OBVibrationData);
le_swig__p_OpenBabel__OBVirtualBond=zend_register_list_destructors_ex(_wrap_destroy_p_OpenBabel__OBVirtualBond,NULL,(char *)(SWIGTYPE_p_OpenBabel__OBVirtualBond->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBVirtualBond,&le_swig__p_OpenBabel__OBVirtualBond);
CG(active_class_entry) = NULL;
/* end oinit subsection */

/* cinit subsection */
SWIG_DOUBLE_CONSTANT(M_PI, 3.14159265358979323846);
SWIG_DOUBLE_CONSTANT(RAD_TO_DEG, (180.0/3.14159265358979323846));
SWIG_DOUBLE_CONSTANT(DEG_TO_RAD, (3.14159265358979323846/180.0));
SWIG_LONG_CONSTANT(UndefinedData, (int)OpenBabel::OBGenericDataType::UndefinedData);
SWIG_LONG_CONSTANT(PairData, (int)OpenBabel::OBGenericDataType::PairData);
SWIG_LONG_CONSTANT(EnergyData, (int)OpenBabel::OBGenericDataType::EnergyData);
SWIG_LONG_CONSTANT(CommentData, (int)OpenBabel::OBGenericDataType::CommentData);
SWIG_LONG_CONSTANT(ConformerData, (int)OpenBabel::OBGenericDataType::ConformerData);
SWIG_LONG_CONSTANT(ExternalBondData, (int)OpenBabel::OBGenericDataType::ExternalBondData);
SWIG_LONG_CONSTANT(RotamerList, (int)OpenBabel::OBGenericDataType::RotamerList);
SWIG_LONG_CONSTANT(VirtualBondData, (int)OpenBabel::OBGenericDataType::VirtualBondData);
SWIG_LONG_CONSTANT(RingData, (int)OpenBabel::OBGenericDataType::RingData);
SWIG_LONG_CONSTANT(TorsionData, (int)OpenBabel::OBGenericDataType::TorsionData);
SWIG_LONG_CONSTANT(AngleData, (int)OpenBabel::OBGenericDataType::AngleData);
SWIG_LONG_CONSTANT(SerialNums, (int)OpenBabel::OBGenericDataType::SerialNums);
SWIG_LONG_CONSTANT(UnitCell, (int)OpenBabel::OBGenericDataType::UnitCell);
SWIG_LONG_CONSTANT(SpinData, (int)OpenBabel::OBGenericDataType::SpinData);
SWIG_LONG_CONSTANT(ChargeData, (int)OpenBabel::OBGenericDataType::ChargeData);
SWIG_LONG_CONSTANT(SymmetryData, (int)OpenBabel::OBGenericDataType::SymmetryData);
SWIG_LONG_CONSTANT(ChiralData, (int)OpenBabel::OBGenericDataType::ChiralData);
SWIG_LONG_CONSTANT(OccupationData, (int)OpenBabel::OBGenericDataType::OccupationData);
SWIG_LONG_CONSTANT(DensityData, (int)OpenBabel::OBGenericDataType::DensityData);
SWIG_LONG_CONSTANT(ElectronicData, (int)OpenBabel::OBGenericDataType::ElectronicData);
SWIG_LONG_CONSTANT(VibrationData, (int)OpenBabel::OBGenericDataType::VibrationData);
SWIG_LONG_CONSTANT(RotationData, (int)OpenBabel::OBGenericDataType::RotationData);
SWIG_LONG_CONSTANT(NuclearData, (int)OpenBabel::OBGenericDataType::NuclearData);
SWIG_LONG_CONSTANT(SetData, (int)OpenBabel::OBGenericDataType::SetData);
SWIG_LONG_CONSTANT(GridData, (int)OpenBabel::OBGenericDataType::GridData);
SWIG_LONG_CONSTANT(VectorData, (int)OpenBabel::OBGenericDataType::VectorData);
SWIG_LONG_CONSTANT(MatrixData, (int)OpenBabel::OBGenericDataType::MatrixData);
SWIG_LONG_CONSTANT(StereoData, (int)OpenBabel::OBGenericDataType::StereoData);
SWIG_LONG_CONSTANT(DOSData, (int)OpenBabel::OBGenericDataType::DOSData);
SWIG_LONG_CONSTANT(ElectronicTransitionData, (int)OpenBabel::OBGenericDataType::ElectronicTransitionData);
SWIG_LONG_CONSTANT(CustomData0, (int)OpenBabel::OBGenericDataType::CustomData0);
SWIG_LONG_CONSTANT(CustomData1, (int)OpenBabel::OBGenericDataType::CustomData1);
SWIG_LONG_CONSTANT(CustomData2, (int)OpenBabel::OBGenericDataType::CustomData2);
SWIG_LONG_CONSTANT(CustomData3, (int)OpenBabel::OBGenericDataType::CustomData3);
SWIG_LONG_CONSTANT(CustomData4, (int)OpenBabel::OBGenericDataType::CustomData4);
SWIG_LONG_CONSTANT(CustomData5, (int)OpenBabel::OBGenericDataType::CustomData5);
SWIG_LONG_CONSTANT(CustomData6, (int)OpenBabel::OBGenericDataType::CustomData6);
SWIG_LONG_CONSTANT(CustomData7, (int)OpenBabel::OBGenericDataType::CustomData7);
SWIG_LONG_CONSTANT(CustomData8, (int)OpenBabel::OBGenericDataType::CustomData8);
SWIG_LONG_CONSTANT(CustomData9, (int)OpenBabel::OBGenericDataType::CustomData9);
SWIG_LONG_CONSTANT(CustomData10, (int)OpenBabel::OBGenericDataType::CustomData10);
SWIG_LONG_CONSTANT(CustomData11, (int)OpenBabel::OBGenericDataType::CustomData11);
SWIG_LONG_CONSTANT(CustomData12, (int)OpenBabel::OBGenericDataType::CustomData12);
SWIG_LONG_CONSTANT(CustomData13, (int)OpenBabel::OBGenericDataType::CustomData13);
SWIG_LONG_CONSTANT(CustomData14, (int)OpenBabel::OBGenericDataType::CustomData14);
SWIG_LONG_CONSTANT(CustomData15, (int)OpenBabel::OBGenericDataType::CustomData15);
SWIG_LONG_CONSTANT(any, (int)OpenBabel::any);
SWIG_LONG_CONSTANT(fileformatInput, (int)OpenBabel::fileformatInput);
SWIG_LONG_CONSTANT(userInput, (int)OpenBabel::userInput);
SWIG_LONG_CONSTANT(perceived, (int)OpenBabel::perceived);
SWIG_LONG_CONSTANT(external, (int)OpenBabel::external);
SWIG_LONG_CONSTANT(local, (int)OpenBabel::local);
SWIG_LONG_CONSTANT(OBUnitCell_Undefined, (int)OpenBabel::OBUnitCell::Undefined);
SWIG_LONG_CONSTANT(OBUnitCell_Triclinic, (int)OpenBabel::OBUnitCell::Triclinic);
SWIG_LONG_CONSTANT(OBUnitCell_Monoclinic, (int)OpenBabel::OBUnitCell::Monoclinic);
SWIG_LONG_CONSTANT(OBUnitCell_Orthorhombic, (int)OpenBabel::OBUnitCell::Orthorhombic);
SWIG_LONG_CONSTANT(OBUnitCell_Tetragonal, (int)OpenBabel::OBUnitCell::Tetragonal);
SWIG_LONG_CONSTANT(OBUnitCell_Rhombohedral, (int)OpenBabel::OBUnitCell::Rhombohedral);
SWIG_LONG_CONSTANT(OBUnitCell_Hexagonal, (int)OpenBabel::OBUnitCell::Hexagonal);
SWIG_LONG_CONSTANT(OBUnitCell_Cubic, (int)OpenBabel::OBUnitCell::Cubic);
SWIG_LONG_CONSTANT(output, (int)OpenBabel::output);
SWIG_LONG_CONSTANT(input, (int)OpenBabel::input);
SWIG_LONG_CONSTANT(calcvolume, (int)OpenBabel::calcvolume);
SWIG_LONG_CONSTANT(OBRotationData_UNKNOWN, (int)OpenBabel::OBRotationData::UNKNOWN);
SWIG_LONG_CONSTANT(OBRotationData_ASYMMETRIC, (int)OpenBabel::OBRotationData::ASYMMETRIC);
SWIG_LONG_CONSTANT(OBRotationData_SYMMETRIC, (int)OpenBabel::OBRotationData::SYMMETRIC);
SWIG_LONG_CONSTANT(OBRotationData_LINEAR, (int)OpenBabel::OBRotationData::LINEAR);
SWIG_LONG_CONSTANT(OBGridData_BOHR, (int)OpenBabel::OBGridData::BOHR);
SWIG_LONG_CONSTANT(OBGridData_ANGSTROM, (int)OpenBabel::OBGridData::ANGSTROM);
SWIG_LONG_CONSTANT(OBGridData_OTHER, (int)OpenBabel::OBGridData::OTHER);
SWIG_LONG_CONSTANT(MaxMonoAtom, (int)20);
SWIG_LONG_CONSTANT(MaxMonoBond, (int)20);
SWIG_LONG_CONSTANT(obError, (int)OpenBabel::obError);
SWIG_LONG_CONSTANT(obWarning, (int)OpenBabel::obWarning);
SWIG_LONG_CONSTANT(obInfo, (int)OpenBabel::obInfo);
SWIG_LONG_CONSTANT(obAuditMsg, (int)OpenBabel::obAuditMsg);
SWIG_LONG_CONSTANT(obDebug, (int)OpenBabel::obDebug);
SWIG_LONG_CONSTANT(always, (int)OpenBabel::always);
SWIG_LONG_CONSTANT(onceOnly, (int)OpenBabel::onceOnly);
SWIG_LONG_CONSTANT(NOTREADABLE, (int)0x01);
SWIG_LONG_CONSTANT(READONEONLY, (int)0x02);
SWIG_LONG_CONSTANT(READBINARY, (int)0x04);
SWIG_LONG_CONSTANT(ZEROATOMSOK, (int)0x08);
SWIG_LONG_CONSTANT(NOTWRITABLE, (int)0x10);
SWIG_LONG_CONSTANT(WRITEONEONLY, (int)0x20);
SWIG_LONG_CONSTANT(WRITEBINARY, (int)0x40);
SWIG_LONG_CONSTANT(READXML, (int)0x80);
SWIG_LONG_CONSTANT(DEPICTION2D, (int)0x100);
SWIG_LONG_CONSTANT(DEFAULTFORMAT, (int)0x4000);
SWIG_LONG_CONSTANT(OBConversion_INOPTIONS, (int)OpenBabel::OBConversion::INOPTIONS);
SWIG_LONG_CONSTANT(OBConversion_OUTOPTIONS, (int)OpenBabel::OBConversion::OUTOPTIONS);
SWIG_LONG_CONSTANT(OBConversion_GENOPTIONS, (int)OpenBabel::OBConversion::GENOPTIONS);
SWIG_LONG_CONSTANT(OBConversion_ALL, (int)OpenBabel::OBConversion::ALL);
SWIG_LONG_CONSTANT(MAXSETNO, (int)40);
SWIG_LONG_CONSTANT(MAXELEM, (int)1024);
SWIG_LONG_CONSTANT(MINELEM, (int)29);
SWIG_LONG_CONSTANT(MAXRES, (int)100);
SWIG_LONG_CONSTANT(MINRES, (int)54);
SWIG_LONG_CONSTANT(AA_ALA, (int)(1 << 1));
SWIG_LONG_CONSTANT(AA_GLY, (int)(1 << 2));
SWIG_LONG_CONSTANT(AA_LEU, (int)(1 << 3));
SWIG_LONG_CONSTANT(AA_SER, (int)(1 << 4));
SWIG_LONG_CONSTANT(AA_VAL, (int)(1 << 5));
SWIG_LONG_CONSTANT(AA_THR, (int)(1 << 6));
SWIG_LONG_CONSTANT(AA_LYS, (int)(1 << 7));
SWIG_LONG_CONSTANT(AA_ASP, (int)(1 << 8));
SWIG_LONG_CONSTANT(AA_ILE, (int)(1 << 9));
SWIG_LONG_CONSTANT(AA_ASN, (int)(1 << 10));
SWIG_LONG_CONSTANT(AA_GLU, (int)(1 << 11));
SWIG_LONG_CONSTANT(AA_PRO, (int)(1 << 12));
SWIG_LONG_CONSTANT(AA_ARG, (int)(1 << 13));
SWIG_LONG_CONSTANT(AA_PHE, (int)(1 << 14));
SWIG_LONG_CONSTANT(AA_GLN, (int)(1 << 15));
SWIG_LONG_CONSTANT(AA_TYR, (int)(1 << 16));
SWIG_LONG_CONSTANT(AA_HIS, (int)(1 << 17));
SWIG_LONG_CONSTANT(AA_CYS, (int)(1 << 18));
SWIG_LONG_CONSTANT(AA_MET, (int)(1 << 19));
SWIG_LONG_CONSTANT(AA_TRP, (int)(1 << 20));
SWIG_LONG_CONSTANT(ACIDIC, (int)OpenBabel::OBAminoAcidProperty::ACIDIC);
SWIG_LONG_CONSTANT(ACYCLIC, (int)OpenBabel::OBAminoAcidProperty::ACYCLIC);
SWIG_LONG_CONSTANT(ALIPHATIC, (int)OpenBabel::OBAminoAcidProperty::ALIPHATIC);
SWIG_LONG_CONSTANT(AROMATIC, (int)OpenBabel::OBAminoAcidProperty::AROMATIC);
SWIG_LONG_CONSTANT(BASIC, (int)OpenBabel::OBAminoAcidProperty::BASIC);
SWIG_LONG_CONSTANT(BURIED, (int)OpenBabel::OBAminoAcidProperty::BURIED);
SWIG_LONG_CONSTANT(CHARGED, (int)OpenBabel::OBAminoAcidProperty::CHARGED);
SWIG_LONG_CONSTANT(CYCLIC, (int)OpenBabel::OBAminoAcidProperty::CYCLIC);
SWIG_LONG_CONSTANT(HYDROPHOBIC, (int)OpenBabel::OBAminoAcidProperty::HYDROPHOBIC);
SWIG_LONG_CONSTANT(LARGE, (int)OpenBabel::OBAminoAcidProperty::LARGE);
SWIG_LONG_CONSTANT(MEDIUM, (int)OpenBabel::OBAminoAcidProperty::MEDIUM);
SWIG_LONG_CONSTANT(NEGATIVE, (int)OpenBabel::OBAminoAcidProperty::NEGATIVE);
SWIG_LONG_CONSTANT(NEUTRAL, (int)OpenBabel::OBAminoAcidProperty::NEUTRAL);
SWIG_LONG_CONSTANT(POLAR, (int)OpenBabel::OBAminoAcidProperty::POLAR);
SWIG_LONG_CONSTANT(POSITIVE, (int)OpenBabel::OBAminoAcidProperty::POSITIVE);
SWIG_LONG_CONSTANT(SMALL, (int)OpenBabel::OBAminoAcidProperty::SMALL);
SWIG_LONG_CONSTANT(SURFACE, (int)OpenBabel::OBAminoAcidProperty::SURFACE);
SWIG_LONG_CONSTANT(ALPHA_CARBON, (int)OpenBabel::OBResidueAtomProperty::ALPHA_CARBON);
SWIG_LONG_CONSTANT(AMINO_BACKBONE, (int)OpenBabel::OBResidueAtomProperty::AMINO_BACKBONE);
SWIG_LONG_CONSTANT(BACKBONE, (int)OpenBabel::OBResidueAtomProperty::BACKBONE);
SWIG_LONG_CONSTANT(CYSTEINE_SULPHUR, (int)OpenBabel::OBResidueAtomProperty::CYSTEINE_SULPHUR);
SWIG_LONG_CONSTANT(LIGAND, (int)OpenBabel::OBResidueAtomProperty::LIGAND);
SWIG_LONG_CONSTANT(NUCLEIC_BACKBONE, (int)OpenBabel::OBResidueAtomProperty::NUCLEIC_BACKBONE);
SWIG_LONG_CONSTANT(SHAPELY_BACKBONE, (int)OpenBabel::OBResidueAtomProperty::SHAPELY_BACKBONE);
SWIG_LONG_CONSTANT(SHAPELY_SPECIAL, (int)OpenBabel::OBResidueAtomProperty::SHAPELY_SPECIAL);
SWIG_LONG_CONSTANT(SIDECHAIN, (int)OpenBabel::OBResidueAtomProperty::SIDECHAIN);
SWIG_LONG_CONSTANT(SUGAR_PHOSPHATE, (int)OpenBabel::OBResidueAtomProperty::SUGAR_PHOSPHATE);
SWIG_LONG_CONSTANT(ALA, (int)OpenBabel::OBResidueIndex::ALA);
SWIG_LONG_CONSTANT(GLY, (int)OpenBabel::OBResidueIndex::GLY);
SWIG_LONG_CONSTANT(LEU, (int)OpenBabel::OBResidueIndex::LEU);
SWIG_LONG_CONSTANT(SER, (int)OpenBabel::OBResidueIndex::SER);
SWIG_LONG_CONSTANT(VAL, (int)OpenBabel::OBResidueIndex::VAL);
SWIG_LONG_CONSTANT(THR, (int)OpenBabel::OBResidueIndex::THR);
SWIG_LONG_CONSTANT(LYS, (int)OpenBabel::OBResidueIndex::LYS);
SWIG_LONG_CONSTANT(ASP, (int)OpenBabel::OBResidueIndex::ASP);
SWIG_LONG_CONSTANT(ILE, (int)OpenBabel::OBResidueIndex::ILE);
SWIG_LONG_CONSTANT(ASN, (int)OpenBabel::OBResidueIndex::ASN);
SWIG_LONG_CONSTANT(GLU, (int)OpenBabel::OBResidueIndex::GLU);
SWIG_LONG_CONSTANT(PRO, (int)OpenBabel::OBResidueIndex::PRO);
SWIG_LONG_CONSTANT(ARG, (int)OpenBabel::OBResidueIndex::ARG);
SWIG_LONG_CONSTANT(PHE, (int)OpenBabel::OBResidueIndex::PHE);
SWIG_LONG_CONSTANT(GLN, (int)OpenBabel::OBResidueIndex::GLN);
SWIG_LONG_CONSTANT(TYR, (int)OpenBabel::OBResidueIndex::TYR);
SWIG_LONG_CONSTANT(HIS, (int)OpenBabel::OBResidueIndex::HIS);
SWIG_LONG_CONSTANT(CYS, (int)OpenBabel::OBResidueIndex::CYS);
SWIG_LONG_CONSTANT(MET, (int)OpenBabel::OBResidueIndex::MET);
SWIG_LONG_CONSTANT(TRP, (int)OpenBabel::OBResidueIndex::TRP);
SWIG_LONG_CONSTANT(ASX, (int)OpenBabel::OBResidueIndex::ASX);
SWIG_LONG_CONSTANT(GLX, (int)OpenBabel::OBResidueIndex::GLX);
SWIG_LONG_CONSTANT(PCA, (int)OpenBabel::OBResidueIndex::PCA);
SWIG_LONG_CONSTANT(HYP, (int)OpenBabel::OBResidueIndex::HYP);
SWIG_LONG_CONSTANT(A, (int)OpenBabel::OBResidueIndex::A);
SWIG_LONG_CONSTANT(C, (int)OpenBabel::OBResidueIndex::C);
SWIG_LONG_CONSTANT(G, (int)OpenBabel::OBResidueIndex::G);
SWIG_LONG_CONSTANT(T, (int)OpenBabel::OBResidueIndex::T);
SWIG_LONG_CONSTANT(U, (int)OpenBabel::OBResidueIndex::U);
SWIG_LONG_CONSTANT(UPLUS, (int)OpenBabel::OBResidueIndex::UPLUS);
SWIG_LONG_CONSTANT(I, (int)OpenBabel::OBResidueIndex::I);
SWIG_LONG_CONSTANT(_1MA, (int)OpenBabel::OBResidueIndex::_1MA);
SWIG_LONG_CONSTANT(_5MC, (int)OpenBabel::OBResidueIndex::_5MC);
SWIG_LONG_CONSTANT(OMC, (int)OpenBabel::OBResidueIndex::OMC);
SWIG_LONG_CONSTANT(_1MG, (int)OpenBabel::OBResidueIndex::_1MG);
SWIG_LONG_CONSTANT(_2MG, (int)OpenBabel::OBResidueIndex::_2MG);
SWIG_LONG_CONSTANT(M2G, (int)OpenBabel::OBResidueIndex::M2G);
SWIG_LONG_CONSTANT(_7MG, (int)OpenBabel::OBResidueIndex::_7MG);
SWIG_LONG_CONSTANT(OMG, (int)OpenBabel::OBResidueIndex::OMG);
SWIG_LONG_CONSTANT(YG, (int)OpenBabel::OBResidueIndex::YG);
SWIG_LONG_CONSTANT(H2U, (int)OpenBabel::OBResidueIndex::H2U);
SWIG_LONG_CONSTANT(_5MU, (int)OpenBabel::OBResidueIndex::_5MU);
SWIG_LONG_CONSTANT(PSU, (int)OpenBabel::OBResidueIndex::PSU);
SWIG_LONG_CONSTANT(UNK, (int)OpenBabel::OBResidueIndex::UNK);
SWIG_LONG_CONSTANT(ACE, (int)OpenBabel::OBResidueIndex::ACE);
SWIG_LONG_CONSTANT(c_FOR, (int)OpenBabel::OBResidueIndex::FOR);
SWIG_LONG_CONSTANT(HOH, (int)OpenBabel::OBResidueIndex::HOH);
SWIG_LONG_CONSTANT(DOD, (int)OpenBabel::OBResidueIndex::DOD);
SWIG_LONG_CONSTANT(SO4, (int)OpenBabel::OBResidueIndex::SO4);
SWIG_LONG_CONSTANT(PO4, (int)OpenBabel::OBResidueIndex::PO4);
SWIG_LONG_CONSTANT(NAD, (int)OpenBabel::OBResidueIndex::NAD);
SWIG_LONG_CONSTANT(COA, (int)OpenBabel::OBResidueIndex::COA);
SWIG_LONG_CONSTANT(NAP, (int)OpenBabel::OBResidueIndex::NAP);
SWIG_LONG_CONSTANT(NDP, (int)OpenBabel::OBResidueIndex::NDP);
SWIG_LONG_CONSTANT(AMINO, (int)OpenBabel::OBResidueProperty::AMINO);
SWIG_LONG_CONSTANT(AMINO_NUCLEO, (int)OpenBabel::OBResidueProperty::AMINO_NUCLEO);
SWIG_LONG_CONSTANT(COENZYME, (int)OpenBabel::OBResidueProperty::COENZYME);
SWIG_LONG_CONSTANT(ION, (int)OpenBabel::OBResidueProperty::ION);
SWIG_LONG_CONSTANT(NUCLEO, (int)OpenBabel::OBResidueProperty::NUCLEO);
SWIG_LONG_CONSTANT(PROTEIN, (int)OpenBabel::OBResidueProperty::PROTEIN);
SWIG_LONG_CONSTANT(PURINE, (int)OpenBabel::OBResidueProperty::PURINE);
SWIG_LONG_CONSTANT(PYRIMIDINE, (int)OpenBabel::OBResidueProperty::PYRIMIDINE);
SWIG_LONG_CONSTANT(SOLVENT, (int)OpenBabel::OBResidueProperty::SOLVENT);
SWIG_LONG_CONSTANT(WATER, (int)OpenBabel::OBResidueProperty::WATER);
SWIG_LONG_CONSTANT(OB_4RING_ATOM, (int)(1 << 1));
SWIG_LONG_CONSTANT(OB_3RING_ATOM, (int)(1 << 2));
SWIG_LONG_CONSTANT(OB_AROMATIC_ATOM, (int)(1 << 3));
SWIG_LONG_CONSTANT(OB_RING_ATOM, (int)(1 << 4));
SWIG_LONG_CONSTANT(OB_CSTEREO_ATOM, (int)(1 << 5));
SWIG_LONG_CONSTANT(OB_ACSTEREO_ATOM, (int)(1 << 6));
SWIG_LONG_CONSTANT(OB_DONOR_ATOM, (int)(1 << 7));
SWIG_LONG_CONSTANT(OB_ACCEPTOR_ATOM, (int)(1 << 8));
SWIG_LONG_CONSTANT(OB_CHIRAL_ATOM, (int)(1 << 9));
SWIG_LONG_CONSTANT(OB_POS_CHIRAL_ATOM, (int)(1 << 10));
SWIG_LONG_CONSTANT(OB_NEG_CHIRAL_ATOM, (int)(1 << 11));
SWIG_LONG_CONSTANT(OB_ATOM_HAS_NO_H, (int)(1 << 12));
SWIG_LONG_CONSTANT(OB_ATOM_NOT_H_DEFICIENT, (int)(1 << 13));
SWIG_LONG_CONSTANT(OBATOM_TYPE_LEN, (int)6);
SWIG_LONG_CONSTANT(OB_AROMATIC_BOND, (int)(1 << 1));
SWIG_LONG_CONSTANT(OB_WEDGE_BOND, (int)(1 << 2));
SWIG_LONG_CONSTANT(OB_HASH_BOND, (int)(1 << 3));
SWIG_LONG_CONSTANT(OB_RING_BOND, (int)(1 << 4));
SWIG_LONG_CONSTANT(OB_TORUP_BOND, (int)(1 << 5));
SWIG_LONG_CONSTANT(OB_TORDOWN_BOND, (int)(1 << 6));
SWIG_LONG_CONSTANT(OB_KSINGLE_BOND, (int)(1 << 7));
SWIG_LONG_CONSTANT(OB_KDOUBLE_BOND, (int)(1 << 8));
SWIG_LONG_CONSTANT(OB_KTRIPLE_BOND, (int)(1 << 9));
SWIG_LONG_CONSTANT(OB_CLOSURE_BOND, (int)(1 << 10));
SWIG_LONG_CONSTANT(OB_WEDGE_OR_HASH_BOND, (int)(1 << 11));
SWIG_LONG_CONSTANT(OB_CIS_OR_TRANS_BOND, (int)(1 << 12));
SWIG_LONG_CONSTANT(OBBond_Aromatic, (int)OpenBabel::OBBond::Aromatic);
SWIG_LONG_CONSTANT(OBBond_Ring, (int)OpenBabel::OBBond::Ring);
SWIG_LONG_CONSTANT(OBBond_Closure, (int)OpenBabel::OBBond::Closure);
SWIG_LONG_CONSTANT(OBBond_Wedge, (int)OpenBabel::OBBond::Wedge);
SWIG_LONG_CONSTANT(OBBond_Hash, (int)OpenBabel::OBBond::Hash);
SWIG_LONG_CONSTANT(OBBond_WedgeOrHash, (int)OpenBabel::OBBond::WedgeOrHash);
SWIG_LONG_CONSTANT(OBBond_CisOrTrans, (int)OpenBabel::OBBond::CisOrTrans);
SWIG_LONG_CONSTANT(OB_SSSR_MOL, (int)(1 << 1));
SWIG_LONG_CONSTANT(OB_RINGFLAGS_MOL, (int)(1 << 2));
SWIG_LONG_CONSTANT(OB_AROMATIC_MOL, (int)(1 << 3));
SWIG_LONG_CONSTANT(OB_ATOMTYPES_MOL, (int)(1 << 4));
SWIG_LONG_CONSTANT(OB_CHIRALITY_MOL, (int)(1 << 5));
SWIG_LONG_CONSTANT(OB_PCHARGE_MOL, (int)(1 << 6));
SWIG_LONG_CONSTANT(OB_HYBRID_MOL, (int)(1 << 8));
SWIG_LONG_CONSTANT(OB_IMPVAL_MOL, (int)(1 << 9));
SWIG_LONG_CONSTANT(OB_KEKULE_MOL, (int)(1 << 10));
SWIG_LONG_CONSTANT(OB_CLOSURE_MOL, (int)(1 << 11));
SWIG_LONG_CONSTANT(OB_H_ADDED_MOL, (int)(1 << 12));
SWIG_LONG_CONSTANT(OB_PH_CORRECTED_MOL, (int)(1 << 13));
SWIG_LONG_CONSTANT(OB_AROM_CORRECTED_MOL, (int)(1 << 14));
SWIG_LONG_CONSTANT(OB_CHAINS_MOL, (int)(1 << 15));
SWIG_LONG_CONSTANT(OB_TCHARGE_MOL, (int)(1 << 16));
SWIG_LONG_CONSTANT(OB_TSPIN_MOL, (int)(1 << 17));
SWIG_LONG_CONSTANT(OB_RINGTYPES_MOL, (int)(1 << 18));
SWIG_LONG_CONSTANT(OB_PATTERN_STRUCTURE, (int)(1 << 19));
SWIG_LONG_CONSTANT(OB_LSSR_MOL, (int)(1 << 20));
SWIG_LONG_CONSTANT(OB_ATOMSPIN_MOL, (int)(1 << 21));
SWIG_LONG_CONSTANT(OB_CURRENT_CONFORMER, (int)-1);
SWIG_LONG_CONSTANT(AllHydrogen, (int)OpenBabel::AllHydrogen);
SWIG_LONG_CONSTANT(PolarHydrogen, (int)OpenBabel::PolarHydrogen);
SWIG_LONG_CONSTANT(NonPolarHydrogen, (int)OpenBabel::NonPolarHydrogen);
SWIG_LONG_CONSTANT(BUFF_SIZE, (int)32768);
SWIG_LONG_CONSTANT(OBSmartsPattern_All, (int)OpenBabel::OBSmartsPattern::All);
SWIG_LONG_CONSTANT(OBSmartsPattern_Single, (int)OpenBabel::OBSmartsPattern::Single);
SWIG_LONG_CONSTANT(OBSmartsPattern_AllUnique, (int)OpenBabel::OBSmartsPattern::AllUnique);
SWIG_LONG_CONSTANT(OBFingerprint_FPT_UNIQUEBITS, (int)OpenBabel::OBFingerprint::FPT_UNIQUEBITS);
SWIG_LONG_CONSTANT(OBFingerprint_FPT_NOINFO, (int)OpenBabel::OBFingerprint::FPT_NOINFO);
SWIG_LONG_CONSTANT(OBFF_LOGLVL_NONE, (int)0);
SWIG_LONG_CONSTANT(OBFF_LOGLVL_LOW, (int)1);
SWIG_LONG_CONSTANT(OBFF_LOGLVL_MEDIUM, (int)2);
SWIG_LONG_CONSTANT(OBFF_LOGLVL_HIGH, (int)3);
SWIG_LONG_CONSTANT(OBFF_ENERGY, (int)(1 << 0));
SWIG_LONG_CONSTANT(OBFF_EBOND, (int)(1 << 1));
SWIG_LONG_CONSTANT(OBFF_EANGLE, (int)(1 << 2));
SWIG_LONG_CONSTANT(OBFF_ESTRBND, (int)(1 << 3));
SWIG_LONG_CONSTANT(OBFF_ETORSION, (int)(1 << 4));
SWIG_LONG_CONSTANT(OBFF_EOOP, (int)(1 << 5));
SWIG_LONG_CONSTANT(OBFF_EVDW, (int)(1 << 6));
SWIG_LONG_CONSTANT(OBFF_EELECTROSTATIC, (int)(1 << 7));
SWIG_LONG_CONSTANT(OBFF_CONST_IGNORE, (int)(1 << 0));
SWIG_LONG_CONSTANT(OBFF_CONST_ATOM, (int)(1 << 1));
SWIG_LONG_CONSTANT(OBFF_CONST_ATOM_X, (int)(1 << 2));
SWIG_LONG_CONSTANT(OBFF_CONST_ATOM_Y, (int)(1 << 3));
SWIG_LONG_CONSTANT(OBFF_CONST_ATOM_Z, (int)(1 << 4));
SWIG_LONG_CONSTANT(OBFF_CONST_DISTANCE, (int)(1 << 5));
SWIG_LONG_CONSTANT(OBFF_CONST_ANGLE, (int)(1 << 6));
SWIG_LONG_CONSTANT(OBFF_CONST_TORSION, (int)(1 << 7));
SWIG_LONG_CONSTANT(OBFF_CONST_CHIRAL, (int)(1 << 8));
SWIG_LONG_CONSTANT(OBFF_NUMERICAL_GRADIENT, (int)(1 << 0));
SWIG_LONG_CONSTANT(OBFF_ANALYTICAL_GRADIENT, (int)(1 << 1));
SWIG_DOUBLE_CONSTANT(KCAL_TO_KJ, 4.1868);
SWIG_LONG_CONSTANT(LineSearchType_Simple, (int)OpenBabel::LineSearchType::Simple);
SWIG_LONG_CONSTANT(LineSearchType_Newton2Num, (int)OpenBabel::LineSearchType::Newton2Num);
SWIG_LONG_CONSTANT(OBStereo_CisTrans, (int)OpenBabel::OBStereo::CisTrans);
SWIG_LONG_CONSTANT(OBStereo_ExtendedCisTrans, (int)OpenBabel::OBStereo::ExtendedCisTrans);
SWIG_LONG_CONSTANT(OBStereo_SquarePlanar, (int)OpenBabel::OBStereo::SquarePlanar);
SWIG_LONG_CONSTANT(OBStereo_Tetrahedral, (int)OpenBabel::OBStereo::Tetrahedral);
SWIG_LONG_CONSTANT(OBStereo_ExtendedTetrahedral, (int)OpenBabel::OBStereo::ExtendedTetrahedral);
SWIG_LONG_CONSTANT(OBStereo_TrigonalBipyramidal, (int)OpenBabel::OBStereo::TrigonalBipyramidal);
SWIG_LONG_CONSTANT(OBStereo_Octahedral, (int)OpenBabel::OBStereo::Octahedral);
SWIG_LONG_CONSTANT(OBStereo_NotStereo, (int)OpenBabel::OBStereo::NotStereo);
SWIG_LONG_CONSTANT(OBStereo_UpBond, (int)OpenBabel::OBStereo::UpBond);
SWIG_LONG_CONSTANT(OBStereo_DownBond, (int)OpenBabel::OBStereo::DownBond);
SWIG_LONG_CONSTANT(OBStereo_UnknownDir, (int)OpenBabel::OBStereo::UnknownDir);
SWIG_LONG_CONSTANT(OBStereo_ShapeU, (int)OpenBabel::OBStereo::ShapeU);
SWIG_LONG_CONSTANT(OBStereo_ShapeZ, (int)OpenBabel::OBStereo::ShapeZ);
SWIG_LONG_CONSTANT(OBStereo_Shape4, (int)OpenBabel::OBStereo::Shape4);
SWIG_LONG_CONSTANT(OBStereo_ViewFrom, (int)OpenBabel::OBStereo::ViewFrom);
SWIG_LONG_CONSTANT(OBStereo_ViewTowards, (int)OpenBabel::OBStereo::ViewTowards);
SWIG_LONG_CONSTANT(OBStereo_Clockwise, (int)OpenBabel::OBStereo::Clockwise);
SWIG_LONG_CONSTANT(OBStereo_AntiClockwise, (int)OpenBabel::OBStereo::AntiClockwise);
SWIG_LONG_CONSTANT(OBStereo_UnknownWinding, (int)OpenBabel::OBStereo::UnknownWinding);
SWIG_LONG_CONSTANT(OBStereo_NoRef, (int)OpenBabel::OBStereo::NoRef);
SWIG_LONG_CONSTANT(OBStereo_ImplicitRef, (int)OpenBabel::OBStereo::ImplicitRef);
SWIG_LONG_CONSTANT(SETWORD, (int)32);
SWIG_LONG_CONSTANT(WORDROLL, (int)5);
SWIG_LONG_CONSTANT(WORDMASK, (int)31);
SWIG_LONG_CONSTANT(STARTWORDS, (int)10);
SWIG_LONG_CONSTANT(N_PROPERTIES, (int)4);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize1, (int)OpenBabel::OBSpectrophore::AngStepSize1);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize2, (int)OpenBabel::OBSpectrophore::AngStepSize2);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize5, (int)OpenBabel::OBSpectrophore::AngStepSize5);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize10, (int)OpenBabel::OBSpectrophore::AngStepSize10);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize15, (int)OpenBabel::OBSpectrophore::AngStepSize15);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize20, (int)OpenBabel::OBSpectrophore::AngStepSize20);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize30, (int)OpenBabel::OBSpectrophore::AngStepSize30);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize36, (int)OpenBabel::OBSpectrophore::AngStepSize36);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize45, (int)OpenBabel::OBSpectrophore::AngStepSize45);
SWIG_LONG_CONSTANT(OBSpectrophore_AngStepSize60, (int)OpenBabel::OBSpectrophore::AngStepSize60);
SWIG_LONG_CONSTANT(OBSpectrophore_NoNormalization, (int)OpenBabel::OBSpectrophore::NoNormalization);
SWIG_LONG_CONSTANT(OBSpectrophore_NormalizationTowardsZeroMean, (int)OpenBabel::OBSpectrophore::NormalizationTowardsZeroMean);
SWIG_LONG_CONSTANT(OBSpectrophore_NormalizationTowardsUnitStd, (int)OpenBabel::OBSpectrophore::NormalizationTowardsUnitStd);
SWIG_LONG_CONSTANT(OBSpectrophore_NormalizationTowardsZeroMeanAndUnitStd, (int)OpenBabel::OBSpectrophore::NormalizationTowardsZeroMeanAndUnitStd);
SWIG_LONG_CONSTANT(OBSpectrophore_NoStereoSpecificProbes, (int)OpenBabel::OBSpectrophore::NoStereoSpecificProbes);
SWIG_LONG_CONSTANT(OBSpectrophore_UniqueStereoSpecificProbes, (int)OpenBabel::OBSpectrophore::UniqueStereoSpecificProbes);
SWIG_LONG_CONSTANT(OBSpectrophore_MirrorStereoSpecificProbes, (int)OpenBabel::OBSpectrophore::MirrorStereoSpecificProbes);
SWIG_LONG_CONSTANT(OBSpectrophore_AllStereoSpecificProbes, (int)OpenBabel::OBSpectrophore::AllStereoSpecificProbes);
/* end cinit subsection */

    return SUCCESS;
}

PHP_RINIT_FUNCTION(openbabel)
{
/* rinit section */

/* vinit subsection */
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::VZero, SWIGTYPE_p_OpenBabel__vector3, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::VZero", sizeof("OpenBabel::VZero"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::VX, SWIGTYPE_p_OpenBabel__vector3, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::VX", sizeof("OpenBabel::VX"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::VY, SWIGTYPE_p_OpenBabel__vector3, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::VY", sizeof("OpenBabel::VY"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::VZ, SWIGTYPE_p_OpenBabel__vector3, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::VZ", sizeof("OpenBabel::VZ"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::obErrorLog, SWIGTYPE_p_OpenBabel__OBMessageHandler, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::obErrorLog", sizeof("OpenBabel::obErrorLog"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)OpenBabel::Residue, SWIGTYPE_p_a_4__char, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::Residue", sizeof("OpenBabel::Residue"), (void *)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)OpenBabel::ElemDesc, SWIGTYPE_p_a_4__char, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::ElemDesc", sizeof("OpenBabel::ElemDesc"), (void *)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = (long)OpenBabel::ResNo;
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::ResNo", sizeof("OpenBabel::ResNo"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = (long)OpenBabel::ElemNo;
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::ElemNo", sizeof("OpenBabel::ElemNo"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::etab, SWIGTYPE_p_OpenBabel__OBElementTable, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::etab", sizeof("OpenBabel::etab"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::ttab, SWIGTYPE_p_OpenBabel__OBTypeTable, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::ttab", sizeof("OpenBabel::ttab"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::isotab, SWIGTYPE_p_OpenBabel__OBIsotopeTable, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::isotab", sizeof("OpenBabel::isotab"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::aromtyper, SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::aromtyper", sizeof("OpenBabel::aromtyper"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::atomtyper, SWIGTYPE_p_OpenBabel__OBAtomTyper, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::atomtyper", sizeof("OpenBabel::atomtyper"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::chainsparser, SWIGTYPE_p_OpenBabel__OBChainsParser, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::chainsparser", sizeof("OpenBabel::chainsparser"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;

  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)&OpenBabel::resdat, SWIGTYPE_p_OpenBabel__OBResidueData, 0);
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::resdat", sizeof("OpenBabel::resdat"), (void*)&z_var,
  sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = (long)OpenBabel::NoId;
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::NoId", sizeof("OpenBabel::NoId"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = (long)OpenBabel::AliasDataType;
  zend_hash_add(&EG(symbol_table), (char*)"OpenBabel::AliasDataType", sizeof("OpenBabel::AliasDataType"), (void *)&z_var, sizeof(zval *), NULL);
}
/* end vinit subsection */

    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(openbabel)
{
/* shutdown section */
#ifdef ZTS
    ts_free_id(openbabel_globals_id);
#endif
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(openbabel)
{
/* rshutdown section */

    return SUCCESS;
}

PHP_MINFO_FUNCTION(openbabel)
{
}
/* end init section */
